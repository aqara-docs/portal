{"ast":null,"code":"var _jsxFileName = \"/Users/aqaralife/Documents/GitHub/portal/src/components/common/SimpleDatePicker.tsx\";\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatePickerContainer = styled.div`\n  width: 100%;\n`;\n_c = DatePickerContainer;\nconst DateInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 8px;\n  font-size: 1rem;\n\n  &:focus {\n    border-color: #3b82f6;\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n`;\n_c2 = DateInput;\nconst SimpleDatePicker = ({\n  selected,\n  onChange,\n  placeholderText,\n  minDate,\n  maxDate\n}) => {\n  const handleChange = e => {\n    const date = new Date(e.target.value);\n    if (!isNaN(date.getTime())) {\n      onChange(date);\n    }\n  };\n  const formatDate = date => {\n    if (!date) return '';\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  const getMinDate = () => {\n    if (minDate) {\n      return formatDate(minDate);\n    }\n    return '';\n  };\n  const getMaxDate = () => {\n    if (maxDate) {\n      return formatDate(maxDate);\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(DatePickerContainer, {\n    children: /*#__PURE__*/_jsxDEV(DateInput, {\n      type: \"date\",\n      value: formatDate(selected),\n      onChange: handleChange,\n      placeholder: placeholderText,\n      min: getMinDate(),\n      max: getMaxDate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c3 = SimpleDatePicker;\nexport default SimpleDatePicker;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DatePickerContainer\");\n$RefreshReg$(_c2, \"DateInput\");\n$RefreshReg$(_c3, \"SimpleDatePicker\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","DatePickerContainer","div","_c","DateInput","input","_c2","SimpleDatePicker","selected","onChange","placeholderText","minDate","maxDate","handleChange","e","date","Date","target","value","isNaN","getTime","formatDate","year","getFullYear","month","String","getMonth","padStart","day","getDate","getMinDate","getMaxDate","children","type","placeholder","min","max","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/aqaralife/Documents/GitHub/portal/src/components/common/SimpleDatePicker.tsx"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst DatePickerContainer = styled.div`\n  width: 100%;\n`;\n\nconst DateInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 8px;\n  font-size: 1rem;\n\n  &:focus {\n    border-color: #3b82f6;\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n`;\n\ninterface SimpleDatePickerProps {\n  selected: Date | null;\n  onChange: (date: Date) => void;\n  placeholderText?: string;\n  minDate?: Date | null;\n  maxDate?: Date | null;\n}\n\nconst SimpleDatePicker: React.FC<SimpleDatePickerProps> = ({\n  selected,\n  onChange,\n  placeholderText,\n  minDate,\n  maxDate\n}) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const date = new Date(e.target.value);\n    if (!isNaN(date.getTime())) {\n      onChange(date);\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return '';\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  const getMinDate = () => {\n    if (minDate) {\n      return formatDate(minDate);\n    }\n    return '';\n  };\n\n  const getMaxDate = () => {\n    if (maxDate) {\n      return formatDate(maxDate);\n    }\n    return '';\n  };\n\n  return (\n    <DatePickerContainer>\n      <DateInput\n        type=\"date\"\n        value={formatDate(selected)}\n        onChange={handleChange}\n        placeholder={placeholderText}\n        min={getMinDate()}\n        max={getMaxDate()}\n      />\n    </DatePickerContainer>\n  );\n};\n\nexport default SimpleDatePicker; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,mBAAmB,GAAGH,MAAM,CAACI,GAAG;AACtC;AACA,CAAC;AAACC,EAAA,GAFIF,mBAAmB;AAIzB,MAAMG,SAAS,GAAGN,MAAM,CAACO,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAZIF,SAAS;AAsBf,MAAMG,gBAAiD,GAAGA,CAAC;EACzDC,QAAQ;EACRC,QAAQ;EACRC,eAAe;EACfC,OAAO;EACPC;AACF,CAAC,KAAK;EACJ,MAAMC,YAAY,GAAIC,CAAsC,IAAK;IAC/D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;IACrC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,EAAE;MAC1BX,QAAQ,CAACM,IAAI,CAAC;IAChB;EACF,CAAC;EAED,MAAMM,UAAU,GAAIN,IAAiB,IAAK;IACxC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IACpB,MAAMO,IAAI,GAAGP,IAAI,CAACQ,WAAW,CAAC,CAAC;IAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACV,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACV,IAAI,CAACc,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,OAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,EAAE;EAClC,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAInB,OAAO,EAAE;MACX,OAAOU,UAAU,CAACV,OAAO,CAAC;IAC5B;IACA,OAAO,EAAE;EACX,CAAC;EAED,MAAMoB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAInB,OAAO,EAAE;MACX,OAAOS,UAAU,CAACT,OAAO,CAAC;IAC5B;IACA,OAAO,EAAE;EACX,CAAC;EAED,oBACEZ,OAAA,CAACC,mBAAmB;IAAA+B,QAAA,eAClBhC,OAAA,CAACI,SAAS;MACR6B,IAAI,EAAC,MAAM;MACXf,KAAK,EAAEG,UAAU,CAACb,QAAQ,CAAE;MAC5BC,QAAQ,EAAEI,YAAa;MACvBqB,WAAW,EAAExB,eAAgB;MAC7ByB,GAAG,EAAEL,UAAU,CAAC,CAAE;MAClBM,GAAG,EAAEL,UAAU,CAAC;IAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAE1B,CAAC;AAACC,GAAA,GAhDIlC,gBAAiD;AAkDvD,eAAeA,gBAAgB;AAAC,IAAAJ,EAAA,EAAAG,GAAA,EAAAmC,GAAA;AAAAC,YAAA,CAAAvC,EAAA;AAAAuC,YAAA,CAAApC,GAAA;AAAAoC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}