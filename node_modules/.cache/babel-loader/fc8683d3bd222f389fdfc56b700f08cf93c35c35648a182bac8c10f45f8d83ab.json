{"ast":null,"code":"import axios from 'axios';\nexport class OpenAI {\n  static async generateResponse(prompt) {\n    try {\n      const response = await axios.post(`${this.API_URL}/chat/completions`, {\n        model: \"gpt-4\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('OpenAI API 오류:', error);\n      throw error;\n    }\n  }\n  static async generateSpeech(text) {\n    try {\n      const response = await axios.post(`${this.API_URL}/audio/speech`, {\n        model: \"tts-1\",\n        input: text,\n        voice: \"shimmer\"\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('OpenAI TTS API 오류:', error);\n      throw error;\n    }\n  }\n  static async analyzeDiscussion(transcript) {\n    const prompt = `\n      다음 독서토론 내용을 분석해주세요:\n      ${transcript}\n      \n      다음 항목을 포함해서 분석해주세요:\n      1. 주요 논점\n      2. 각 참여자의 기여도\n      3. 토론의 깊이와 질\n      4. 개선점 제안\n    `;\n    return this.generateResponse(prompt);\n  }\n}\nOpenAI.API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nOpenAI.API_URL = 'https://api.openai.com/v1';","map":{"version":3,"names":["axios","OpenAI","generateResponse","prompt","response","post","API_URL","model","messages","role","content","temperature","headers","API_KEY","data","choices","message","error","console","generateSpeech","text","input","voice","responseType","analyzeDiscussion","transcript","process","env","REACT_APP_OPENAI_API_KEY"],"sources":["/Users/aqaralife/Documents/GitHub/portal/src/services/openai.ts"],"sourcesContent":["import axios from 'axios';\n\nexport class OpenAI {\n  private static API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n  private static API_URL = 'https://api.openai.com/v1';\n\n  static async generateResponse(prompt: string): Promise<string> {\n    try {\n      const response = await axios.post(\n        `${this.API_URL}/chat/completions`,\n        {\n          model: \"gpt-4\",\n          messages: [{ role: \"user\", content: prompt }],\n          temperature: 0.7,\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('OpenAI API 오류:', error);\n      throw error;\n    }\n  }\n\n  static async generateSpeech(text: string): Promise<ArrayBuffer> {\n    try {\n      const response = await axios.post(\n        `${this.API_URL}/audio/speech`,\n        {\n          model: \"tts-1\",\n          input: text,\n          voice: \"shimmer\",\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          responseType: 'arraybuffer',\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('OpenAI TTS API 오류:', error);\n      throw error;\n    }\n  }\n\n  static async analyzeDiscussion(transcript: string): Promise<string> {\n    const prompt = `\n      다음 독서토론 내용을 분석해주세요:\n      ${transcript}\n      \n      다음 항목을 포함해서 분석해주세요:\n      1. 주요 논점\n      2. 각 참여자의 기여도\n      3. 토론의 깊이와 질\n      4. 개선점 제안\n    `;\n\n    return this.generateResponse(prompt);\n  }\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,MAAM,CAAC;EAIlB,aAAaC,gBAAgBA,CAACC,MAAc,EAAmB;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC/B,GAAG,IAAI,CAACC,OAAO,mBAAmB,EAClC;QACEC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEP;QAAO,CAAC,CAAC;QAC7CQ,WAAW,EAAE;MACf,CAAC,EACD;QACEC,OAAO,EAAE;UACP,eAAe,EAAE,UAAU,IAAI,CAACC,OAAO,EAAE;UACzC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MACD,OAAOT,QAAQ,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO;IACjD,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACb;EACF;EAEA,aAAaE,cAAcA,CAACC,IAAY,EAAwB;IAC9D,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC/B,GAAG,IAAI,CAACC,OAAO,eAAe,EAC9B;QACEC,KAAK,EAAE,OAAO;QACdc,KAAK,EAAED,IAAI;QACXE,KAAK,EAAE;MACT,CAAC,EACD;QACEV,OAAO,EAAE;UACP,eAAe,EAAE,UAAU,IAAI,CAACC,OAAO,EAAE;UACzC,cAAc,EAAE;QAClB,CAAC;QACDU,YAAY,EAAE;MAChB,CACF,CAAC;MACD,OAAOnB,QAAQ,CAACU,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,aAAaO,iBAAiBA,CAACC,UAAkB,EAAmB;IAClE,MAAMtB,MAAM,GAAG;AACnB;AACA,QAAQsB,UAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,OAAO,IAAI,CAACvB,gBAAgB,CAACC,MAAM,CAAC;EACtC;AACF;AAjEaF,MAAM,CACFY,OAAO,GAAGa,OAAO,CAACC,GAAG,CAACC,wBAAwB;AADlD3B,MAAM,CAEFK,OAAO,GAAG,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}