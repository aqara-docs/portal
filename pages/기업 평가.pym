import streamlit as st
import os
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
import plotly.express as px
from openai import OpenAI
import anthropic
from dotenv import load_dotenv
from alpha_vantage.fundamentaldata import FundamentalData
from alpha_vantage.timeseries import TimeSeries
import numpy as np
import matplotlib.pyplot as plt
import io
import re
import zipfile
import xml.etree.ElementTree as ET
import dart_fss as dart_fss
import json
import mysql.connector
import graphviz
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# 환경 변수 로드
load_dotenv()

dart_fss.set_api_key(api_key=os.getenv('DART_API_KEY'))

# MySQL Database configuration
db_config = {
    'user': os.getenv('SQL_USER'),
    'password': os.getenv('SQL_PASSWORD'),
    'host': os.getenv('SQL_HOST'),
    'database': os.getenv('SQL_DATABASE_NEWBIZ'),
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_general_ci'
}

# 기본 환율 설정
DEFAULT_EXCHANGE_RATES = {
    'USD_KRW': 1350.0,  # USD to KRW
    'CNY_KRW': 190.0,   # CNY to KRW
    'JPY_KRW': 9.0,     # JPY to KRW
    'EUR_KRW': 1450.0   # EUR to KRW
}

# 환율 정보를 가져오는 함수
def get_exchange_rates():
    try:
        # 실제 API 호출로 대체 가능
        # response = requests.get('https://api.exchangerate-api.com/v4/latest/USD')
        # rates = response.json()['rates']
        # return rates
        return DEFAULT_EXCHANGE_RATES
    except:
        st.warning("환율 정보를 가져오는데 실패했습니다. 기본값을 사용합니다.")
        return DEFAULT_EXCHANGE_RATES

# DCF 계산 함수
def calculate_dcf(current_fcf, growth_rate, discount_rate, terminal_growth_rate, years=5):
    """
    DCF(Discounted Cash Flow) 모델을 사용하여 기업가치 계산
    
    Parameters:
    - current_fcf: 현재 잉여현금흐름(Free Cash Flow)
    - growth_rate: 예상 연간 성장률 (예: 0.05 = 5%)
    - discount_rate: 할인율 (예: 0.1 = 10%)
    - terminal_growth_rate: 영구 성장률 (예: 0.03 = 3%)
    - years: 예측 기간 (년)
    
    Returns:
    - 기업가치(현재가치)
    """
    future_fcfs = []
    for year in range(1, years + 1):
        future_fcf = current_fcf * (1 + growth_rate) ** year
        future_fcfs.append(future_fcf)
    
    # 각 미래 FCF의 현재가치 계산
    present_values = []
    for i, fcf in enumerate(future_fcfs):
        present_value = fcf / (1 + discount_rate) ** (i + 1)
        present_values.append(present_value)
    
    # 잔여가치(Terminal Value) 계산 - Gordon Growth Model
    terminal_value = future_fcfs[-1] * (1 + terminal_growth_rate) / (discount_rate - terminal_growth_rate)
    
    # 잔여가치의 현재가치
    terminal_value_pv = terminal_value / (1 + discount_rate) ** years
    
    # 총 기업가치 = 예측 기간 FCF의 현재가치 합계 + 잔여가치의 현재가치
    company_value = sum(present_values) + terminal_value_pv
    
    return {
        'company_value': company_value,
        'future_fcfs': future_fcfs,
        'present_values': present_values,
        'terminal_value': terminal_value,
        'terminal_value_pv': terminal_value_pv
    }

# PER 기반 가치 평가 함수
def calculate_per_valuation(net_income, pers):
    """
    PER(주가수익비율) 기반 기업가치 계산
    
    Parameters:
    - net_income: 당기순이익
    - pers: PER 배수 리스트 (예: [10, 15, 20])
    
    Returns:
    - PER별 기업가치 딕셔너리
    """
    per_valuations = {}
    for per in pers:
        valuation = net_income * per
        per_valuations[per] = valuation
    
    return per_valuations

# 무형자산 가치 평가 함수
def estimate_intangible_asset_value(r_and_d_cost, patents_count, trademarks_count, 
                                   technology_impact, market_size, market_share):
    """
    무형자산 가치 추정 함수
    
    Parameters:
    - r_and_d_cost: R&D 투자 비용
    - patents_count: 특허 개수
    - trademarks_count: 상표권 개수
    - technology_impact: 기술 영향력 (0~1)
    - market_size: 시장 규모
    - market_share: 시장 점유율 (0~1)
    
    Returns:
    - 추정 무형자산 가치
    """
    # 원가법 기반 가치
    cost_based_value = r_and_d_cost * 1.5  # 보수적인 R&D 투자 비용 기반 가치
    
    # 특허 및 상표권 기반 가치
    ip_value = (patents_count * 0.5 + trademarks_count * 0.3) * r_and_d_cost
    
    # 시장 기반 가치
    market_based_value = market_size * market_share * technology_impact
    
    # 가중 평균 가치 (각 방법론에 가중치 부여)
    weighted_value = (cost_based_value * 0.3) + (ip_value * 0.3) + (market_based_value * 0.4)
    
    return {
        'cost_based_value': cost_based_value,
        'ip_value': ip_value,
        'market_based_value': market_based_value,
        'weighted_value': weighted_value
    }

# 통화 변환 함수
def convert_currency(amount, from_currency, to_currency, exchange_rates):
    """
    통화 변환 함수
    
    Parameters:
    - amount: 금액
    - from_currency: 원래 통화 코드 (예: 'USD')
    - to_currency: 변환할 통화 코드 (예: 'KRW')
    - exchange_rates: 환율 정보 딕셔너리
    
    Returns:
    - 변환된 금액
    """
    if from_currency == to_currency:
        return amount
    
    # USD가 기준인 경우 직접 변환
    if from_currency == 'USD' and f'{from_currency}_{to_currency}' in exchange_rates:
        return amount * exchange_rates[f'{from_currency}_{to_currency}']
    
    # KRW가 목표인 경우 직접 변환
    if to_currency == 'KRW' and f'{from_currency}_{to_currency}' in exchange_rates:
        return amount * exchange_rates[f'{from_currency}_{to_currency}']
    
    # 다른 통화끼리의 변환은 KRW를 거쳐서 계산
    if f'{from_currency}_KRW' in exchange_rates and f'USD_KRW' in exchange_rates:
        # 첫 통화 -> KRW -> 대상 통화로 변환
        amount_in_krw = amount * exchange_rates[f'{from_currency}_KRW']
        if to_currency == 'KRW':
            return amount_in_krw
        elif f'{to_currency}_KRW' in exchange_rates:
            return amount_in_krw / exchange_rates[f'{to_currency}_KRW']
    
    # 변환할 수 없는 경우
    st.error(f"{from_currency}에서 {to_currency}로 변환할 수 없습니다.")
    return None

# 숫자 포맷팅 함수
def format_currency(amount, currency='KRW'):
    """
    통화 포맷팅 함수
    
    Parameters:
    - amount: 금액
    - currency: 통화 코드
    
    Returns:
    - 포맷팅된 문자열
    """
    if currency == 'KRW':
        if amount >= 1_000_000_000:
            return f"{amount/1_000_000_000:.2f}십억 원"
        elif amount >= 100_000_000:
            return f"{amount/100_000_000:.2f}억 원"
        elif amount >= 10000:
            return f"{amount/10000:.2f}만 원"
        else:
            return f"{amount:,.0f} 원"
    elif currency == 'USD':
        return f"${amount:,.2f}"
    elif currency == 'CNY':
        return f"¥{amount:,.2f}"
    elif currency == 'JPY':
        return f"¥{amount:,.0f}"
    elif currency == 'EUR':
        return f"€{amount:,.2f}"
    else:
        return f"{amount:,.2f} {currency}"

# Perplexity API를 활용한 기업 정보 검색 함수
def get_company_info_with_perplexity(company_name, search_type="general"):
    """Perplexity API를 활용한 기업 정보 검색"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return {'error': 'Perplexity API 키가 설정되지 않았습니다.'}
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        # 검색 유형별 프롬프트 설정
        prompts = {
            "general": f"""
            {company_name} 기업에 대한 종합 정보를 제공해주세요.
            
            다음 형식으로 정확히 답변해주세요:
            
            기업명: [정확한 기업명]
            종목코드: [국내 주식의 경우 6자리 종목코드]
            시가총액: [현재 시가총액]
            업종: [주요 사업 영역]
            주요 제품/서비스: [핵심 제품이나 서비스]
            최근 실적: [최근 분기/연간 실적 요약]
            투자 의견: [주요 증권사 투자의견]
            전망: [향후 전망]
            리스크 요인: [주요 투자 리스크]
            
            최신 정보를 바탕으로 정확하고 구체적인 데이터를 제공해주세요.
            """,
            
            "financial": f"""
            {company_name}의 최신 재무 정보를 제공해주세요.
            
            다음 형식으로 정확히 답변해주세요:
            
            현재가: [현재 주가]
            시가총액: [시가총액]
            PER: [주가수익비율]
            PBR: [주가순자산비율]
            ROE: [자기자본이익률]
            ROA: [총자산이익률]
            부채비율: [부채비율]
            영업이익률: [영업이익률]
            최근 실적: [최근 분기 실적]
            전망: [향후 실적 전망]
            
            가능한 한 최신 데이터를 제공해주세요.
            """,
            
            "market_research": f"""
            {company_name}이 속한 시장과 경쟁 환경에 대한 분석을 제공해주세요.
            
            다음 형식으로 정확히 답변해주세요:
            
            시장 규모: [해당 시장의 규모]
            시장 성장률: [시장 성장률]
            주요 경쟁사: [주요 경쟁 기업들]
            시장 점유율: [해당 기업의 시장 점유율]
            경쟁 우위: [기업의 경쟁 우위 요소]
            시장 트렌드: [시장의 주요 트렌드]
            성장 동력: [기업의 성장 동력]
            위험 요소: [시장/경쟁 관련 위험 요소]
            
            시장 조사 관점에서 객관적이고 구체적인 정보를 제공해주세요.
            """
        }
        
        prompt = prompts.get(search_type, prompts["general"])
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # 응답을 구조화된 데이터로 파싱
        parsed_data = parse_perplexity_response(content)
        parsed_data['source'] = 'Perplexity API'
        parsed_data['search_type'] = search_type
        
        return parsed_data
        
    except Exception as e:
        return {'error': f'Perplexity API 오류: {str(e)}'}

def parse_perplexity_response(content):
    """Perplexity API 응답을 구조화된 데이터로 파싱"""
    try:
        lines = content.split('\n')
        data = {}
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip()
                value = value.strip()
                if value and value != '[정보 없음]':
                    data[key] = value
        
        return data
    except:
        return {'raw_response': content}

# 기존 get_ticker_from_name 함수 개선 (Perplexity 활용)
def get_ticker_from_name_with_perplexity(name):
    """Perplexity API를 활용한 기업명-티커 매핑"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return get_ticker_from_name(name)  # 기존 방식으로 폴백
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        prompt = f"""
        {name} 기업의 정확한 종목코드(6자리)를 찾아주세요.
        
        다음 형식으로만 답변해주세요:
        종목코드: [6자리 숫자]
        
        만약 여러 개의 유사한 기업이 있다면, 가장 유명하거나 대표적인 기업의 종목코드만 제공해주세요.
        """
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100,
            temperature=0.1
        )
        
        content = response.choices[0].message.content
        
        # 종목코드 추출
        import re
        match = re.search(r'종목코드:\s*(\d{6})', content)
        if match:
            code = match.group(1)
            return code + ".KS"
        
        return get_ticker_from_name(name)  # 기존 방식으로 폴백
        
    except Exception as e:
        return get_ticker_from_name(name)  # 기존 방식으로 폴백

# 네이버 금융에서 기업명으로 검색된 모든 후보(회사명, 코드) 리스트 반환
def get_ticker_candidates_from_naver(name):
    """네이버 금융에서 기업명으로 검색된 모든 후보(회사명, 코드) 리스트 반환"""
    try:
        search_url = f"https://finance.naver.com/search/searchList.naver?query={name}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        resp = requests.get(search_url, headers=headers)
        soup = BeautifulSoup(resp.content, 'html.parser')
        candidates = []
        for row in soup.select('table.tbl_search tr'):  # 첫 tr은 헤더
            link = row.select_one('td.tit > a')
            if link and 'code=' in link['href']:
                code = link['href'].split('code=')[1][:6]
                company_name = link.text.strip()
                market = row.select_one('td.tit span')
                market_str = market.text.strip() if market else ''
                candidates.append({
                    'name': company_name,
                    'code': code,
                    'market': market_str,
                    'ticker': code + ".KS"  # 기본 코스피로 가정
                })
        return candidates
    except Exception:
        return []

def get_ticker_from_name(name):
    # 1. 입력값이 이미 티커면 그대로 반환
    if '.' in name:
        return name
    # 2. 6자리 숫자인 경우 .KS 추가
    if name.isdigit() and len(name) == 6:
        return name + ".KS"
    # 3. 네이버 금융에서 국내 종목코드 검색 (여러 후보 반환)
    candidates = get_ticker_candidates_from_naver(name)
    if len(candidates) == 1:
        return candidates[0]['ticker']
    elif len(candidates) > 1:
        return candidates  # 후보 리스트 반환
    # 4. yfinance의 검색 기능 활용 (해외)
    try:
        import yfinance as yf
        name_map = {
            '애플': 'AAPL', 'apple': 'AAPL',
            '마이크로소프트': 'MSFT', 'microsoft': 'MSFT',
            '구글': 'GOOGL', '알파벳': 'GOOGL', 'alphabet': 'GOOGL',
            '아마존': 'AMZN', 'amazon': 'AMZN',
            '테슬라': 'TSLA', 'tesla': 'TSLA',
            '엔비디아': 'NVDA', 'nvidia': 'NVDA',
            '메타': 'META', '페이스북': 'META', 'facebook': 'META',
            '삼성전자': '005930.KS', '카카오': '035720.KS', '네이버': '035420.KS',
            '현대차': '005380.KS', '현대': '005380.KS',
        }
        key = name.lower().strip()
        if key in name_map:
            return name_map[key]
    except Exception:
        pass
    return None

# 상장기업 정보 조회 함수 (yfinance)
def get_yf_info(ticker):
    try:
        import yfinance as yf
        stock = yf.Ticker(ticker)
        
        # 1. 먼저 히스토리 데이터 가져오기 (Rate Limit 위험 낮음)
        hist = stock.history(period="1y")
        
        # 2. info 데이터 가져오기 (Rate Limit 위험 높음)
        try:
            info = stock.info
            if not info or info is None or info == {}:
                # info가 비어있으면 기본 정보 생성
                info = create_basic_info_from_history(ticker, hist)
        except Exception as info_error:
            # info 가져오기 실패 시 기본 정보 생성
            info = create_basic_info_from_history(ticker, hist)
        
        # 3. 재무제표 데이터 (선택적)
        try:
            fin = stock.financials if hasattr(stock, 'financials') else None
        except:
            fin = None
        
        return info, hist, fin, None
        
    except Exception as e:
        if "Rate limited" in str(e) or "Too Many Requests" in str(e):
            return None, None, None, "Yahoo Finance에서 너무 많은 요청이 감지되어 일시적으로 차단되었습니다. 잠시 후 다시 시도하거나 VPN을 사용해보세요."
        return None, None, None, str(e)

def create_basic_info_from_history(ticker, hist):
    """히스토리 데이터로부터 기본 정보 생성"""
    if hist is None or hist.empty:
        return {
            'symbol': ticker,
            'shortName': ticker.replace('.KS', '').replace('.KQ', ''),
            'regularMarketPrice': 0,
            'currency': 'KRW',
            'source': 'yfinance_history'
        }
    
    latest_close = hist['Close'].iloc[-1]
    latest_volume = hist['Volume'].iloc[-1] if 'Volume' in hist.columns else 0
    
    return {
        'symbol': ticker,
        'shortName': ticker.replace('.KS', '').replace('.KQ', ''),
        'longName': ticker.replace('.KS', '').replace('.KQ', ''),
        'regularMarketPrice': float(latest_close),
        'marketCap': float(latest_close) * float(latest_volume) if latest_volume > 0 else None,
        'currency': 'KRW',
        'country': 'Korea',
        'industry': 'Unknown',
        'source': 'yfinance_history',
        'lastUpdated': hist.index[-1].strftime('%Y-%m-%d') if len(hist) > 0 else None
    }

def parse_market_cap(text):
    """'42조 5,896억' 등 한글 단위 시가총액을 숫자로 변환"""
    if not text:
        return None
    text = text.replace(',', '')
    match = re.search(r'([\d]+)조\s*([\d]+)?억?', text)
    if match:
        trillion = int(match.group(1))
        billion = int(match.group(2)) if match.group(2) else 0
        return trillion * 1_0000_0000_0000 + billion * 1_0000_0000
    match = re.search(r'([\d]+)억', text)
    if match:
        return int(match.group(1)) * 1_0000_0000
    numbers = re.findall(r'[\d]+', text)
    if numbers:
        return int(numbers[0])
    return None

# 네이버 금융 주요 재무 데이터 크롤링 (국내 주식)
def get_naver_main_fundamentals(ticker_or_name):
    try:
        # 종목코드 추출
        if ticker_or_name.endswith('.KS') or ticker_or_name.endswith('.KQ'):
            code = ticker_or_name[:6]
        elif ticker_or_name.isdigit() and len(ticker_or_name) == 6:
            code = ticker_or_name
        else:
            # 이름으로 코드 추출
            search_url = f"https://finance.naver.com/search/searchList.naver?query={ticker_or_name}"
            headers = {'User-Agent': 'Mozilla/5.0'}
            resp = requests.get(search_url, headers=headers)
            soup = BeautifulSoup(resp.content, 'html.parser')
            link = soup.select_one('td.tit > a')
            if link and 'code=' in link['href']:
                code = link['href'].split('code=')[1][:6]
            else:
                return None
        
        # 네이버 금융 기업 개요 페이지
        url = f"https://finance.naver.com/item/main.naver?code={code}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
            'Referer': 'https://finance.naver.com/',
            'Cache-Control': 'no-cache'
        }
        resp = requests.get(url, headers=headers, timeout=10)
        
        if resp.status_code != 200:
            return {'error': f'HTTP {resp.status_code}: 네이버 금융 접근 실패'}
        
        soup = BeautifulSoup(resp.content, 'html.parser')
        
        # 시가총액, PER, PBR 등 추출 (개선된 선택자)
        result = {}
        
        # 시가총액 추출 (여러 선택자 시도)
        market_sum_selectors = [
            'em#_market_sum',
            'td.tb_td01 em',
            'div.summary_info em',
            'span#_market_sum'
        ]
        
        for selector in market_sum_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    market_sum_text = element.get_text(strip=True)
                    # 한글 단위 파싱 적용
                    result['시가총액'] = parse_market_cap(market_sum_text)
                    break
            except:
                continue
        
        if '시가총액' not in result:
            result['시가총액'] = None
        
        # PER 추출
        per_selectors = [
            'td.per > em',
            'td.tb_td02 em',
            'span#_per'
        ]
        
        for selector in per_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    per_text = element.get_text(strip=True)
                    if per_text and per_text != '-':
                        result['PER'] = per_text
                        break
            except:
                continue
        
        if 'PER' not in result:
            result['PER'] = None
        
        # PBR 추출
        pbr_selectors = [
            'td.pbr > em',
            'td.tb_td03 em',
            'span#_pbr'
        ]
        
        for selector in pbr_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    pbr_text = element.get_text(strip=True)
                    if pbr_text and pbr_text != '-':
                        result['PBR'] = pbr_text
                        break
            except:
                continue
        
        if 'PBR' not in result:
            result['PBR'] = None
        
        # EPS 추출
        eps_selectors = [
            'td.strong > em',
            'td.tb_td04 em'
        ]
        
        for selector in eps_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    eps_text = element.get_text(strip=True)
                    if eps_text and eps_text != '-':
                        result['EPS'] = eps_text
                        break
            except:
                continue
        
        if 'EPS' not in result:
            result['EPS'] = None
        
        # BPS 추출
        bps_selectors = [
            'td.strong > em:nth-of-type(2)',
            'td.tb_td05 em'
        ]
        
        for selector in bps_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    bps_text = element.get_text(strip=True)
                    if bps_text and bps_text != '-':
                        result['BPS'] = bps_text
                        break
            except:
                continue
        
        if 'BPS' not in result:
            result['BPS'] = None
        
        # 업종 추출
        sector_selectors = [
            'em#_sector',
            'td.tb_td06 em',
            'span#_sector'
        ]
        
        for selector in sector_selectors:
            try:
                element = soup.select_one(selector)
                if element:
                    sector_text = element.get_text(strip=True)
                    if sector_text and sector_text != '-':
                        result['업종'] = sector_text
                        break
            except:
                continue
        
        if '업종' not in result:
            result['업종'] = None
        
        # 데이터 검증 - 모든 값이 None이면 크롤링 실패로 간주
        if all(v is None for v in result.values()):
            return {'error': '네이버 금융에서 데이터를 찾을 수 없습니다. (HTML 구조 변경 또는 접근 차단)'}
        
        return result
        
    except Exception as e:
        return {'error': f'네이버 금융 크롤링 오류: {str(e)}'}

# 재무 지표 계산 함수
def calculate_financial_ratios(info):
    ratios = {}
    if info and isinstance(info, dict):
        try:
            market_cap = info.get('marketCap')
            pe_ratio = info.get('trailingPE')
            pb_ratio = info.get('priceToBook')
            roe = info.get('returnOnEquity')
            roa = info.get('returnOnAssets')
            
            ratios['시가총액'] = f"{market_cap:,}" if market_cap and market_cap > 0 else "N/A"
            ratios['PER'] = f"{pe_ratio:.2f}" if pe_ratio and pe_ratio > 0 else "N/A"
            ratios['PBR'] = f"{pb_ratio:.2f}" if pb_ratio and pb_ratio > 0 else "N/A"
            ratios['ROE'] = f"{roe*100:.2f}%" if roe and roe > 0 else "N/A"
            ratios['ROA'] = f"{roa*100:.2f}%" if roa and roa > 0 else "N/A"
            ratios['현재가'] = f"{info.get('regularMarketPrice', 0):,.0f}" if info.get('regularMarketPrice') else "N/A"
        except Exception as e:
            ratios['오류'] = f"지표 계산 실패: {str(e)}"
    else:
        ratios['오류'] = "재무 정보 없음"
    
    return ratios

# LLM API 클라이언트 초기화
def init_llm_clients():
    clients = {}
    
    # OpenAI
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key:
        try:
            clients['openai'] = OpenAI(api_key=openai_key)
        except:
            pass
    
    # Anthropic
    anthropic_key = os.getenv('ANTHROPIC_API_KEY')
    if anthropic_key:
        try:
            clients['anthropic'] = anthropic.Anthropic(api_key=anthropic_key)
        except:
            pass
    
    # Perplexity
    perplexity_key = os.getenv('PERPLEXITY_API_KEY')
    if perplexity_key:
        try:
            clients['perplexity'] = OpenAI(
                api_key=perplexity_key,
                base_url="https://api.perplexity.ai"
            )
        except:
            pass
    
    return clients

# LLM 기반 기업 평가/예측 함수
def analyze_company_with_llm(company_info, financial_data, llm_client, model_name):
    try:
        # 재무 데이터 요약
        financial_summary = ""
        if financial_data and 'info' in financial_data:
            info = financial_data['info']
            financial_summary = f"""
            시가총액: {info.get('marketCap', 'N/A')}
            PER: {info.get('trailingPE', 'N/A')}
            PBR: {info.get('priceToBook', 'N/A')}
            ROE: {info.get('returnOnEquity', 'N/A')}
            ROA: {info.get('returnOnAssets', 'N/A')}
            업종: {info.get('industry', 'N/A')}
            """
        
        # 프롬프트 구성
        prompt = f"""
        다음은 {company_info['corp_input']} ({company_info['corp_type']}) 기업의 정보입니다.
        
        **기본 정보:**
        - 기업명: {company_info['corp_input']}
        - 유형: {company_info['corp_type']}
        
        **재무 정보:**
        {financial_summary}
        
        **분석 요청사항:**
        1. 현재 기업 가치 평가 (투자 관점)
        2. 향후 1-3년 미래 전망
        3. 주요 투자 리스크 요인
        4. 투자 의견 (매수/보유/매도)
        5. 투자 전략 제안
        
        **분석 기준:**
        - 재무 건전성
        - 성장성 및 수익성
        - 시장 경쟁력
        - 산업 전망
        - 거시경제 환경
        
        위 정보를 바탕으로 종합적인 투자 분석을 제공해주세요.
        """
        
        # LLM API 호출
        if model_name.startswith('gpt'):
            response = llm_client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1500,
                temperature=0.3
            )
            return response.choices[0].message.content
        elif model_name.startswith('claude'):
            response = llm_client.messages.create(
                model=model_name,
                max_tokens=2000,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            if isinstance(response.content, str):
                return response.content
            elif isinstance(response.content, list):
                return ''.join(response.content)
            else:
                return str(response.content)
        elif model_name.startswith('sonar'):
            response = llm_client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1500,
                temperature=0.3
            )
            return response.choices[0].message.content
        else:
            return "지원하지 않는 모델입니다."
            
    except Exception as e:
        return f"LLM 분석 중 오류 발생: {str(e)}"

# 포트폴리오 관리 함수들
def add_to_portfolio(company_info):
    """포트폴리오에 기업 추가"""
    if 'portfolio' not in st.session_state:
        st.session_state['portfolio'] = []
    
    # 중복 체크
    for item in st.session_state['portfolio']:
        if item['corp_input'] == company_info['corp_input']:
            return False, "이미 포트폴리오에 추가된 기업입니다."
    
    st.session_state['portfolio'].append(company_info)
    return True, "포트폴리오에 추가되었습니다."

def remove_from_portfolio(index):
    """포트폴리오에서 기업 제거"""
    if 'portfolio' in st.session_state and 0 <= index < len(st.session_state['portfolio']):
        removed = st.session_state['portfolio'].pop(index)
        return True, f"{removed['corp_input']}이(가) 포트폴리오에서 제거되었습니다."
    return False, "제거할 기업을 찾을 수 없습니다."

def get_portfolio_analysis(portfolio_companies, llm_client, model_name):
    """포트폴리오 전체 분석"""
    try:
        # 포트폴리오 정보 구성
        portfolio_summary = ""
        for i, company in enumerate(portfolio_companies, 1):
            portfolio_summary += f"{i}. {company['corp_input']} ({company['corp_type']})\n"
        
        prompt = f"""
        다음은 투자 포트폴리오에 포함된 기업들입니다:
        
        {portfolio_summary}
        
        **포트폴리오 분석 요청사항:**
        1. 포트폴리오의 전체적인 투자 성향 분석 (성장형/가치형/배당형 등)
        2. 산업별 분산도 및 리스크 분산 효과
        3. 포트폴리오의 강점과 약점
        4. 투자 비중 조정 제안
        5. 추가 투자 고려 기업 추천
        6. 포트폴리오 리스크 관리 방안
        
        **분석 기준:**
        - 산업 다양성
        - 시가총액 분포
        - 성장성 vs 안정성 균형
        - 리스크 분산 효과
        - 시장 상황 대응력
        
        위 포트폴리오에 대한 종합적인 투자 조언을 제공해주세요.
        """
        
        # LLM API 호출
        if model_name.startswith('gpt'):
            response = llm_client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2000,
                temperature=0.3
            )
            return response.choices[0].message.content
        elif model_name.startswith('claude'):
            response = llm_client.messages.create(
                model=model_name,
                max_tokens=2000,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            if isinstance(response.content, str):
                return response.content
            elif isinstance(response.content, list):
                return ''.join(response.content)
            else:
                return str(response.content)
        elif model_name.startswith('sonar'):
            response = llm_client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2000,
                temperature=0.3
            )
            return response.choices[0].message.content
        else:
            return "지원하지 않는 모델입니다."
            
    except Exception as e:
        return f"포트폴리오 분석 중 오류 발생: {str(e)}"

# 기업 간 비교 분석 함수
def compare_companies(portfolio_companies):
    """포트폴리오 내 기업들의 재무 지표 비교"""
    comparison_data = []
    
    for company in portfolio_companies:
        if company['corp_type'] == '상장기업':
            ticker = get_ticker_from_name(company['corp_input'])
            info, hist, fin, err = get_yf_info(ticker)
            naver_fund = None
            if ticker and (ticker.endswith('.KS') or ticker.endswith('.KQ')):
                naver_fund = get_naver_main_fundamentals(ticker)
            if info:
                comparison_data.append({
                    'company': company['corp_input'],
                    'market_cap': info.get('marketCap', 0),
                    'pe_ratio': info.get('trailingPE', 0),
                    'pb_ratio': info.get('priceToBook', 0),
                    'roe': info.get('returnOnEquity', 0),
                    'roa': info.get('returnOnAssets', 0),
                    'industry': info.get('industry', 'N/A'),
                    'country': info.get('country', 'N/A'),
                    'naver_fund': naver_fund
                })
            elif naver_fund:
                comparison_data.append({
                    'company': company['corp_input'],
                    'market_cap': naver_fund.get('시가총액'),
                    'pe_ratio': naver_fund.get('PER'),
                    'pb_ratio': naver_fund.get('PBR'),
                    'roe': None,
                    'roa': None,
                    'industry': naver_fund.get('업종'),
                    'country': 'KOR',
                    'naver_fund': naver_fund
                })
    
    return comparison_data

def create_comparison_charts(comparison_data):
    """기업 비교 차트 생성"""
    if not comparison_data:
        return None, None, None
    
    df = pd.DataFrame(comparison_data)
    
    # 시가총액 비교 차트
    market_cap_fig = px.bar(
        df, 
        x='company', 
        y='market_cap',
        title='시가총액 비교',
        labels={'market_cap': '시가총액', 'company': '기업명'}
    )
    
    # PER 비교 차트
    pe_fig = px.bar(
        df, 
        x='company', 
        y='pe_ratio',
        title='PER 비교',
        labels={'pe_ratio': 'PER', 'company': '기업명'}
    )
    
    # ROE 비교 차트
    roe_fig = px.bar(
        df, 
        x='company', 
        y='roe',
        title='ROE 비교',
        labels={'roe': 'ROE (%)', 'company': '기업명'}
    )
    
    return market_cap_fig, pe_fig, roe_fig

# 비상장 회사 전용 분석 함수들
def get_unlisted_company_analysis(company_name):
    """비상장 회사 전용 종합 분석"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return {'error': 'Perplexity API 키가 설정되지 않았습니다.'}
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        prompt = f"""
        {company_name} 비상장 회사에 대한 종합 분석을 제공해주세요.
        
        다음 형식으로 정확히 답변해주세요:
        
        === 기업 기본 정보 ===
        기업명: [정확한 기업명]
        설립연도: [설립연도]
        업종: [주요 사업 영역]
        주요 제품/서비스: [핵심 제품이나 서비스]
        사업 규모: [매출액, 직원수 등]
        
        === 투자 정보 ===
        투자 유치 이력: [시리즈 A, B, C 등 투자 이력]
        최근 투자 가치: [최근 투자 시 기업가치]
        주요 투자자: [주요 투자기관/투자자]
        IPO 계획: [상장 계획 여부]
        
        === 비상장 주식 거래 ===
        K-OTC 거래: [K-OTC 거래 여부]
        비상장주식중개시스템: [중개시스템 거래 여부]
        최근 거래가: [최근 거래 가격]
        거래량: [거래량 정보]
        
        === 기업 가치 평가 ===
        추정 시가총액: [추정 기업가치]
        평가 방법: [DCF, 유사기업비교 등]
        성장률: [매출/이익 성장률]
        수익성: [영업이익률, 순이익률]
        
        === 경쟁 분석 ===
        주요 경쟁사: [동종 업계 경쟁사]
        시장 점유율: [추정 시장 점유율]
        경쟁 우위: [기업의 경쟁 우위 요소]
        
        === 투자 리스크 ===
        주요 리스크: [투자 시 주요 위험 요소]
        유동성 리스크: [비상장 주식의 유동성]
        정보 비대칭: [정보 공개 수준]
        
        === 투자 의견 ===
        투자 적정성: [투자 적합도 평가]
        투자 전략: [투자 시 고려사항]
        출구 전략: [투자 회수 방안]
        
        최신 정보를 바탕으로 구체적이고 실용적인 분석을 제공해주세요.
        """
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # 응답을 구조화된 데이터로 파싱
        parsed_data = parse_perplexity_response(content)
        parsed_data['source'] = 'Perplexity API (비상장회사)'
        parsed_data['company_type'] = 'unlisted'
        
        return parsed_data
        
    except Exception as e:
        return {'error': f'비상장 회사 분석 오류: {str(e)}'}

def get_unlisted_valuation_methods(company_info):
    """비상장 회사 가치 평가 방법 제공"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return {'error': 'Perplexity API 키가 설정되지 않았습니다.'}
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        company_name = company_info.get('기업명', '')
        industry = company_info.get('업종', '')
        
        prompt = f"""
        {company_name} ({industry}) 비상장 회사의 기업가치 평가 방법을 제시해주세요.
        
        다음 형식으로 정확히 답변해주세요:
        
        === 적합한 평가 방법 ===
        1. DCF 모델: [적용 가능성 및 방법]
        2. 유사기업비교법: [비교 대상 기업들]
        3. 순자산가치법: [적용 가능성]
        4. 배수법: [적용 가능한 배수]
        
        === 평가 시 고려사항 ===
        - 업종별 특성: [해당 업종의 특성]
        - 성장 단계: [기업의 성장 단계]
        - 시장 환경: [현재 시장 상황]
        - 유동성 프리미엄: [비상장 할인율]
        
        === 구체적 계산 방법 ===
        - 매출배수: [적정 배수 범위]
        - 이익배수: [적정 배수 범위]
        - 자산배수: [적정 배수 범위]
        - 할인율: [적정 할인율]
        
        === 벤치마킹 대상 ===
        - 국내 유사기업: [상장/비상장 유사기업]
        - 해외 유사기업: [해외 유사기업]
        - 업종 평균: [업종 평균 지표]
        
        실무적으로 적용 가능한 구체적인 방법을 제시해주세요.
        """
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # 응답을 구조화된 데이터로 파싱
        parsed_data = parse_perplexity_response(content)
        parsed_data['source'] = 'Perplexity API (가치평가)'
        
        return parsed_data
        
    except Exception as e:
        return {'error': f'가치 평가 방법 분석 오류: {str(e)}'}

def get_unlisted_investment_opportunities(company_name):
    """비상장 회사 투자 기회 분석"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return {'error': 'Perplexity API 키가 설정되지 않았습니다.'}
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        prompt = f"""
        {company_name} 비상장 회사의 투자 기회를 분석해주세요.
        
        다음 형식으로 정확히 답변해주세요:
        
        === 투자 기회 분석 ===
        투자 적기: [현재 투자 적기 여부]
        투자 가치: [투자 가치 평가]
        성장 잠재력: [성장 가능성]
        시장 기회: [시장에서의 기회]
        
        === 투자 방식 ===
        직접 투자: [직접 투자 가능성]
        간접 투자: [펀드 등을 통한 투자]
        지분 매입: [지분 매입 기회]
        전략적 투자: [전략적 투자 가능성]
        
        === 투자 조건 ===
        최소 투자금액: [최소 투자 금액]
        투자 조건: [투자 시 조건]
        소요 기간: [투자 소요 기간]
        출구 전략: [투자 회수 방안]
        
        === 리스크 관리 ===
        주요 리스크: [투자 시 주요 위험]
        리스크 완화: [리스크 완화 방안]
        분산 투자: [분산 투자 전략]
        
        === 실무 가이드 ===
        투자 절차: [실제 투자 절차]
        법적 고려사항: [투자 시 법적 고려사항]
        세무 고려사항: [세무상 고려사항]
        
        실무적으로 적용 가능한 구체적인 정보를 제공해주세요.
        """
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2500,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # 응답을 구조화된 데이터로 파싱
        parsed_data = parse_perplexity_response(content)
        parsed_data['source'] = 'Perplexity API (투자기회)'
        
        return parsed_data
        
    except Exception as e:
        return {'error': f'투자 기회 분석 오류: {str(e)}'}

def get_unlisted_market_comparison(company_name, industry):
    """비상장 회사 시장 비교 분석"""
    try:
        perplexity_key = os.getenv('PERPLEXITY_API_KEY')
        if not perplexity_key:
            return {'error': 'Perplexity API 키가 설정되지 않았습니다.'}
        
        from openai import OpenAI
        client = OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
        
        prompt = f"""
        {company_name} ({industry}) 비상장 회사의 시장 내 위치와 경쟁력을 분석해주세요.
        
        다음 형식으로 정확히 답변해주세요:
        
        === 시장 위치 ===
        시장 규모: [해당 시장의 규모]
        시장 성장률: [시장 성장률]
        시장 점유율: [기업의 시장 점유율]
        시장 순위: [시장 내 순위]
        
        === 경쟁사 비교 ===
        주요 경쟁사: [주요 경쟁 기업들]
        경쟁사 규모: [경쟁사들의 규모]
        경쟁 우위: [기업의 경쟁 우위]
        경쟁 열위: [기업의 경쟁 열위]
        
        === 업종 벤치마킹 ===
        업종 평균: [업종 평균 지표]
        업종 성장률: [업종 성장률]
        업종 트렌드: [업종 주요 트렌드]
        업종 리스크: [업종 주요 리스크]
        
        === 성장성 비교 ===
        매출 성장률: [매출 성장률]
        이익 성장률: [이익 성장률]
        시장 성장률 대비: [시장 대비 성장률]
        경쟁사 대비 성장률: [경쟁사 대비 성장률]
        
        === 투자 매력도 ===
        업종 내 투자 매력도: [업종 내 투자 매력도]
        성장성 점수: [성장성 점수]
        수익성 점수: [수익성 점수]
        안정성 점수: [안정성 점수]
        
        객관적이고 구체적인 비교 분석을 제공해주세요.
        """
        
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2500,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # 응답을 구조화된 데이터로 파싱
        parsed_data = parse_perplexity_response(content)
        parsed_data['source'] = 'Perplexity API (시장비교)'
        
        return parsed_data
        
    except Exception as e:
        return {'error': f'시장 비교 분석 오류: {str(e)}'}

def create_unlisted_valuation_chart(company_info):
    """비상장 회사 가치 평가 차트 생성"""
    try:
        # 추정 시가총액 추출
        market_cap_str = company_info.get('추정 시가총액', '0')
        market_cap = parse_market_cap(market_cap_str)
        
        # 업종별 평균 배수 (예시)
        industry = company_info.get('업종', '기타')
        industry_multiples = {
            'IT/소프트웨어': {'PER': 25, 'PBR': 3.5, 'PSR': 4.0},
            '제조업': {'PER': 15, 'PBR': 1.8, 'PSR': 1.5},
            '서비스업': {'PER': 18, 'PBR': 2.2, 'PSR': 2.0},
            '바이오/헬스케어': {'PER': 30, 'PBR': 4.0, 'PSR': 5.0},
            '기타': {'PER': 20, 'PBR': 2.5, 'PSR': 2.5}
        }
        
        multiples = industry_multiples.get(industry, industry_multiples['기타'])
        
        # 가치 평가 차트
        fig = go.Figure()
        
        # 추정 시가총액
        if market_cap > 0:
            fig.add_trace(go.Bar(
                x=['추정 시가총액'],
                y=[market_cap],
                name='추정 시가총액',
                marker_color='lightblue'
            ))
        
        # 업종 평균 배수
        fig.add_trace(go.Bar(
            x=['PER', 'PBR', 'PSR'],
            y=[multiples['PER'], multiples['PBR'], multiples['PSR']],
            name='업종 평균 배수',
            marker_color='lightgreen'
        ))
        
        fig.update_layout(
            title=f'{company_info.get("기업명", "비상장회사")} 가치 평가',
            xaxis_title='평가 지표',
            yaxis_title='배수/가치',
            barmode='group'
        )
        
        return fig
        
    except Exception as e:
        return None

def analyze_unlisted_company_with_llm(company_info, llm_client, model_name):
    """비상장 회사 LLM 분석"""
    try:
        # 비상장 회사 전용 프롬프트
        prompt = f"""
        다음 비상장 회사 정보를 바탕으로 투자 분석을 수행해주세요:
        
        기업 정보:
        {company_info}
        
        다음 항목들을 포함한 종합적인 투자 분석을 제공해주세요:
        
        1. **기업 가치 평가**
           - 적정한 가치 평가 방법 제시
           - 추정 기업가치 계산
           - 업종 평균과의 비교
        
        2. **투자 매력도 분석**
           - 성장성, 수익성, 안정성 평가
           - 투자 적기 판단
           - 투자 리스크 분석
        
        3. **투자 전략 제시**
           - 적정 투자 금액
           - 투자 방식 (직접/간접)
           - 투자 기간 및 출구 전략
        
        4. **리스크 관리**
           - 주요 투자 리스크
           - 리스크 완화 방안
           - 분산 투자 전략
        
        5. **실무 가이드**
           - 실제 투자 절차
           - 법적/세무적 고려사항
           - 투자 후 모니터링 방안
        
        구체적이고 실무적으로 적용 가능한 분석을 제공해주세요.
        """
        
        response = llm_client.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"LLM 분석 오류: {str(e)}"

def get_unlisted_company_analysis_with_dart(company_name):
    """DART 정보를 포함한 비상장 회사 종합 분석"""
    try:
        # DART에서 기업 검색
        dart_result = get_dart_company_info(company_name)
        dart_companies = dart_result.get('companies', [])
        
        if not dart_companies:
            return {
                'dart_info': {
                    'dart_found': False,
                    'message': 'DART에서 해당 기업을 찾을 수 없습니다.'
                },
                'source': 'DART API'
            }
        
        # 첫 번째 기업 정보 사용
        main_company = dart_companies[0]
        company_code = main_company.get('code')
        
        # 감사 정보 조회
        audit_info = []
        if company_code:
            audit_info = get_dart_audit_info(company_code)
        
        # 감사 품질 분석
        audit_quality = analyze_dart_audit_quality(audit_info)
        
        # 재무 정보 조회
        financial_info = []
        if company_code:
            financial_info = get_dart_financial_info(company_code)
        
        # DART 링크 생성
        dart_url = f"https://dart.fss.or.kr/dsab001/main.do?rcpNo={company_code}" if company_code else None
        
        return {
            'dart_info': {
                'dart_found': True,
                'main_company': main_company,
                'audit_info': audit_info,
                'audit_quality': audit_quality,
                'financial_info': financial_info,
                'dart_url': dart_url
            },
            'source': 'DART API'
        }
        
    except Exception as e:
        return {
            'dart_info': {
                'dart_found': False,
                'error': f'DART 분석 오류: {str(e)}'
            },
            'source': 'DART API'
        }

st.set_page_config(page_title="📈 기업 평가 및 미래 예측", layout="wide")

st.title("📈 기업 평가 · 재무 정보 · LLM 미래 예측")

# 탭 구성
main_tab, fin_tab, chart_tab, market_tab, unlisted_tab, portfolio_tab, ai_tab, valuation_tab, prediction_tab = st.tabs([
    "🏢 기업 검색/선택", "💰 재무/주가 정보", "📊 차트/지표", "🔍 시장 조사", "🏭 비상장 회사 분석", "📊 투자 포트폴리오", "🤖 LLM 평가/예측", "🎯 기업 가치 평가", "🔮 주가 예측"
])

with main_tab:
    st.markdown("#### 1. 기업명/코드로 검색 (상장/비상장 구분)")
    st.info("상장/비상장 기업을 구분하여 검색할 수 있습니다. (예: 삼성전자, 카카오, 비상장 스타트업 등)")

    # 1. 상장/비상장 구분
    corp_type = st.radio("기업 유형 선택", ["상장기업", "비상장기업"], horizontal=True)

    # 2. 기업명/코드 입력
    if corp_type == "상장기업":
        corp_input = st.text_input("상장기업명 또는 티커/종목코드 입력", placeholder="예: 삼성전자, 005930.KS, 카카오, 035720.KS")
    else:
        corp_input = st.text_input("비상장기업명 입력", placeholder="예: 비상장 스타트업, 중소기업 등")
        st.info("💡 비상장 회사는 투자 유치 이력, K-OTC 거래, 투자 기회 분석 등 특별한 분석을 제공합니다.")
        st.info("📊 **DART 정보:** 한국 비상장 기업의 외부감사 정보는 전자공시시스템(DART)에서 확인할 수 있습니다.")

    # 3. 검색 방식 선택
    search_method = st.radio("검색 방식", ["기본 검색", "Perplexity API 활용"], horizontal=True, 
                            help="Perplexity API를 사용하면 더 풍부한 기업 정보를 얻을 수 있습니다.")

    # 4. 검색 버튼
    search_btn = st.button("🔍 기업 검색", type="primary")

    # 5. Perplexity API 검색 결과 표시
    if search_btn and corp_input.strip() and search_method == "Perplexity API 활용":
        with st.spinner("Perplexity API로 기업 정보를 검색하고 있습니다..."):
            perplexity_info = get_company_info_with_perplexity(corp_input.strip(), "general")
            if 'error' not in perplexity_info:
                st.success("✅ Perplexity API 검색 완료!")
                st.markdown("#### 📊 Perplexity API 검색 결과")
                # 비상장기업이면 corp_type을 강제로 "비상장기업"으로 저장
                if corp_type == "비상장기업":
                    st.session_state['selected_corp'] = {
                        'corp_type': "비상장기업",
                        'corp_input': corp_input.strip(),
                        'perplexity_info': perplexity_info
                    }
                # 상장기업이면 종목코드가 있으면 종목코드로 저장
                elif '종목코드' in perplexity_info and perplexity_info['종목코드']:
                    ticker_code = perplexity_info['종목코드']
                    st.session_state['selected_corp'] = {
                        'corp_type': corp_type,
                        'corp_input': ticker_code,
                        'perplexity_info': perplexity_info
                    }
                else:
                    st.session_state['selected_corp'] = {
                        'corp_type': corp_type,
                        'corp_input': corp_input.strip(),
                        'perplexity_info': perplexity_info
                    }
                # 검색 결과 표시
                for key, value in perplexity_info.items():
                    if key not in ['source', 'search_type']:
                        st.write(f"**{key}:** {value}")
                st.caption("💡 이 정보는 Perplexity API를 통해 실시간으로 수집되었습니다.")
            else:
                st.error(f"Perplexity API 검색 실패: {perplexity_info['error']}")
                st.info("기본 검색 방식을 사용합니다.")

    # 6. 상태 저장 및 결과 표시
    if 'selected_corp' not in st.session_state:
        st.session_state['selected_corp'] = None
    if search_btn and corp_input.strip() and search_method == "기본 검색":
        st.session_state['selected_corp'] = {
            'corp_type': corp_type,
            'corp_input': corp_input.strip()
        }

    # 7. 선택 결과 표시
    if st.session_state['selected_corp']:
        corp = st.session_state['selected_corp']
        st.success(f"선택된 기업: [{corp['corp_type']}] {corp['corp_input']}")
        
        # Perplexity 정보가 있으면 표시
        if 'perplexity_info' in corp:
            st.info("📊 Perplexity API 정보가 포함되어 있습니다.")
        
        st.caption("아래 탭에서 재무/주가 정보, 차트, AI 예측을 확인하세요.")
        
        # 비상장 회사인 경우 추가 안내
        if corp['corp_type'] == "비상장기업":
            st.info("🏭 **비상장 회사 전용 기능:** '🏭 비상장 회사 분석' 탭에서 투자 유치 이력, K-OTC 거래, 투자 기회 분석 등 특별한 분석을 제공합니다.")

# 비상장 회사 전용 분석 탭
with unlisted_tab:
    # 디버깅용 세션 상태 출력
    st.write("DEBUG: session_state['selected_corp'] =", st.session_state.get('selected_corp'))
    st.markdown("#### 🏭 비상장 회사 전용 분석")
    st.info("비상장 회사에 특화된 투자 분석, 투자 기회, 시장 비교 분석을 제공합니다.")
    st.info("📊 **DART 통합:** 한국 비상장 기업의 외부감사 정보를 전자공시시스템(DART)에서 자동으로 조회합니다.")
    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("비상장 기업을 먼저 검색/선택하세요.")
    elif corp['corp_type'] != "비상장기업":
        st.info("현재 선택된 기업은 상장기업입니다. 비상장 기업을 검색/선택하세요.")
    else:
        company_name = corp['corp_input']
        
        # 분석 옵션
        analysis_options = st.multiselect(
            "분석 항목 선택",
            ["기업 종합 분석", "DART 감사정보 분석", "투자 기회 분석", "시장 비교 분석"],
            default=["기업 종합 분석"]
        )
        
        if st.button("🔍 비상장 회사 분석 시작", type="primary"):
            with st.spinner("비상장 회사 분석을 수행하고 있습니다..."):
                
                # 1. 기업 종합 분석
                if "기업 종합 분석" in analysis_options:
                    st.markdown("### 📊 기업 종합 분석")
                    unlisted_analysis = get_unlisted_company_analysis(company_name)
                    
                    if 'error' not in unlisted_analysis:
                        # 기본 정보
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("#### 🏢 기업 기본 정보")
                            basic_info = ['기업명', '설립연도', '업종', '주요 제품/서비스', '사업 규모']
                            for info in basic_info:
                                if info in unlisted_analysis:
                                    st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        with col2:
                            st.markdown("#### 💰 투자 정보")
                            investment_info = ['투자 유치 이력', '최근 투자 가치', '주요 투자자', 'IPO 계획']
                            for info in investment_info:
                                if info in unlisted_analysis:
                                    st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 비상장 주식 거래 정보
                        st.markdown("#### 📈 비상장 주식 거래")
                        trading_info = ['K-OTC 거래', '비상장주식중개시스템', '최근 거래가', '거래량']
                        for info in trading_info:
                            if info in unlisted_analysis:
                                st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 기업 가치 평가
                        st.markdown("#### 💎 기업 가치 평가")
                        valuation_info = ['추정 시가총액', '평가 방법', '성장률', '수익성']
                        for info in valuation_info:
                            if info in unlisted_analysis:
                                st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 경쟁 분석
                        st.markdown("#### 🏆 경쟁 분석")
                        competition_info = ['주요 경쟁사', '시장 점유율', '경쟁 우위']
                        for info in competition_info:
                            if info in unlisted_analysis:
                                st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 투자 리스크
                        st.markdown("#### ⚠️ 투자 리스크")
                        risk_info = ['주요 리스크', '유동성 리스크', '정보 비대칭']
                        for info in risk_info:
                            if info in unlisted_analysis:
                                st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 투자 의견
                        st.markdown("#### 💡 투자 의견")
                        opinion_info = ['투자 적정성', '투자 전략', '출구 전략']
                        for info in opinion_info:
                            if info in unlisted_analysis:
                                st.write(f"**{info}:** {unlisted_analysis[info]}")
                        
                        # 세션에 저장
                        st.session_state['unlisted_analysis'] = unlisted_analysis
                        
                    else:
                        st.error(f"기업 종합 분석 실패: {unlisted_analysis['error']}")
                
                # 2. DART 감사정보 분석
                if "DART 감사정보 분석" in analysis_options:
                    st.markdown("### 📊 DART 감사정보 분석")
                    st.info("💡 한국 비상장 기업의 외부감사 정보는 전자공시시스템(DART)에서 확인할 수 있습니다.")
                    
                    # DART 포함 분석 실행
                    dart_analysis = get_unlisted_company_analysis_with_dart(company_name)
                    
                    if 'error' not in dart_analysis and 'dart_info' in dart_analysis:
                        dart_info = dart_analysis['dart_info']
                        
                        if dart_info.get('dart_found'):
                            st.success("✅ DART에서 기업 정보를 찾았습니다!")
                            
                            # DART 기업 정보
                            st.markdown("#### 🏢 DART 기업 정보")
                            if dart_info.get('main_company'):
                                main_company = dart_info['main_company']
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.write(f"**기업명:** {main_company.get('name', 'N/A')}")
                                    st.write(f"**기업코드:** {main_company.get('code', 'N/A')}")
                                with col2:
                                    st.write(f"**감사사:** {main_company.get('audit_firm', 'N/A')}")
                                    st.write(f"**상태:** {main_company.get('status', 'N/A')}")
                            
                            # 감사 정보
                            if dart_info.get('audit_info'):
                                st.markdown("#### 📋 감사 정보")
                                audit_info = dart_info['audit_info']
                                
                                # 감사 정보 테이블
                                audit_df = pd.DataFrame(audit_info)
                                st.dataframe(audit_df, use_container_width=True)
                                
                                # 감사 품질 분석
                                if dart_info.get('audit_quality'):
                                    audit_quality = dart_info['audit_quality']
                                    st.markdown("#### 🎯 감사 품질 분석")
                                    
                                    col1, col2, col3 = st.columns(3)
                                    with col1:
                                        st.metric("총 감사 횟수", audit_quality.get('total_audits', 0))
                                        st.metric("감사사 수", audit_quality.get('audit_firms_count', 0))
                                    with col2:
                                        st.metric("주요 감사사", audit_quality.get('main_audit_firm', 'N/A'))
                                        st.metric("최근 감사의견", audit_quality.get('recent_audit_opinion', 'N/A'))
                                    with col3:
                                        st.metric("평균 감사비", f"{audit_quality.get('avg_audit_fee', 0):,}원")
                                        st.metric("감사 품질 점수", f"{audit_quality.get('audit_quality_score', 0)}/100")
                                    
                                    # 감사 품질 점수 해석
                                    quality_score = audit_quality.get('audit_quality_score', 0)
                                    if quality_score >= 80:
                                        st.success("🟢 **우수한 감사 품질** - 신뢰할 수 있는 재무정보")
                                    elif quality_score >= 60:
                                        st.warning("🟡 **보통 감사 품질** - 일반적인 수준")
                                    else:
                                        st.error("🔴 **낮은 감사 품질** - 추가 검증 필요")
                            
                            # 재무 정보
                            if dart_info.get('financial_info'):
                                st.markdown("#### 💰 DART 재무 정보")
                                financial_info = dart_info['financial_info']
                                
                                # 재무 정보 테이블
                                financial_df = pd.DataFrame(financial_info)
                                st.dataframe(financial_df, use_container_width=True)
                                
                                # 재무 지표 차트
                                if len(financial_info) > 1:
                                    st.markdown("#### 📈 재무 추이")
                                    
                                    # 매출 추이
                                    revenue_data = []
                                    for info in financial_info:
                                        if info.get('revenue') and info['revenue'] != 'N/A':
                                            try:
                                                revenue = int(info['revenue'].replace(',', ''))
                                                revenue_data.append({
                                                    'year': info['year'],
                                                    'revenue': revenue
                                                })
                                            except:
                                                pass
                                    
                                    if revenue_data:
                                        revenue_df = pd.DataFrame(revenue_data)
                                        fig = px.line(revenue_df, x='year', y='revenue', 
                                                     title='매출 추이', labels={'revenue': '매출 (원)', 'year': '연도'})
                                        st.plotly_chart(fig, use_container_width=True)
                            
                            # DART 링크 제공
                            st.markdown("#### 🔗 DART 원본 확인")
                            if dart_info.get('main_company') and dart_info['main_company'].get('code'):
                                dart_url = f"https://dart.fss.or.kr/dsab001/main.do?rcpNo={dart_info['main_company']['code']}"
                                st.markdown(f"[📊 DART에서 상세 정보 확인하기]({dart_url})")
                        
                        else:
                            st.warning("⚠️ DART에서 해당 기업을 찾을 수 없습니다.")
                            st.info("""
                            **DART에서 찾을 수 없는 경우:**
                            - 기업명이 정확하지 않을 수 있습니다
                            - 비상장 기업이지만 DART에 등록되지 않았을 수 있습니다
                            - 기업명을 다르게 입력해보세요
                            """)
                    else:
                        st.error("DART 분석 중 오류가 발생했습니다.")
                

                
                # 4. 투자 기회 분석
                if "투자 기회 분석" in analysis_options:
                    st.markdown("### 🎯 투자 기회 분석")
                    investment_opportunities = get_unlisted_investment_opportunities(company_name)
                    
                    if 'error' not in investment_opportunities:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("#### 📊 투자 기회 분석")
                            opportunity_info = ['투자 적기', '투자 가치', '성장 잠재력', '시장 기회']
                            for info in opportunity_info:
                                if info in investment_opportunities:
                                    st.write(f"**{info}:** {investment_opportunities[info]}")
                        
                        with col2:
                            st.markdown("#### 💼 투자 방식")
                            investment_methods = ['직접 투자', '간접 투자', '지분 매입', '전략적 투자']
                            for method in investment_methods:
                                if method in investment_opportunities:
                                    st.write(f"**{method}:** {investment_opportunities[method]}")
                        
                        st.markdown("#### 💰 투자 조건")
                        investment_conditions = ['최소 투자금액', '투자 조건', '소요 기간', '출구 전략']
                        for condition in investment_conditions:
                            if condition in investment_opportunities:
                                st.write(f"**{condition}:** {investment_opportunities[condition]}")
                        
                        st.markdown("#### 🛡️ 리스크 관리")
                        risk_management = ['주요 리스크', '리스크 완화', '분산 투자']
                        for risk in risk_management:
                            if risk in investment_opportunities:
                                st.write(f"**{risk}:** {investment_opportunities[risk]}")
                        
                        st.markdown("#### 📋 실무 가이드")
                        practical_guide = ['투자 절차', '법적 고려사항', '세무 고려사항']
                        for guide in practical_guide:
                            if guide in investment_opportunities:
                                st.write(f"**{guide}:** {investment_opportunities[guide]}")
                    else:
                        st.error(f"투자 기회 분석 실패: {investment_opportunities['error']}")
                
                # 5. 시장 비교 분석
                if "시장 비교 분석" in analysis_options:
                    st.markdown("### 🌍 시장 비교 분석")
                    if 'unlisted_analysis' in st.session_state:
                        industry = st.session_state['unlisted_analysis'].get('업종', '')
                        market_comparison = get_unlisted_market_comparison(company_name, industry)
                        
                        if 'error' not in market_comparison:
                            col1, col2 = st.columns(2)
                            with col1:
                                st.markdown("#### 📍 시장 위치")
                                market_position = ['시장 규모', '시장 성장률', '시장 점유율', '시장 순위']
                                for position in market_position:
                                    if position in market_comparison:
                                        st.write(f"**{position}:** {market_comparison[position]}")
                            
                            with col2:
                                st.markdown("#### 🏆 경쟁사 비교")
                                competitor_info = ['주요 경쟁사', '경쟁사 규모', '경쟁 우위', '경쟁 열위']
                                for info in competitor_info:
                                    if info in market_comparison:
                                        st.write(f"**{info}:** {market_comparison[info]}")
                            
                            st.markdown("#### 📊 업종 벤치마킹")
                            industry_benchmark = ['업종 평균', '업종 성장률', '업종 트렌드', '업종 리스크']
                            for benchmark in industry_benchmark:
                                if benchmark in market_comparison:
                                    st.write(f"**{benchmark}:** {market_comparison[benchmark]}")
                            
                            st.markdown("#### 📈 성장성 비교")
                            growth_comparison = ['매출 성장률', '이익 성장률', '시장 성장률 대비', '경쟁사 대비 성장률']
                            for growth in growth_comparison:
                                if growth in market_comparison:
                                    st.write(f"**{growth}:** {market_comparison[growth]}")
                            
                            st.markdown("#### ⭐ 투자 매력도")
                            investment_appeal = ['업종 내 투자 매력도', '성장성 점수', '수익성 점수', '안정성 점수']
                            for appeal in investment_appeal:
                                if appeal in market_comparison:
                                    st.write(f"**{appeal}:** {market_comparison[appeal]}")
                        else:
                            st.error(f"시장 비교 분석 실패: {market_comparison['error']}")
                    else:
                        st.warning("먼저 기업 종합 분석을 수행하세요.")
                

        
        # 이전 분석 결과 표시
        if 'unlisted_analysis' in st.session_state:
            st.markdown("---")
            st.markdown("#### 📋 이전 분석 결과")
            st.info(f"**분석 대상:** {st.session_state['unlisted_analysis'].get('기업명', company_name)}")
            st.caption("위의 분석 버튼을 다시 클릭하여 최신 정보로 업데이트할 수 있습니다.")

with fin_tab:
    st.markdown("#### 2. 재무 정보 및 주가 데이터 조회")
    st.info("DART(전자공시시스템), Yahoo Finance, 네이버 금융 등에서 실시간/과거 데이터를 조회합니다.")
    st.info("🏢 한국 기업의 경우 DART의 공식 재무제표 정보를 우선적으로 사용합니다.")

    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        corp_type = corp['corp_type']
        corp_input = corp['corp_input']
        
        # Perplexity API 추가 정보 검색 옵션
        if corp_type == "상장기업":
            col1, col2 = st.columns([3, 1])
            with col1:
                st.info(f"분석 대상: {corp_input}")
            with col2:
                if st.button("🔍 Perplexity 재무정보 추가 검색", help="Perplexity API로 추가 재무 정보를 검색합니다."):
                    with st.spinner("Perplexity API로 재무 정보를 검색하고 있습니다..."):
                        financial_info = get_company_info_with_perplexity(corp_input, "financial")
                        
                        if 'error' not in financial_info:
                            st.success("✅ Perplexity 재무정보 검색 완료!")
                            st.markdown("#### 📊 Perplexity 재무정보")
                            
                            # 재무 정보를 깔끔하게 표시
                            if '현재가' in financial_info:
                                st.metric("현재가", financial_info['현재가'])
                            if '시가총액' in financial_info:
                                st.metric("시가총액", financial_info['시가총액'])
                            if 'PER' in financial_info:
                                st.metric("PER", financial_info['PER'])
                            if 'PBR' in financial_info:
                                st.metric("PBR", financial_info['PBR'])
                            
                            # 상세 정보
                            with st.expander("📋 상세 재무 정보"):
                                for key, value in financial_info.items():
                                    if key not in ['source', 'search_type']:
                                        st.write(f"**{key}:** {value}")
                        else:
                            st.error(f"Perplexity 재무정보 검색 실패: {financial_info['error']}")
        
        if corp_type == "상장기업":
            # DART 정보 먼저 확인
            st.markdown("### 🏢 DART(전자공시시스템) 정보")
            dart_result = get_dart_company_info(corp_input)
            dart_analysis = dart_result
            if dart_analysis and 'companies' in dart_analysis and dart_analysis['companies']:
                st.success("✅ DART에서 기업 정보를 찾았습니다!")
                
                # DART 기업 정보 표시
                for i, company in enumerate(dart_analysis['companies'][:3]):  # 상위 3개만 표시
                    with st.expander(f"📊 DART 기업 정보 {i+1}"):
                        st.write(f"**기업명:** {company.get('name', 'N/A')}")
                        st.write(f"**기업코드:** {company.get('code', 'N/A')}")
                        st.write(f"**종목코드:** {company.get('stock_code', 'N/A')}")
                        st.write(f"**업종:** {company.get('sector', 'N/A')}")
                        st.write(f"**대표자:** {company.get('ceo_name', 'N/A')}")
                        st.write(f"**웹사이트:** {company.get('website', 'N/A')}")
                        
                        # DART 정보 조회 버튼들
                        if company.get('code'):
                            st.markdown("**📊 DART 정보 조회:**")
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                if st.button(f"📋 공시 목록", key=f"disclosure_{i}"):
                                    with st.spinner("공시 목록을 조회하고 있습니다..."):
                                        disclosure_list = get_dart_disclosure_list(company['code'])
                                        
                                        if disclosure_list:
                                            st.success(f"✅ {len(disclosure_list)}개의 공시를 찾았습니다!")
                                            
                                            # 공시 목록을 데이터프레임으로 표시
                                            df_disclosure = pd.DataFrame(disclosure_list)
                                            
                                            # 날짜 형식 변환
                                            if 'rcept_dt' in df_disclosure.columns:
                                                df_disclosure['rcept_dt'] = pd.to_datetime(df_disclosure['rcept_dt'], format='%Y%m%d', errors='coerce')
                                                df_disclosure['rcept_dt'] = df_disclosure['rcept_dt'].dt.strftime('%Y-%m-%d')
                                            
                                            # 주요 컬럼만 표시
                                            display_columns = ['rcept_dt', 'report_nm', 'flr_nm']
                                            st.dataframe(df_disclosure[display_columns], use_container_width=True)
                                            
                                            # 전체 데이터 다운로드
                                            csv = df_disclosure.to_csv(index=False, encoding='utf-8-sig')
                                            st.download_button(
                                                label="📥 공시 목록 다운로드 (CSV)",
                                                data=csv,
                                                file_name=f"{company['name']}_공시목록.csv",
                                                mime="text/csv"
                                            )
                                        else:
                                            st.warning("해당 기업의 공시 정보를 찾을 수 없습니다.")
                            
                            with col2:
                                if st.button(f"💰 재무정보", key=f"financial_{i}"):
                                    with st.spinner("재무정보를 조회하고 있습니다..."):
                                        financial_info = get_dart_financial_info(company['code'])
                                        
                                        if financial_info:
                                            st.success(f"✅ 재무정보를 찾았습니다!")
                                            
                                            # 재무정보를 데이터프레임으로 표시
                                            df_financial = pd.DataFrame(financial_info)
                                            
                                            # 숫자 형식 변환
                                            numeric_columns = ['total_assets', 'total_liabilities', 'total_equity', 'revenue', 'operating_income', 'net_income']
                                            for col in numeric_columns:
                                                if col in df_financial.columns:
                                                    df_financial[col] = pd.to_numeric(df_financial[col], errors='coerce')
                                                    df_financial[col] = df_financial[col].apply(lambda x: f"{x:,.0f}" if pd.notna(x) else "N/A")
                                            
                                            # 주요 컬럼만 표시
                                            display_columns = ['year', 'total_assets', 'total_liabilities', 'total_equity', 'revenue', 'operating_income', 'net_income']
                                            available_columns = [col for col in display_columns if col in df_financial.columns]
                                            st.dataframe(df_financial[available_columns], use_container_width=True)
                                            
                                            # 전체 데이터 다운로드
                                            csv = df_financial.to_csv(index=False, encoding='utf-8-sig')
                                            st.download_button(
                                                label="📥 재무정보 다운로드 (CSV)",
                                                data=csv,
                                                file_name=f"{company['name']}_재무정보.csv",
                                                mime="text/csv"
                                            )
                                        else:
                                            st.warning("해당 기업의 재무정보를 찾을 수 없습니다.")
                            
                            with col3:
                                if st.button(f"📋 감사정보", key=f"audit_{i}"):
                                    with st.spinner("감사정보를 조회하고 있습니다..."):
                                        audit_info = get_dart_audit_info(company['code'])
                                        
                                        if audit_info:
                                            st.success(f"✅ 감사정보를 찾았습니다!")
                                            
                                            # 감사정보를 데이터프레임으로 표시
                                            df_audit = pd.DataFrame(audit_info)
                                            
                                            # 날짜 형식 변환
                                            if 'audit_date' in df_audit.columns:
                                                df_audit['audit_date'] = pd.to_datetime(df_audit['audit_date'], format='%Y%m%d', errors='coerce')
                                                df_audit['audit_date'] = df_audit['audit_date'].dt.strftime('%Y-%m-%d')
                                            
                                            # 주요 컬럼만 표시
                                            display_columns = ['year', 'audit_firm', 'audit_opinion', 'audit_date', 'report_name']
                                            available_columns = [col for col in display_columns if col in df_audit.columns]
                                            st.dataframe(df_audit[available_columns], use_container_width=True)
                                            
                                            # 전체 데이터 다운로드
                                            csv = df_audit.to_csv(index=False, encoding='utf-8-sig')
                                            st.download_button(
                                                label="📥 감사정보 다운로드 (CSV)",
                                                data=csv,
                                                file_name=f"{company['name']}_감사정보.csv",
                                                mime="text/csv"
                                            )
                                        else:
                                            st.warning("해당 기업의 감사정보를 찾을 수 없습니다.")
                            
                            # DART 링크
                            dart_url = f"https://dart.fss.or.kr/dsab001/main.do?rcpNo={company['code']}"
                            st.markdown(f"[📊 DART에서 상세 정보 확인하기]({dart_url})")
            else:
                st.warning("⚠️ DART에서 기업 정보를 찾을 수 없습니다.")
            
            st.markdown("---")
            st.markdown("### 📈 Yahoo Finance & 네이버 금융 정보")
            
            ticker = get_ticker_from_name(corp_input)
            # 후보 리스트인 경우 선택 UI 제공
            if isinstance(ticker, list):
                st.warning(f"'{corp_input}'로 여러 개의 상장사가 검색되었습니다. 원하는 회사를 선택하세요.")
                options = [f"{c['name']} ({c['code']}) {c['market']}" for c in ticker]
                selected = st.selectbox("회사 선택", options)
                idx = options.index(selected)
                ticker = ticker[idx]['ticker']
                st.info(f"선택된 회사: {ticker}")
            if not ticker or (isinstance(ticker, list) and not ticker):
                st.error(f"입력한 기업명 '{corp_input}'의 티커를 찾을 수 없습니다. (정확한 기업명/영문명/티커를 입력해보세요)")
            else:
                info, hist, fin, err = get_yf_info(ticker)
                # 네이버 주요 재무 데이터(국내)
                naver_fund = None
                if ticker and (ticker.endswith('.KS') or ticker.endswith('.KQ')):
                    naver_fund = get_naver_main_fundamentals(ticker)
                if err:
                    st.error(f"Yahoo Finance에서 '{corp_input}' (티커: {ticker}) 데이터를 찾을 수 없습니다.\n오류: {err}")
                    if naver_fund:
                        if isinstance(naver_fund, dict) and 'error' in naver_fund:
                            st.warning(f"네이버 금융 데이터 오류: {naver_fund['error']}")
                        else:
                            valid_data = {k: v for k, v in naver_fund.items() if v is not None and v != ''}
                            if not valid_data or (not valid_data.get('PER') and not valid_data.get('PBR')):
                                st.warning("네이버 금융에서 일부 데이터만 제공됩니다. 더 정확한 정보는 yfinance(005380.KS) 등 대체 소스를 이용해 주세요.")
                            if valid_data:
                                st.info(f"네이버 금융 주요 재무 데이터:\n{valid_data}")
                elif info:
                    st.subheader(f"📄 {info.get('longName', info.get('shortName', ticker))} ({ticker})")
                    
                    # 안전한 정보 표시
                    industry = info.get('industry', 'N/A')
                    country = info.get('country', 'N/A')
                    market_cap = info.get('marketCap')
                    pe_ratio = info.get('trailingPE')
                    pb_ratio = info.get('priceToBook')
                    year_founded = info.get('yearFounded', 'N/A')
                    employees = info.get('fullTimeEmployees', 'N/A')
                    website = info.get('website', 'N/A')
                    
                    st.write(f"**산업:** {industry} | **국가:** {country}")
                    
                    # 시가총액 안전 표시
                    market_cap_str = f"{market_cap:,}" if market_cap and market_cap > 0 else "N/A"
                    pe_str = f"{pe_ratio:.2f}" if pe_ratio and pe_ratio > 0 else "N/A"
                    pb_str = f"{pb_ratio:.2f}" if pb_ratio and pb_ratio > 0 else "N/A"
                    
                    st.write(f"**시가총액:** {market_cap_str} | **PER:** {pe_str} | **PBR:** {pb_str}")
                    st.write(f"**설립연도:** {year_founded} | **직원수:** {employees}")
                    st.write(f"**웹사이트:** {website}")
                    
                    if naver_fund:
                        if isinstance(naver_fund, dict) and 'error' in naver_fund:
                            st.warning(f"네이버 금융 데이터 오류: {naver_fund['error']}")
                        else:
                            valid_data = {k: v for k, v in naver_fund.items() if v is not None and v != ''}
                            if not valid_data or (not valid_data.get('PER') and not valid_data.get('PBR')):
                                st.warning("네이버 금융에서 일부 데이터만 제공됩니다. 더 정확한 정보는 yfinance(005380.KS) 등 대체 소스를 이용해 주세요.")
                            if valid_data:
                                st.info(f"네이버 금융 주요 재무 데이터:\n{valid_data}")
                    st.markdown("---")
                    st.markdown("##### 📈 최근 1년 주가 (Yahoo Finance)")
                    if hist is not None and not hist.empty:
                        st.line_chart(hist['Close'])
                    else:
                        st.info("주가 데이터 없음")
                    st.markdown("---")
                    st.markdown("##### 💰 주요 재무제표 (최근 연간)")
                    if fin is not None and not fin.empty:
                        st.dataframe(fin.head(10).T)
                    else:
                        st.info("재무제표 데이터 없음")
                else:
                    st.error(f"Yahoo Finance에서 '{corp_input}' (티커: {ticker}) 데이터를 찾을 수 없습니다.")
                    if naver_fund:
                        if isinstance(naver_fund, dict) and 'error' in naver_fund:
                            st.warning(f"네이버 금융 데이터 오류: {naver_fund['error']}")
                        else:
                            valid_data = {k: v for k, v in naver_fund.items() if v is not None and v != ''}
                            if not valid_data or (not valid_data.get('PER') and not valid_data.get('PBR')):
                                st.warning("네이버 금융에서 일부 데이터만 제공됩니다. 더 정확한 정보는 yfinance(005380.KS) 등 대체 소스를 이용해 주세요.")
                            if valid_data:
                                st.info(f"네이버 금융 주요 재무 데이터:\n{valid_data}")
        else:
            st.info("비상장기업은 네이버/공공데이터/수기 입력 등으로 지원 예정입니다. (현재는 기본 정보만 표시)")
            st.write(f"**기업명:** {corp_input}")

# 네이버 금융 크롤링 함수
def get_naver_finance_info(company_name):
    try:
        # 네이버 금융 검색 URL
        search_url = f"https://finance.naver.com/search/searchList.naver?query={company_name}"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        response = requests.get(search_url, headers=headers)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # 검색 결과에서 첫 번째 상장기업 정보 추출
        company_info = {}
        try:
            # 기본 정보 추출 (실제 구조에 따라 조정 필요)
            company_info['name'] = company_name
            company_info['source'] = '네이버 금융'
            return company_info
        except:
            return {'name': company_name, 'source': '네이버 금융', 'note': '상세 정보 크롤링 실패'}
    except Exception as e:
        return {'name': company_name, 'source': '네이버 금융', 'error': str(e)}

# 차트 생성 함수
def create_stock_chart(hist_data):
    if hist_data is None or hist_data.empty:
        return None
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=hist_data.index,
        y=hist_data['Close'],
        mode='lines',
        name='주가',
        line=dict(color='blue')
    ))
    fig.update_layout(
        title='주가 추이 (최근 1년)',
        xaxis_title='날짜',
        yaxis_title='주가 (원)',
        height=400
    )
    return fig

# 차트 탭
with chart_tab:
    st.markdown("#### 3. 차트 및 기술적 지표")
    st.info("주가 차트, 기술적 지표, 재무 비율 등을 시각화합니다.")

    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        corp_type = corp['corp_type']
        corp_input = corp['corp_input']
        
        if corp_type == "상장기업":
            ticker = get_ticker_from_name(corp_input)
            if isinstance(ticker, list):
                st.warning(f"'{corp_input}'로 여러 개의 상장사가 검색되었습니다. 원하는 회사를 선택하세요.")
                options = [f"{c['name']} ({c['code']}) {c['market']}" for c in ticker]
                selected = st.selectbox("회사 선택", options)
                idx = options.index(selected)
                ticker = ticker[idx]['ticker']
                st.info(f"선택된 회사: {ticker}")
            
            if ticker and not isinstance(ticker, list):
                info, hist, fin, err = get_yf_info(ticker)
                
                if hist is not None and not hist.empty:
                    st.subheader("📈 주가 차트")
                    
                    # 차트 기간 선택
                    period = st.selectbox("차트 기간", ["1개월", "3개월", "6개월", "1년", "전체"], index=3)
                    
                    # 기간에 따른 데이터 필터링
                    if period == "1개월":
                        chart_data = hist.tail(30)
                    elif period == "3개월":
                        chart_data = hist.tail(90)
                    elif period == "6개월":
                        chart_data = hist.tail(180)
                    elif period == "1년":
                        chart_data = hist
                    else:
                        chart_data = hist
                    
                    # 캔들스틱 차트
                    fig = go.Figure(data=[go.Candlestick(
                        x=chart_data.index,
                        open=chart_data['Open'],
                        high=chart_data['High'],
                        low=chart_data['Low'],
                        close=chart_data['Close']
                    )])
                    
                    fig.update_layout(
                        title=f"{corp_input} 주가 차트 ({period})",
                        xaxis_title="날짜",
                        yaxis_title="주가 (원)",
                        height=500
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # 기술적 지표
                    st.subheader("📊 기술적 지표")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        # 이동평균
                        if len(chart_data) > 20:
                            ma20 = chart_data['Close'].rolling(window=20).mean().iloc[-1]
                            st.metric("20일 이동평균", f"{ma20:,.0f}원")
                    
                    with col2:
                        # 최고가/최저가
                        high = chart_data['High'].max()
                        low = chart_data['Low'].min()
                        st.metric("기간 최고가", f"{high:,.0f}원")
                    
                    with col3:
                        # 변동성
                        volatility = ((chart_data['High'] - chart_data['Low']) / chart_data['Close']).mean() * 100
                        st.metric("평균 변동성", f"{volatility:.2f}%")
                    
                    # 거래량 차트
                    if 'Volume' in chart_data.columns:
                        st.subheader("📊 거래량")
                        volume_fig = go.Figure(data=[go.Bar(
                            x=chart_data.index,
                            y=chart_data['Volume']
                        )])
                        volume_fig.update_layout(
                            title="거래량",
                            xaxis_title="날짜",
                            yaxis_title="거래량",
                            height=300
                        )
                        st.plotly_chart(volume_fig, use_container_width=True)
                    
                else:
                    st.error("주가 데이터를 불러올 수 없습니다.")
                    
                # 재무 지표
                if info:
                    st.subheader("💰 재무 지표")
                    ratios = calculate_financial_ratios(info)
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("시가총액", ratios.get('시가총액', 'N/A'))
                        st.metric("PER", ratios.get('PER', 'N/A'))
                    with col2:
                        st.metric("PBR", ratios.get('PBR', 'N/A'))
                        st.metric("ROE", ratios.get('ROE', 'N/A'))
                    with col3:
                        st.metric("ROA", ratios.get('ROA', 'N/A'))
                        st.metric("현재가", ratios.get('현재가', 'N/A'))
        else:
            st.info("비상장기업은 차트 분석을 지원하지 않습니다.")
            st.info("🏭 **비상장 회사 분석:** '🏭 비상장 회사 분석' 탭에서 투자 기회 분석과 시장 비교 분석을 확인할 수 있습니다.")

# 시장 조사 탭
with market_tab:
    st.markdown("#### 🔍 시장 조사 및 경쟁 분석")
    st.info("Perplexity API를 활용한 종합적인 시장 분석 및 경쟁 환경 조사")

    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        corp_type = corp['corp_type']
        corp_input = corp['corp_input']
        
        st.info(f"분석 대상: {corp_input}")
        
        # 시장 조사 실행 버튼
        if st.button("🔍 시장 조사 시작", type="primary", help="Perplexity API로 시장 분석을 수행합니다."):
            with st.spinner("시장 조사 및 경쟁 분석을 수행하고 있습니다..."):
                market_info = get_company_info_with_perplexity(corp_input, "market_research")
                
                if 'error' not in market_info:
                    st.success("✅ 시장 조사 완료!")
                    st.markdown("#### 📊 시장 분석 결과")
                    
                    # 주요 지표를 메트릭으로 표시
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if '시장 규모' in market_info:
                            st.metric("시장 규모", market_info['시장 규모'])
                    with col2:
                        if '시장 성장률' in market_info:
                            st.metric("시장 성장률", market_info['시장 성장률'])
                    with col3:
                        if '시장 점유율' in market_info:
                            st.metric("시장 점유율", market_info['시장 점유율'])
                    
                    # 상세 분석 결과
                    st.markdown("#### 📋 상세 시장 분석")
                    
                    # 경쟁사 분석
                    if '주요 경쟁사' in market_info:
                        st.markdown("##### 🏆 주요 경쟁사")
                        st.write(market_info['주요 경쟁사'])
                    
                    # 경쟁 우위
                    if '경쟁 우위' in market_info:
                        st.markdown("##### 💪 경쟁 우위")
                        st.write(market_info['경쟁 우위'])
                    
                    # 시장 트렌드
                    if '시장 트렌드' in market_info:
                        st.markdown("##### 📈 시장 트렌드")
                        st.write(market_info['시장 트렌드'])
                    
                    # 성장 동력
                    if '성장 동력' in market_info:
                        st.markdown("##### 🚀 성장 동력")
                        st.write(market_info['성장 동력'])
                    
                    # 위험 요소
                    if '위험 요소' in market_info:
                        st.markdown("##### ⚠️ 위험 요소")
                        st.write(market_info['위험 요소'])
                    
                    # 전체 분석 결과
                    with st.expander("📄 전체 시장 분석 보고서"):
                        for key, value in market_info.items():
                            if key not in ['source', 'search_type']:
                                st.write(f"**{key}:** {value}")
                    
                    st.caption("💡 이 분석은 Perplexity API를 통해 실시간 시장 데이터를 기반으로 생성되었습니다.")
                    
                else:
                    st.error(f"시장 조사 실패: {market_info['error']}")
                    st.info("Perplexity API 키가 설정되지 않았거나 네트워크 오류가 발생했습니다.")
        
        # 추가 분석 옵션
        st.markdown("---")
        st.markdown("#### 🔧 추가 분석 옵션")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("📊 업종별 비교 분석", help="동일 업종 기업들과의 비교 분석"):
                st.info("업종별 비교 분석 기능은 추후 개발 예정입니다.")
        
        with col2:
            if st.button("🌍 글로벌 시장 분석", help="해외 시장과의 비교 분석"):
                st.info("글로벌 시장 분석 기능은 추후 개발 예정입니다.")
        
        # 시장 조사 팁
        st.markdown("---")
        st.markdown("#### 💡 시장 조사 팁")
        st.info("""
        - **시장 규모**: 해당 산업의 전체 시장 규모를 파악하세요
        - **성장률**: 시장의 성장 속도와 방향을 분석하세요
        - **경쟁사**: 주요 경쟁사들의 시장 점유율과 전략을 비교하세요
        - **트렌드**: 최신 기술과 소비자 선호도 변화를 파악하세요
        - **리스크**: 규제, 기술 변화, 경쟁 심화 등 위험 요소를 고려하세요
        """)

# 포트폴리오 탭
with portfolio_tab:
    st.markdown("#### 4. 투자 포트폴리오 관리")
    st.info("여러 기업을 포트폴리오에 추가하여 비교 분석하고 관리합니다.")

    # 포트폴리오 초기화
    if 'portfolio' not in st.session_state:
        st.session_state['portfolio'] = []

    corp = st.session_state.get('selected_corp')
    if corp:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.info(f"현재 선택된 기업: {corp['corp_input']} ({corp['corp_type']})")
        with col2:
            if st.button("➕ 포트폴리오에 추가"):
                success, message = add_to_portfolio(corp)
                if success:
                    st.success(message)
                else:
                    st.warning(message)

    # 포트폴리오 표시
    if st.session_state['portfolio']:
        st.subheader("📋 현재 포트폴리오")
        
        for i, company in enumerate(st.session_state['portfolio']):
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.write(f"**{i+1}. {company['corp_input']}** ({company['corp_type']})")
            with col2:
                if st.button(f"❌ 제거", key=f"remove_{i}"):
                    success, message = remove_from_portfolio(i)
                    if success:
                        st.success(message)
                        st.rerun()
            with col3:
                if st.button(f"📊 분석", key=f"analyze_{i}"):
                    st.info(f"{company['corp_input']} 상세 분석 기능은 추후 개발 예정입니다.")

        # 포트폴리오 분석
        if len(st.session_state['portfolio']) > 1:
            st.markdown("---")
            st.subheader("📊 포트폴리오 분석")
            
            # 비교 차트
            comparison_data = compare_companies(st.session_state['portfolio'])
            if comparison_data:
                market_cap_fig, pe_fig, roe_fig = create_comparison_charts(comparison_data)
                
                if market_cap_fig:
                    st.plotly_chart(market_cap_fig, use_container_width=True)
                if pe_fig:
                    st.plotly_chart(pe_fig, use_container_width=True)
                if roe_fig:
                    st.plotly_chart(roe_fig, use_container_width=True)
            
            # LLM 포트폴리오 분석
            if st.button("🤖 AI 포트폴리오 분석"):
                with st.spinner("AI가 포트폴리오를 분석하고 있습니다..."):
                    llm_clients = init_llm_clients()
                    if llm_clients:
                        # 첫 번째 사용 가능한 클라이언트 사용
                        client_name = list(llm_clients.keys())[0]
                        client = llm_clients[client_name]
                        
                        if client_name == 'openai':
                            model = 'gpt-4o-mini'
                        elif client_name == 'anthropic':
                            model = 'claude-3-5-sonnet-20241022'
                        elif client_name == 'perplexity':
                            model = 'sonar-pro'
                        else:
                            model = 'gpt-4o-mini'
                        
                        analysis = get_portfolio_analysis(st.session_state['portfolio'], client, model)
                        st.markdown("#### 🤖 AI 포트폴리오 분석 결과")
                        st.write(analysis)
                    else:
                        st.error("LLM API 클라이언트를 초기화할 수 없습니다.")
    else:
        st.info("포트폴리오가 비어있습니다. 기업을 검색하고 포트폴리오에 추가해보세요.")

# AI 평가/예측 탭
with ai_tab:
    st.markdown("#### 5. LLM 기반 기업 평가 및 미래 예측")
    st.info("OpenAI, Anthropic, Perplexity API를 활용한 AI 기반 투자 분석")

    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        corp_type = corp['corp_type']
        corp_input = corp['corp_input']
        
        st.info(f"분석 대상: {corp_input} ({corp_type})")
        
        # LLM 클라이언트 초기화
        llm_clients = init_llm_clients()
        
        if not llm_clients:
            st.error("LLM API 키가 설정되지 않았습니다. OpenAI, Anthropic, Perplexity API 키를 설정해주세요.")
        else:
            # 사용 가능한 모델 선택
            available_models = []
            if 'openai' in llm_clients:
                available_models.append("GPT-4o-mini (OpenAI)")
            if 'anthropic' in llm_clients:
                available_models.append("Claude-3.5-Sonnet (Anthropic)")
            if 'perplexity' in llm_clients:
                available_models.append("Sonar-Pro (Perplexity)")
            
            selected_model = st.selectbox("분석 모델 선택", available_models)
            
            # 모델별 클라이언트와 모델명 매핑
            model_mapping = {
                "GPT-4o-mini (OpenAI)": ("openai", "gpt-4o-mini"),
                "Claude-3.5-Sonnet (Anthropic)": ("anthropic", "claude-3-5-sonnet-20241022"),
                "Sonar-Pro (Perplexity)": ("perplexity", "sonar-pro")
            }
            
            client_name, model_name = model_mapping[selected_model]
            client = llm_clients[client_name]
            
            # 재무 데이터 수집
            financial_data = {}
            if corp_type == "상장기업":
                ticker = get_ticker_from_name(corp_input)
                if ticker and not isinstance(ticker, list):
                    info, hist, fin, err = get_yf_info(ticker)
                    financial_data = {
                        'info': info,
                        'hist': hist,
                        'fin': fin,
                        'error': err
                    }
            
            # AI 분석 실행
            if st.button("🤖 AI 분석 시작", type="primary"):
                with st.spinner(f"{selected_model}로 기업을 분석하고 있습니다..."):
                    
                    # 비상장 회사인 경우 전용 분석 사용
                    if corp_type == "비상장기업":
                        if 'unlisted_analysis' in st.session_state:
                            analysis_result = analyze_unlisted_company_with_llm(
                                st.session_state['unlisted_analysis'], client, model_name
                            )
                        else:
                            # 비상장 회사 정보가 없으면 기본 분석
                            analysis_result = analyze_company_with_llm(corp, financial_data, client, model_name)
                    else:
                        # 상장 회사는 기존 분석 사용
                        analysis_result = analyze_company_with_llm(corp, financial_data, client, model_name)
                    
                    st.markdown("#### 🤖 AI 분석 결과")
                    st.write(analysis_result)
                    
                    # 분석 결과를 세션에 저장
                    st.session_state['ai_analysis'] = {
                        'company': corp_input,
                        'model': selected_model,
                        'result': analysis_result,
                        'timestamp': pd.Timestamp.now()
                    }
            
            # 이전 분석 결과 표시
            if 'ai_analysis' in st.session_state:
                st.markdown("---")
                st.markdown("#### 📋 이전 분석 결과")
                analysis = st.session_state['ai_analysis']
                st.write(f"**기업:** {analysis['company']}")
                st.write(f"**모델:** {analysis['model']}")
                st.write(f"**분석 시간:** {analysis['timestamp']}")
                st.write("**분석 결과:**")
                st.write(analysis['result'])
        
        # 추가 분석 옵션
        st.markdown("---")
        st.markdown("#### 🔧 추가 분석 옵션")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("📈 시나리오 분석", help="다양한 시나리오 하에서의 기업 가치 분석", key="scenario_analysis_btn_ai"):
                st.success("아래 '🎯 시나리오 분석 및 투자전략 생성' 섹션을 이용하세요!")
        
        with col2:
            if st.button("🎯 투자 전략 생성", help="AI 기반 개인화된 투자 전략 생성", key="investment_strategy_btn_ai"):
                st.success("아래 '🎯 시나리오 분석 및 투자전략 생성' 섹션을 이용하세요!")

# DART(전자공시시스템) 관련 함수들
def get_dart_company_info(company_name):
    """DART에서 기업 정보 조회 (dart-fss 사용)"""
    try:
        # dart-fss를 사용한 기업 검색
        companies = dart_fss.search(company_name)
        
        if companies:
            # 검색 결과를 리스트로 변환
            company_list = []
            for corp in companies:
                company_info = {
                    'name': corp.name,
                    'code': corp.corp_code,
                    'stock_code': corp.stock_code if hasattr(corp, 'stock_code') else None,
                    'sector': corp.sector if hasattr(corp, 'sector') else None,
                    'product': corp.product if hasattr(corp, 'product') else None,
                    'listing_date': corp.listing_date if hasattr(corp, 'listing_date') else None,
                    'settlement_date': corp.settlement_date if hasattr(corp, 'settlement_date') else None,
                    'ceo_name': corp.ceo_name if hasattr(corp, 'ceo_name') else None,
                    'website': corp.website if hasattr(corp, 'website') else None,
                    'phone': corp.phone if hasattr(corp, 'phone') else None,
                    'address': corp.address if hasattr(corp, 'address') else None
                }
                company_list.append(company_info)
            
            return {'companies': company_list}
        else:
            return {'companies': []}
            
    except Exception as e:
        print(f'DART 검색 오류: {str(e)}')
        return {'companies': []}

def get_dart_audit_info(company_code):
    """DART에서 특정 기업의 감사 정보 조회 (dart-fss 사용)"""
    try:
        # dart-fss를 사용한 기업 정보 조회
        corp = dart_fss.get_corp_info(company_code)
        
        if corp:
            # 감사 정보 조회 (최근 5년)
            audit_info = []
            
            try:
                # 감사보고서 조회
                audit_reports = dart_fss.api.filings.search_filings(
                    corp_code=company_code,
                    bgn_de='20200101',
                    end_de='20241231',
                    pblntf_ty='A001'  # 감사보고서
                )
                
                if audit_reports and 'list' in audit_reports:
                    for report in audit_reports['list']:
                        audit_info.append({
                            'year': report.get('rcept_dt', '')[:4],  # 연도 추출
                            'audit_firm': report.get('flr_nm', ''),  # 감사사
                            'audit_opinion': '적정의견',  # 기본값 (실제로는 보고서 내용 분석 필요)
                            'audit_date': report.get('rcept_dt', ''),
                            'audit_fee': 'N/A',  # 감사비는 별도 조회 필요
                            'report_name': report.get('report_nm', ''),
                            'rcept_no': report.get('rcept_no', '')
                        })
                
            except Exception as e:
                print(f'감사보고서 조회 오류: {str(e)}')
            
            return audit_info
        else:
            return []
            
    except Exception as e:
        print(f'DART 감사정보 조회 오류: {str(e)}')
        return []

def get_dart_financial_info(company_code):
    """DART에서 재무정보 조회 (dart-fss 사용)"""
    try:
        # dart-fss를 사용한 기업 정보 조회
        corp = dart_fss.get_corp_info(company_code)
        
        if corp:
            # 재무제표 조회 (최근 3년)
            financial_info = []
            
            try:
                # 사업보고서 (연간) - Fallback 구조
                fs = None
                error_msg = ""
                
                try:
                    fs = corp.extract_fs(bgn_de='20220101', end_de='20241231', report_tp='annual')
                except Exception as e1:
                    error_msg += f"연간 실패: {e1}\n"
                    try:
                        fs = corp.extract_fs(bgn_de='20220101', end_de='20241231', report_tp='half')
                    except Exception as e2:
                        error_msg += f"반기 실패: {e2}\n"
                        try:
                            fs = corp.extract_fs(bgn_de='20220101', end_de='20241231', report_tp='quarter')
                        except Exception as e3:
                            error_msg += f"분기 실패: {e3}\n"
                
                if fs:
                    # 재무제표 데이터 추출
                    for year in fs.keys():
                        if 'BS' in fs[year]:  # 재무상태표
                            bs = fs[year]['BS']
                            if not bs.empty:
                                # 주요 재무 지표 추출
                                try:
                                    total_assets = bs.loc['자산총계'].iloc[0] if '자산총계' in bs.index else 0
                                    total_liabilities = bs.loc['부채총계'].iloc[0] if '부채총계' in bs.index else 0
                                    total_equity = bs.loc['자본총계'].iloc[0] if '자본총계' in bs.index else 0
                                    
                                    financial_info.append({
                                        'year': year,
                                        'total_assets': total_assets,
                                        'total_liabilities': total_liabilities,
                                        'total_equity': total_equity,
                                        'debt_ratio': (total_liabilities / total_assets * 100) if total_assets > 0 else 0
                                    })
                                except:
                                    pass
                        
                        if 'PL' in fs[year]:  # 손익계산서
                            pl = fs[year]['PL']
                            if not pl.empty:
                                try:
                                    revenue = pl.loc['매출액'].iloc[0] if '매출액' in pl.index else 0
                                    operating_income = pl.loc['영업이익'].iloc[0] if '영업이익' in pl.index else 0
                                    net_income = pl.loc['당기순이익'].iloc[0] if '당기순이익' in pl.index else 0
                                    
                                    # 기존 정보에 추가
                                    for info in financial_info:
                                        if info['year'] == year:
                                            info.update({
                                                'revenue': revenue,
                                                'operating_income': operating_income,
                                                'net_income': net_income,
                                                'operating_margin': (operating_income / revenue * 100) if revenue > 0 else 0,
                                                'net_margin': (net_income / revenue * 100) if revenue > 0 else 0
                                            })
                                            break
                                except:
                                    pass
                
            except Exception as e:
                print(f'재무제표 조회 오류: {str(e)}')
            
            return financial_info
        else:
            return []
            
    except Exception as e:
        print(f'DART 재무정보 조회 오류: {str(e)}')
        return []

def get_dart_disclosure_list(company_code, start_date='20220101', end_date='20241231'):
    """DART에서 공시 목록 조회 (dart-fss 사용)"""
    try:
        # dart-fss를 사용한 공시 목록 조회
        corp = dart_fss.get_corp_info(company_code)
        
        if corp:
            # 공시 목록 조회
            disclosures = dart_fss.api.filings.search_filings(
                corp_code=company_code,
                bgn_de=start_date,
                end_de=end_date
            )
            
            if disclosures and 'list' in disclosures:
                disclosure_list = []
                for disclosure in disclosures['list']:
                    disclosure_info = {
                        'rcept_no': disclosure.get('rcept_no', ''),
                        'corp_name': disclosure.get('corp_name', ''),
                        'stock_code': disclosure.get('stock_code', ''),
                        'corp_code': disclosure.get('corp_code', ''),
                        'rcept_dt': disclosure.get('rcept_dt', ''),
                        'rcept_url': disclosure.get('rcept_url', ''),
                        'report_nm': disclosure.get('report_nm', ''),
                        'flr_nm': disclosure.get('flr_nm', ''),
                        'rm': disclosure.get('rm', '')
                    }
                    disclosure_list.append(disclosure_info)
                
                return disclosure_list
            else:
                return []
        else:
            return []
            
    except Exception as e:
        print(f'DART 공시 목록 조회 오류: {str(e)}')
        return []

def analyze_dart_audit_quality(audit_info):
    """감사 품질 분석"""
    try:
        if not audit_info:
            return {'error': '감사 정보가 없습니다.'}
        
        # 감사의견 분석
        audit_opinions = [info['audit_opinion'] for info in audit_info if 'audit_opinion' in info]
        
        # 감사사 분석
        audit_firms = [info['audit_firm'] for info in audit_info if 'audit_firm' in info]
        
        # 감사비 분석
        audit_fees = []
        for info in audit_info:
            if 'audit_fee' in info and info['audit_fee']:
                try:
                    fee = int(info['audit_fee'].replace(',', ''))
                    audit_fees.append(fee)
                except:
                    pass
        
        analysis = {
            'total_audits': len(audit_info),
            'audit_firms_count': len(set(audit_firms)),
            'main_audit_firm': max(set(audit_firms), key=audit_firms.count) if audit_firms else 'N/A',
            'recent_audit_opinion': audit_opinions[0] if audit_opinions else 'N/A',
            'avg_audit_fee': sum(audit_fees) / len(audit_fees) if audit_fees else 0,
            'audit_quality_score': calculate_audit_quality_score(audit_info)
        }
        
        return analysis
        
    except Exception as e:
        return {'error': f'감사 품질 분석 오류: {str(e)}'}

def calculate_audit_quality_score(audit_info):
    """감사 품질 점수 계산"""
    try:
        score = 0
        
        # 감사사의견 기반 점수
        for info in audit_info:
            opinion = info.get('audit_opinion', '').lower()
            if '적정' in opinion or 'unqualified' in opinion:
                score += 10
            elif '한정' in opinion or 'qualified' in opinion:
                score += 5
            elif '부적정' in opinion or 'adverse' in opinion:
                score += 0
            elif '의견거절' in opinion or 'disclaimer' in opinion:
                score += 0
        
        # 감사사 규모 기반 점수 (Big4 등)
        big4_firms = ['삼일회계법인', '한영회계법인', '안진회계법인', '한국회계법인', 
                      'Deloitte', 'PwC', 'EY', 'KPMG']
        
        for info in audit_info:
            firm = info.get('audit_firm', '')
            if any(big4 in firm for big4 in big4_firms):
                score += 5
        
        # 감사비 적정성 점수
        audit_fees = []
        for info in audit_info:
            if 'audit_fee' in info and info['audit_fee']:
                try:
                    fee = int(info['audit_fee'].replace(',', ''))
                    audit_fees.append(fee)
                except:
                    pass
        
        if audit_fees:
            avg_fee = sum(audit_fees) / len(audit_fees)
            if avg_fee > 10000000:  # 1천만원 이상
                score += 3
            elif avg_fee > 5000000:  # 5백만원 이상
                score += 2
            else:
                score += 1
        
        return min(score, 100)  # 최대 100점
        
    except Exception as e:
        return 0

# 기업 가치 평가 툴 함수들
def calculate_net_asset_value(assets, liabilities, intangible_assets=0):
    """순자산가치법 (Net Asset Value) 계산"""
    try:
        nav = assets - liabilities + intangible_assets
        return {
            'method': '순자산가치법 (NAV)',
            'total_assets': assets,
            'total_liabilities': liabilities,
            'intangible_assets': intangible_assets,
            'net_asset_value': nav,
            'description': '기업의 자산에서 부채를 차감하여 순자산 가치를 계산'
        }
    except Exception as e:
        return {'error': f'NAV 계산 오류: {str(e)}'}

def calculate_liquidation_value(assets, liabilities, liquidation_discount=0.3):
    """청산가치법 (Liquidation Value) 계산"""
    try:
        # 청산 시 자산 가치 할인 (일반적으로 30% 할인)
        discounted_assets = assets * (1 - liquidation_discount)
        liquidation_value = discounted_assets - liabilities
        
        return {
            'method': '청산가치법',
            'total_assets': assets,
            'liquidation_discount': liquidation_discount * 100,
            'discounted_assets': discounted_assets,
            'total_liabilities': liabilities,
            'liquidation_value': liquidation_value,
            'description': '기업이 파산하여 자산을 처분할 때 얻을 수 있는 가치'
        }
    except Exception as e:
        return {'error': f'청산가치 계산 오류: {str(e)}'}

def calculate_dcf_value(free_cash_flows, growth_rate, discount_rate, terminal_growth_rate=0.02):
    """현금흐름할인법 (DCF) 계산"""
    try:
        # 초기 성장 기간 (5년)
        forecast_period = 5
        present_values = []
        
        # 예측 기간 현금흐름 할인
        for i in range(forecast_period):
            if i == 0:
                fcf = free_cash_flows
            else:
                fcf = free_cash_flows * ((1 + growth_rate) ** i)
            
            pv = fcf / ((1 + discount_rate) ** (i + 1))
            present_values.append(pv)
        
        # 잔존가치 계산 (Gordon Growth Model)
        terminal_fcf = free_cash_flows * ((1 + growth_rate) ** forecast_period)
        terminal_value = terminal_fcf * (1 + terminal_growth_rate) / (discount_rate - terminal_growth_rate)
        terminal_pv = terminal_value / ((1 + discount_rate) ** forecast_period)
        
        # 기업가치 계산
        enterprise_value = sum(present_values) + terminal_pv
        
        return {
            'method': '현금흐름할인법 (DCF)',
            'free_cash_flows': free_cash_flows,
            'growth_rate': growth_rate * 100,
            'discount_rate': discount_rate * 100,
            'terminal_growth_rate': terminal_growth_rate * 100,
            'forecast_period': forecast_period,
            'present_values': present_values,
            'terminal_value': terminal_value,
            'enterprise_value': enterprise_value,
            'description': '미래 현금 흐름을 현재 가치로 할인하여 기업 가치 산정'
        }
    except Exception as e:
        return {'error': f'DCF 계산 오류: {str(e)}'}

def calculate_fcfe_value(fcfe, growth_rate, cost_of_equity, terminal_growth_rate=0.02):
    """주주현금흐름할인법 (FCFE) 계산"""
    try:
        # 초기 성장 기간 (5년)
        forecast_period = 5
        present_values = []
        
        # 예측 기간 FCFE 할인
        for i in range(forecast_period):
            if i == 0:
                current_fcfe = fcfe
            else:
                current_fcfe = fcfe * ((1 + growth_rate) ** i)
            
            pv = current_fcfe / ((1 + cost_of_equity) ** (i + 1))
            present_values.append(pv)
        
        # 잔존가치 계산
        terminal_fcfe = fcfe * ((1 + growth_rate) ** forecast_period)
        terminal_value = terminal_fcfe * (1 + terminal_growth_rate) / (cost_of_equity - terminal_growth_rate)
        terminal_pv = terminal_value / ((1 + cost_of_equity) ** forecast_period)
        
        # 주주가치 계산
        equity_value = sum(present_values) + terminal_pv
        
        return {
            'method': '주주현금흐름할인법 (FCFE)',
            'fcfe': fcfe,
            'growth_rate': growth_rate * 100,
            'cost_of_equity': cost_of_equity * 100,
            'terminal_growth_rate': terminal_growth_rate * 100,
            'forecast_period': forecast_period,
            'present_values': present_values,
            'terminal_value': terminal_value,
            'equity_value': equity_value,
            'description': '주주에게 귀속되는 현금 흐름을 현재 가치로 할인'
        }
    except Exception as e:
        return {'error': f'FCFE 계산 오류: {str(e)}'}

def calculate_ddm_value(dividend, growth_rate, required_return):
    """배당할인법 (DDM) 계산"""
    try:
        # Gordon Growth Model
        if growth_rate < required_return:
            stock_value = dividend * (1 + growth_rate) / (required_return - growth_rate)
        else:
            stock_value = 0  # 성장률이 요구수익률보다 높으면 계산 불가
        
        return {
            'method': '배당할인법 (DDM)',
            'dividend': dividend,
            'growth_rate': growth_rate * 100,
            'required_return': required_return * 100,
            'stock_value': stock_value,
            'description': '미래 배당금의 현재 가치를 계산하여 기업 가치 평가'
        }
    except Exception as e:
        return {'error': f'DDM 계산 오류: {str(e)}'}

def calculate_rim_value(book_value, roe, cost_of_equity, growth_rate=0.02):
    """초과이익모형 (RIM) 계산"""
    try:
        # 초과이익 계산
        residual_income = book_value * (roe - cost_of_equity)
        
        # 초과이익의 현재가치
        pv_residual_income = residual_income / (cost_of_equity - growth_rate)
        
        # 주주가치 = 장부가치 + 초과이익의 현재가치
        equity_value = book_value + pv_residual_income
        
        return {
            'method': '초과이익모형 (RIM)',
            'book_value': book_value,
            'roe': roe * 100,
            'cost_of_equity': cost_of_equity * 100,
            'growth_rate': growth_rate * 100,
            'residual_income': residual_income,
            'pv_residual_income': pv_residual_income,
            'equity_value': equity_value,
            'description': '기업의 초과이익을 현재 가치로 할인하여 기업 가치 평가'
        }
    except Exception as e:
        return {'error': f'RIM 계산 오류: {str(e)}'}

def calculate_comparable_company_analysis(target_company, comparable_companies):
    """비교 기업 분석 (CCA) 계산"""
    try:
        # 비교 기업들의 평균 배수 계산
        avg_per = sum(comp['per'] for comp in comparable_companies) / len(comparable_companies)
        avg_pbr = sum(comp['pbr'] for comp in comparable_companies) / len(comparable_companies)
        avg_psr = sum(comp['psr'] for comp in comparable_companies) / len(comparable_companies)
        avg_ev_ebitda = sum(comp['ev_ebitda'] for comp in comparable_companies) / len(comparable_companies)
        
        # 대상 기업의 재무 지표
        target_eps = target_company.get('eps', 0)
        target_bps = target_company.get('bps', 0)
        target_sps = target_company.get('sps', 0)
        target_ebitda = target_company.get('ebitda', 0)
        
        # 배수 기반 가치 평가
        per_value = target_eps * avg_per if target_eps > 0 else 0
        pbr_value = target_bps * avg_pbr if target_bps > 0 else 0
        psr_value = target_sps * avg_psr if target_sps > 0 else 0
        ev_ebitda_value = target_ebitda * avg_ev_ebitda if target_ebitda > 0 else 0
        
        return {
            'method': '비교 기업 분석 (CCA)',
            'comparable_companies_count': len(comparable_companies),
            'avg_per': avg_per,
            'avg_pbr': avg_pbr,
            'avg_psr': avg_psr,
            'avg_ev_ebitda': avg_ev_ebitda,
            'per_value': per_value,
            'pbr_value': pbr_value,
            'psr_value': psr_value,
            'ev_ebitda_value': ev_ebitda_value,
            'description': '유사한 사업을 영위하는 상장 기업의 재무 지표를 비교하여 평가'
        }
    except Exception as e:
        return {'error': f'CCA 계산 오류: {str(e)}'}

def calculate_precedent_transaction_analysis(target_company, precedent_transactions):
    """거래 사례 비교법 (PTA) 계산"""
    try:
        # 과거 거래 사례들의 평균 배수 계산
        avg_per = sum(tx['per'] for tx in precedent_transactions) / len(precedent_transactions)
        avg_pbr = sum(tx['pbr'] for tx in precedent_transactions) / len(precedent_transactions)
        avg_psr = sum(tx['psr'] for tx in precedent_transactions) / len(precedent_transactions)
        avg_ev_ebitda = sum(tx['ev_ebitda'] for tx in precedent_transactions) / len(precedent_transactions)
        
        # 대상 기업의 재무 지표
        target_eps = target_company.get('eps', 0)
        target_bps = target_company.get('bps', 0)
        target_sps = target_company.get('sps', 0)
        target_ebitda = target_company.get('ebitda', 0)
        
        # 거래 프리미엄 적용 (일반적으로 20-30%)
        premium = 0.25
        
        # 배수 기반 가치 평가 (프리미엄 적용)
        per_value = target_eps * avg_per * (1 + premium) if target_eps > 0 else 0
        pbr_value = target_bps * avg_pbr * (1 + premium) if target_bps > 0 else 0
        psr_value = target_sps * avg_psr * (1 + premium) if target_sps > 0 else 0
        ev_ebitda_value = target_ebitda * avg_ev_ebitda * (1 + premium) if target_ebitda > 0 else 0
        
        return {
            'method': '거래 사례 비교법 (PTA)',
            'precedent_transactions_count': len(precedent_transactions),
            'premium': premium * 100,
            'avg_per': avg_per,
            'avg_pbr': avg_pbr,
            'avg_psr': avg_psr,
            'avg_ev_ebitda': avg_ev_ebitda,
            'per_value': per_value,
            'pbr_value': pbr_value,
            'psr_value': psr_value,
            'ev_ebitda_value': ev_ebitda_value,
            'description': '과거 유사한 기업의 인수 합병 거래 사례를 분석하여 평가'
        }
    except Exception as e:
        return {'error': f'PTA 계산 오류: {str(e)}'}

def calculate_valuation_ratios(price, eps, bps, sps, ebitda, enterprise_value):
    """주요 배수 지표 계산"""
    try:
        ratios = {}
        
        # PER (Price-to-Earnings Ratio)
        if eps and eps > 0:
            ratios['PER'] = price / eps
        else:
            ratios['PER'] = None
        
        # PBR (Price-to-Book Ratio)
        if bps and bps > 0:
            ratios['PBR'] = price / bps
        else:
            ratios['PBR'] = None
        
        # PSR (Price-to-Sales Ratio)
        if sps and sps > 0:
            ratios['PSR'] = price / sps
        else:
            ratios['PSR'] = None
        
        # EV/EBITDA
        if ebitda and ebitda > 0:
            ratios['EV/EBITDA'] = enterprise_value / ebitda
        else:
            ratios['EV/EBITDA'] = None
        
        return ratios
        
    except Exception as e:
        return {'error': f'배수 계산 오류: {str(e)}'}

def get_industry_averages(industry):
    """업종별 평균 배수 제공"""
    industry_averages = {
        'IT/소프트웨어': {
            'PER': 25.0, 'PBR': 3.5, 'PSR': 4.0, 'EV/EBITDA': 15.0
        },
        '제조업': {
            'PER': 15.0, 'PBR': 1.8, 'PSR': 1.5, 'EV/EBITDA': 10.0
        },
        '서비스업': {
            'PER': 18.0, 'PBR': 2.2, 'PSR': 2.0, 'EV/EBITDA': 12.0
        },
        '바이오/헬스케어': {
            'PER': 30.0, 'PBR': 4.0, 'PSR': 5.0, 'EV/EBITDA': 20.0
        },
        '금융업': {
            'PER': 12.0, 'PBR': 1.2, 'PSR': 2.5, 'EV/EBITDA': 8.0
        },
        '소비재': {
            'PER': 20.0, 'PBR': 2.5, 'PSR': 2.5, 'EV/EBITDA': 14.0
        },
        '에너지': {
            'PER': 10.0, 'PBR': 1.0, 'PSR': 1.0, 'EV/EBITDA': 6.0
        },
        '기타': {
            'PER': 18.0, 'PBR': 2.0, 'PSR': 2.0, 'EV/EBITDA': 12.0
        }
    }
    
    return industry_averages.get(industry, industry_averages['기타'])

def create_valuation_summary(valuation_results):
    """가치 평가 결과 요약"""
    try:
        summary = {
            'methods_used': [],
            'values': [],
            'recommendation': '',
            'confidence_level': 0
        }
        
        for result in valuation_results:
            if 'error' not in result:
                summary['methods_used'].append(result['method'])
                
                # 각 방법별 가치 추출
                if 'net_asset_value' in result:
                    summary['values'].append(result['net_asset_value'])
                elif 'liquidation_value' in result:
                    summary['values'].append(result['liquidation_value'])
                elif 'enterprise_value' in result:
                    summary['values'].append(result['enterprise_value'])
                elif 'equity_value' in result:
                    summary['values'].append(result['equity_value'])
                elif 'stock_value' in result:
                    summary['values'].append(result['stock_value'])
                elif 'per_value' in result:
                    summary['values'].append(result['per_value'])
        
        if summary['values']:
            avg_value = sum(summary['values']) / len(summary['values'])
            min_value = min(summary['values'])
            max_value = max(summary['values'])
            
            # 신뢰도 계산 (값들의 분산에 따라)
            variance = sum((v - avg_value) ** 2 for v in summary['values']) / len(summary['values'])
            confidence = max(0, 100 - (variance / avg_value) * 100) if avg_value > 0 else 0
            
            summary['average_value'] = avg_value
            summary['min_value'] = min_value
            summary['max_value'] = max_value
            summary['confidence_level'] = confidence
            
            # 투자 권고
            if confidence >= 80:
                summary['recommendation'] = '🟢 높은 신뢰도 - 투자 적합'
            elif confidence >= 60:
                summary['recommendation'] = '🟡 보통 신뢰도 - 신중한 투자'
            else:
                summary['recommendation'] = '🔴 낮은 신뢰도 - 추가 분석 필요'
        
        return summary
        
    except Exception as e:
        return {'error': f'요약 생성 오류: {str(e)}'}

def create_valuation_chart(valuation_results):
    """가치 평가 결과 차트 생성"""
    try:
        methods = []
        values = []
        
        for result in valuation_results:
            if 'error' not in result:
                methods.append(result['method'])
                
                # 각 방법별 가치 추출
                if 'net_asset_value' in result:
                    values.append(result['net_asset_value'])
                elif 'liquidation_value' in result:
                    values.append(result['liquidation_value'])
                elif 'enterprise_value' in result:
                    values.append(result['enterprise_value'])
                elif 'equity_value' in result:
                    values.append(result['equity_value'])
                elif 'stock_value' in result:
                    values.append(result['stock_value'])
                elif 'per_value' in result:
                    values.append(result['per_value'])
                else:
                    values.append(0)
        
        if methods and values:
            fig = go.Figure(data=[
                go.Bar(
                    x=methods,
                    y=values,
                    marker_color='lightblue',
                    text=[f'{v:,.0f}' for v in values],
                    textposition='auto'
                )
            ])
            
            fig.update_layout(
                title='기업 가치 평가 결과 비교',
                xaxis_title='평가 방법',
                yaxis_title='기업 가치 (원)',
                height=500
            )
            
            return fig
        
        return None
        
    except Exception as e:
        return None

def extract_financial_ratios_from_dart(dart_data, company_name):
    """DART 데이터에서 재무 비율 추출"""
    try:
        ratios = {}
        
        if not dart_data or 'companies' not in dart_data:
            return ratios
        
        # 해당 기업 찾기
        target_company = None
        for company in dart_data['companies']:
            if company.get('name') and company_name in company['name']:
                target_company = company
                break
        
        if not target_company:
            return ratios
        
        # 기업코드로 재무 정보 조회
        company_code = target_company.get('code')
        if company_code:
            financial_info = get_dart_financial_info(company_code)
            if financial_info and 'error' not in financial_info:
                # 재무 지표 추출
                if 'revenue' in financial_info:
                    ratios['revenue'] = financial_info['revenue']
                if 'net_income' in financial_info:
                    ratios['net_income'] = financial_info['net_income']
                if 'total_assets' in financial_info:
                    ratios['total_assets'] = financial_info['total_assets']
                if 'total_equity' in financial_info:
                    ratios['total_equity'] = financial_info['total_equity']
                if 'total_liabilities' in financial_info:
                    ratios['total_liabilities'] = financial_info['total_liabilities']
                
                # 배수 계산
                if 'net_income' in ratios and ratios['net_income'] > 0:
                    # EPS 계산 (주식수는 별도 조회 필요)
                    ratios['eps'] = ratios['net_income'] / 1000000  # 예시 주식수
                
                if 'total_equity' in ratios and ratios['total_equity'] > 0:
                    # BPS 계산
                    ratios['bps'] = ratios['total_equity'] / 1000000  # 예시 주식수
                
                if 'revenue' in ratios and ratios['revenue'] > 0:
                    # SPS 계산
                    ratios['sps'] = ratios['revenue'] / 1000000  # 예시 주식수
        
        return ratios
        
    except Exception as e:
        return {'error': f'DART 재무비율 추출 오류: {str(e)}'}

def get_enhanced_financial_data(company_name, corp_type, financial_data, dart_data):
    """DART와 Yahoo Finance 데이터를 결합한 향상된 재무 데이터"""
    try:
        enhanced_data = financial_data.copy() if financial_data else {}
        
        # DART 데이터에서 재무 비율 추출
        dart_ratios = extract_financial_ratios_from_dart(dart_data, company_name)
        
        if 'error' not in dart_ratios:
            # DART 데이터를 우선 사용
            enhanced_data['dart_ratios'] = dart_ratios
            
            # Yahoo Finance 데이터와 결합
            if 'fin' in enhanced_data and enhanced_data['fin']:
                yf_fin = enhanced_data['fin']
                
                # DART 데이터가 있으면 우선 사용, 없으면 Yahoo Finance 사용
                if 'totalAssets' in yf_fin and not dart_ratios.get('total_assets'):
                    dart_ratios['total_assets'] = yf_fin['totalAssets']
                
                if 'totalLiab' in yf_fin and not dart_ratios.get('total_liabilities'):
                    dart_ratios['total_liabilities'] = yf_fin['totalLiab']
                
                if 'totalRevenue' in yf_fin and not dart_ratios.get('revenue'):
                    dart_ratios['revenue'] = yf_fin['totalRevenue']
                
                if 'netIncome' in yf_fin and not dart_ratios.get('net_income'):
                    dart_ratios['net_income'] = yf_fin['netIncome']
            
            enhanced_data['combined_ratios'] = dart_ratios
        
        return enhanced_data
        
    except Exception as e:
        return {'error': f'향상된 재무 데이터 생성 오류: {str(e)}'}

# 기업 가치 평가 탭
with valuation_tab:
    st.markdown("#### 💰 기업 가치 평가 시스템")
    st.info("전문적인 기업 가치 평가 방법론을 활용하여 기업의 경제적 가치를 종합적으로 분석합니다.")
    
    # 저장된 분석 조회 기능 추가
    st.markdown("### 📋 저장된 평가 분석 조회")
    
    # 데이터베이스에서 저장된 분석 조회 함수들
    def get_saved_valuation_analyses():
        """저장된 평가 분석 목록 조회"""
        try:
            import mysql.connector
            from mysql.connector import Error
            
            # 환경 변수에서 데이터베이스 설정 가져오기
            db_config = {
                'host': os.getenv('SQL_HOST', 'localhost'),
                'user': os.getenv('SQL_USER', 'root'),
                'password': os.getenv('SQL_PASSWORD', ''),
                'database': os.getenv('SQL_DATABASE_NEWBIZ', 'aqaralife_portal'),
                'charset': 'utf8mb4',
                'collation': 'utf8mb4_unicode_ci'
            }
            
            connection = mysql.connector.connect(**db_config)
            cursor = connection.cursor(dictionary=True)
            
            query = """
                SELECT analysis_id, company_name, industry, created_at
                FROM valuation_analyses
                ORDER BY created_at DESC
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            cursor.close()
            connection.close()
            
            return results
        except Exception as e:
            st.error(f"데이터베이스 연결 오류: {str(e)}")
            return []
    
    def get_valuation_analysis_detail(analysis_id):
        """특정 분석의 상세 정보 조회"""
        try:
            import mysql.connector
            from mysql.connector import Error
            
            db_config = {
                'host': os.getenv('DB_HOST', 'localhost'),
                'user': os.getenv('DB_USER', 'root'),
                'password': os.getenv('DB_PASSWORD', ''),
                'database': os.getenv('DB_NAME', 'aqaralife_portal'),
                'charset': 'utf8mb4'
            }
            
            connection = mysql.connector.connect(**db_config)
            cursor = connection.cursor(dictionary=True)
            
            # 기본 정보 조회
            query = "SELECT * FROM valuation_analyses WHERE analysis_id = %s"
            cursor.execute(query, (analysis_id,))
            basic_info = cursor.fetchone()
            
            # 재무 데이터 조회
            query = "SELECT * FROM valuation_financial_data WHERE analysis_id = %s"
            cursor.execute(query, (analysis_id,))
            financial_data = cursor.fetchone()
            
            # 평가 결과 조회
            query = "SELECT * FROM valuation_results WHERE analysis_id = %s"
            cursor.execute(query, (analysis_id,))
            valuation_results = cursor.fetchall()
            
            cursor.close()
            connection.close()
            
            return {
                'basic_info': basic_info,
                'financial_data': financial_data,
                'valuation_results': valuation_results
            }
        except Exception as e:
            st.error(f"상세 정보 조회 오류: {str(e)}")
            return None
    
    def delete_valuation_analysis_by_id(analysis_id):
        """분석 삭제"""
        try:
            import mysql.connector
            from mysql.connector import Error
            
            db_config = {
                'host': os.getenv('DB_HOST', 'localhost'),
                'user': os.getenv('DB_USER', 'root'),
                'password': os.getenv('DB_PASSWORD', ''),
                'database': os.getenv('DB_NAME', 'aqaralife_portal'),
                'charset': 'utf8mb4'
            }
            
            connection = mysql.connector.connect(**db_config)
            cursor = connection.cursor()
            
            # 관련 테이블에서 삭제
            tables = ['valuation_results', 'valuation_financial_data', 'valuation_market_data', 'valuation_agent_analyses', 'valuation_analyses']
            for table in tables:
                query = f"DELETE FROM {table} WHERE analysis_id = %s"
                cursor.execute(query, (analysis_id,))
            
            connection.commit()
            cursor.close()
            connection.close()
            
            return True
        except Exception as e:
            st.error(f"삭제 오류: {str(e)}")
            return False
    
    try:
        # 데이터베이스에서 저장된 분석 조회
        saved_analyses = get_saved_valuation_analyses()
        
        if saved_analyses:
            st.success(f"✅ {len(saved_analyses)}개의 저장된 분석을 찾았습니다.")
            
            # 분석 목록 표시
            analyses_df = pd.DataFrame(saved_analyses)
            analyses_df['created_at'] = pd.to_datetime(analyses_df['created_at']).dt.strftime('%Y-%m-%d %H:%M')
            
            st.dataframe(analyses_df[['company_name', 'industry', 'created_at']], use_container_width=True)
            
            # 상세 조회
            selected_analysis = st.selectbox(
                "상세 정보를 조회할 분석 선택",
                options=saved_analyses,
                format_func=lambda x: f"{x['company_name']} ({x['created_at']})"
            )
            
            if selected_analysis:
                col1, col2 = st.columns([3, 1])
                with col1:
                    if st.button("📊 상세 정보 조회", key="view_analysis_detail"):
                        details = get_valuation_analysis_detail(selected_analysis['analysis_id'])
                        if details:
                            st.session_state['selected_analysis_details'] = details
                            st.success("상세 정보를 불러왔습니다.")
                
                with col2:
                    if st.button("🗑️ 분석 삭제", key="delete_analysis", type="secondary"):
                        if delete_valuation_analysis_by_id(selected_analysis['analysis_id']):
                            st.success("분석이 삭제되었습니다.")
                            st.rerun()
                        else:
                            st.error("삭제 중 오류가 발생했습니다.")
                
                # 상세 정보 표시
                if 'selected_analysis_details' in st.session_state:
                    details = st.session_state['selected_analysis_details']
                    
                    st.markdown("### 📊 상세 분석 정보")
                    
                    # 기본 정보
                    st.write("#### 기업 정보")
                    st.write(f"- **기업명**: {details['basic_info']['company_name']}")
                    st.write(f"- **산업**: {details['basic_info']['industry']}")
                    st.write(f"- **설명**: {details['basic_info']['company_description']}")
                    
                    # 재무 정보
                    if details['financial_data']:
                        st.write("#### 재무 정보")
                        financial_data = details['financial_data']
                        financial_info = {
                            '매출': financial_data.get('revenue', 0),
                            '영업이익': financial_data.get('operating_profit', 0),
                            '순이익': financial_data.get('net_income', 0),
                            'FCF': financial_data.get('current_fcf', 0),
                            '성장률': f"{financial_data.get('growth_rate', 0)*100:.1f}%",
                            '할인율': f"{financial_data.get('discount_rate', 0)*100:.1f}%"
                        }
                        st.json(financial_info)
                    
                    # 평가 결과
                    if details['valuation_results']:
                        st.write("#### 평가 결과")
                        for result in details['valuation_results']:
                            method = result['valuation_method']
                            result_data = json.loads(result['result_data'])
                            st.write(f"**{method.upper()}**: {result_data}")
        else:
            st.info("저장된 분석이 없습니다.")
    except Exception as e:
        st.warning(f"저장된 분석 조회 중 오류: {str(e)}")
    
    st.markdown("---")
    
    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        company_name = corp['corp_input']
        corp_type = corp['corp_type']
        
        st.success(f"분석 대상: {company_name} ({corp_type})")
        
        # 평가 방법 선택 - 세션 상태로 유지
        st.markdown("### 📊 평가 방법 선택")
        default_methods = st.session_state.get('valuation_methods', ["현금흐름할인법 (DCF)", "비교 기업 분석 (CCA)"])
        valuation_methods = st.multiselect(
            "평가 방법 선택 (여러 개 선택 가능)",
            [
                "순자산가치법 (NAV)",
                "청산가치법",
                "현금흐름할인법 (DCF)",
                "주주현금흐름할인법 (FCFE)",
                "배당할인법 (DDM)",
                "초과이익모형 (RIM)",
                "비교 기업 분석 (CCA)",
                "거래 사례 비교법 (PTA)"
            ],
            default=default_methods
        )
        # 선택된 방법을 세션 상태에 저장
        st.session_state['valuation_methods'] = valuation_methods
        
        # 재무 데이터 수집
        financial_data = {}
        dart_data = {}
        
        if corp_type == "상장기업":
            ticker = get_ticker_from_name(company_name)
            if ticker and not isinstance(ticker, list):
                info, hist, fin, err = get_yf_info(ticker)
                financial_data = {
                    'info': info,
                    'hist': hist,
                    'fin': fin,
                    'error': err
                }
            
            # 상장기업도 DART 정보 확인
            st.info("🏢 상장기업의 경우 DART(전자공시시스템)의 공식 재무제표 정보를 함께 확인합니다.")
            dart_result = get_dart_company_info(company_name)
            dart_analysis = dart_result
            if dart_analysis and 'companies' in dart_analysis and dart_analysis['companies']:
                dart_data = dart_analysis
                st.success("✅ DART에서 기업 정보를 찾았습니다!")
                
                # DART 기업 정보 표시
                for company in dart_analysis['companies'][:3]:  # 상위 3개만 표시
                    st.write(f"**기업명:** {company.get('name', 'N/A')}")
                    st.write(f"**기업코드:** {company.get('code', 'N/A')}")
                    st.write(f"**감사사:** {company.get('audit_firm', 'N/A')}")
                    st.write("---")
            else:
                st.warning("⚠️ DART에서 기업 정보를 찾을 수 없습니다. Yahoo Finance 데이터를 사용합니다.")
        else:
            # 비상장기업은 기존 DART 분석 사용
            dart_analysis = get_unlisted_company_analysis_with_dart(company_name)
            if 'error' not in dart_analysis and 'dart_info' in dart_analysis:
                dart_data = dart_analysis
        
        # 향상된 재무 데이터 생성 (DART + Yahoo Finance)
        enhanced_financial_data = get_enhanced_financial_data(company_name, corp_type, financial_data, dart_data)
        if 'error' not in enhanced_financial_data:
            st.success("✅ DART와 Yahoo Finance 데이터를 결합한 정확한 재무 정보를 사용합니다.")
        else:
            st.warning(f"⚠️ 향상된 재무 데이터 생성 실패: {enhanced_financial_data['error']}")
        
        # 평가 실행
        if st.button("💰 기업 가치 평가 실행", type="primary"):
            with st.spinner("기업 가치 평가를 수행하고 있습니다..."):
                # 기존 평가 결과가 있으면 사용, 없으면 새로 생성
                if 'valuation_results' in st.session_state:
                    valuation_results = st.session_state['valuation_results']
                    st.info("기존 평가 결과를 사용합니다.")
                else:
                    valuation_results = []
                
                # 1. 순자산가치법 (NAV)
                if "순자산가치법 (NAV)" in valuation_methods:
                    st.markdown("#### 🏦 순자산가치법 (NAV)")
                    
                    # 재무 데이터에서 자산/부채 추출 (DART 우선, Yahoo Finance 보조)
                    assets = 0
                    liabilities = 0
                    intangible_assets = 0
                    
                    # DART 데이터 우선 사용
                    if enhanced_financial_data and 'combined_ratios' in enhanced_financial_data:
                        dart_ratios = enhanced_financial_data['combined_ratios']
                        if 'total_assets' in dart_ratios:
                            assets = dart_ratios['total_assets']
                        if 'total_liabilities' in dart_ratios:
                            liabilities = dart_ratios['total_liabilities']
                    
                    # DART 데이터가 없으면 Yahoo Finance 사용
                    if assets == 0 and financial_data and 'fin' in financial_data and financial_data['fin']:
                        if 'totalAssets' in financial_data['fin']:
                            assets = financial_data['fin']['totalAssets']
                        if 'totalLiab' in financial_data['fin']:
                            liabilities = financial_data['fin']['totalLiab']
                        if 'intangibleAssets' in financial_data['fin']:
                            intangible_assets = financial_data['fin']['intangibleAssets']
                    
                    # 사용자 입력 허용
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        assets = st.number_input("총 자산 (원)", value=float(assets), step=1000000000)
                    with col2:
                        liabilities = st.number_input("총 부채 (원)", value=float(liabilities), step=1000000000)
                    with col3:
                        intangible_assets = st.number_input("무형자산 (원)", value=float(intangible_assets), step=1000000000)
                    
                    nav_result = calculate_net_asset_value(assets, liabilities, intangible_assets)
                    if 'error' not in nav_result:
                        st.success(f"순자산가치: {nav_result['net_asset_value']:,.0f}원")
                        st.write(f"**설명:** {nav_result['description']}")
                        valuation_results.append(nav_result)
                    else:
                        st.error(nav_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 2. 청산가치법
                if "청산가치법" in valuation_methods:
                    st.markdown("#### 💸 청산가치법")
                    
                    liquidation_discount = st.slider("청산 할인율 (%)", 10, 50, 30, key="liquidation_discount_slider") / 100
                    
                    liquidation_result = calculate_liquidation_value(assets, liabilities, liquidation_discount)
                    if 'error' not in liquidation_result:
                        st.success(f"청산가치: {liquidation_result['liquidation_value']:,.0f}원")
                        st.write(f"**설명:** {liquidation_result['description']}")
                        valuation_results.append(liquidation_result)
                    else:
                        st.error(liquidation_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 3. 현금흐름할인법 (DCF)
                if "현금흐름할인법 (DCF)" in valuation_methods:
                    st.markdown("#### 💰 현금흐름할인법 (DCF)")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        free_cash_flows = st.number_input("자유현금흐름 (원)", value=10000000000, step=1000000000)
                    with col2:
                        growth_rate = st.slider("성장률 (%)", 0, 20, 5, key="dcf_growth_rate_slider") / 100
                    with col3:
                        discount_rate = st.slider("할인율 (%)", 5, 20, 10, key="dcf_discount_rate_slider") / 100
                    
                    dcf_result = calculate_dcf_value(free_cash_flows, growth_rate, discount_rate)
                    if 'error' not in dcf_result:
                        st.success(f"기업가치: {dcf_result['enterprise_value']:,.0f}원")
                        st.write(f"**설명:** {dcf_result['description']}")
                        valuation_results.append(dcf_result)
                    else:
                        st.error(dcf_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 4. 주주현금흐름할인법 (FCFE)
                if "주주현금흐름할인법 (FCFE)" in valuation_methods:
                    st.markdown("#### 👥 주주현금흐름할인법 (FCFE)")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        fcfe = st.number_input("주주현금흐름 (원)", value=8000000000, step=1000000000)
                    with col2:
                        fcfe_growth = st.slider("FCFE 성장률 (%)", 0, 20, 5, key="fcfe_growth_rate_slider") / 100
                    with col3:
                        cost_of_equity = st.slider("자본비용 (%)", 5, 20, 12, key="fcfe_cost_of_equity_slider") / 100
                    
                    fcfe_result = calculate_fcfe_value(fcfe, fcfe_growth, cost_of_equity)
                    if 'error' not in fcfe_result:
                        st.success(f"주주가치: {fcfe_result['equity_value']:,.0f}원")
                        st.write(f"**설명:** {fcfe_result['description']}")
                        valuation_results.append(fcfe_result)
                    else:
                        st.error(fcfe_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 5. 배당할인법 (DDM)
                if "배당할인법 (DDM)" in valuation_methods:
                    st.markdown("#### 💎 배당할인법 (DDM)")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        dividend = st.number_input("배당금 (원)", value=1000, step=100)
                    with col2:
                        dividend_growth = st.slider("배당 성장률 (%)", 0, 15, 3, key="ddm_dividend_growth_slider") / 100
                    with col3:
                        required_return = st.slider("요구수익률 (%)", 5, 20, 10, key="ddm_required_return_slider") / 100
                    
                    ddm_result = calculate_ddm_value(dividend, dividend_growth, required_return)
                    if 'error' not in ddm_result:
                        if ddm_result['stock_value'] > 0:
                            st.success(f"주식가치: {ddm_result['stock_value']:,.0f}원")
                        else:
                            st.warning("성장률이 요구수익률보다 높아 계산이 불가능합니다.")
                        st.write(f"**설명:** {ddm_result['description']}")
                        valuation_results.append(ddm_result)
                    else:
                        st.error(ddm_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 6. 초과이익모형 (RIM)
                if "초과이익모형 (RIM)" in valuation_methods:
                    st.markdown("#### 📈 초과이익모형 (RIM)")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        book_value = st.number_input("장부가치 (원)", value=50000000000, step=1000000000)
                    with col2:
                        roe = st.slider("ROE (%)", 5, 30, 15, key="rim_roe_slider") / 100
                    with col3:
                        rim_cost_of_equity = st.slider("자본비용 (%)", 5, 20, 12, key="rim_cost_of_equity_slider") / 100
                    
                    rim_result = calculate_rim_value(book_value, roe, rim_cost_of_equity)
                    if 'error' not in rim_result:
                        st.success(f"주주가치: {rim_result['equity_value']:,.0f}원")
                        st.write(f"**설명:** {rim_result['description']}")
                        valuation_results.append(rim_result)
                    else:
                        st.error(rim_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 7. 비교 기업 분석 (CCA)
                if "비교 기업 분석 (CCA)" in valuation_methods:
                    st.markdown("#### 🏢 비교 기업 분석 (CCA)")
                    
                    # 업종 선택
                    industry = st.selectbox(
                        "업종 선택",
                        ["IT/소프트웨어", "제조업", "서비스업", "바이오/헬스케어", "금융업", "소비재", "에너지", "기타"]
                    )
                    
                    # 업종별 평균 배수
                    industry_averages = get_industry_averages(industry)
                    st.info(f"📊 {industry} 업종 평균 배수: PER {industry_averages['PER']:.1f}, PBR {industry_averages['PBR']:.1f}, PSR {industry_averages['PSR']:.1f}, EV/EBITDA {industry_averages['EV/EBITDA']:.1f}")
                    
                    # 대상 기업 재무 지표 (DART 데이터 우선 사용)
                    col1, col2, col3, col4 = st.columns(4)
                    
                    # DART에서 추출한 재무 지표
                    dart_eps = 1000
                    dart_bps = 5000
                    dart_sps = 20000
                    dart_ebitda = 5000000000
                    
                    if enhanced_financial_data and 'combined_ratios' in enhanced_financial_data:
                        dart_ratios = enhanced_financial_data['combined_ratios']
                        if 'eps' in dart_ratios:
                            dart_eps = dart_ratios['eps']
                        if 'bps' in dart_ratios:
                            dart_bps = dart_ratios['bps']
                        if 'sps' in dart_ratios:
                            dart_sps = dart_ratios['sps']
                        if 'net_income' in dart_ratios:
                            dart_ebitda = dart_ratios['net_income'] * 1.5  # EBITDA 추정
                    
                    with col1:
                        target_eps = st.number_input("EPS (원)", value=float(dart_eps), step=100.0)
                    with col2:
                        target_bps = st.number_input("BPS (원)", value=float(dart_bps), step=500.0)
                    with col3:
                        target_sps = st.number_input("SPS (원)", value=float(dart_sps), step=1000.0)
                    with col4:
                        target_ebitda = st.number_input("EBITDA (원)", value=float(dart_ebitda), step=100000000.0)
                    
                    # 비교 기업 데이터 (예시)
                    comparable_companies = [
                        {'per': industry_averages['PER'], 'pbr': industry_averages['PBR'], 'psr': industry_averages['PSR'], 'ev_ebitda': industry_averages['EV/EBITDA']},
                        {'per': industry_averages['PER'] * 0.9, 'pbr': industry_averages['PBR'] * 0.9, 'psr': industry_averages['PSR'] * 0.9, 'ev_ebitda': industry_averages['EV/EBITDA'] * 0.9},
                        {'per': industry_averages['PER'] * 1.1, 'pbr': industry_averages['PBR'] * 1.1, 'psr': industry_averages['PSR'] * 1.1, 'ev_ebitda': industry_averages['EV/EBITDA'] * 1.1}
                    ]
                    
                    target_company = {
                        'eps': target_eps,
                        'bps': target_bps,
                        'sps': target_sps,
                        'ebitda': target_ebitda
                    }
                    
                    cca_result = calculate_comparable_company_analysis(target_company, comparable_companies)
                    if 'error' not in cca_result:
                        st.success(f"PER 기반 가치: {cca_result['per_value']:,.0f}원")
                        st.success(f"PBR 기반 가치: {cca_result['pbr_value']:,.0f}원")
                        st.success(f"PSR 기반 가치: {cca_result['psr_value']:,.0f}원")
                        st.success(f"EV/EBITDA 기반 가치: {cca_result['ev_ebitda_value']:,.0f}원")
                        st.write(f"**설명:** {cca_result['description']}")
                        valuation_results.append(cca_result)
                    else:
                        st.error(cca_result['error'])
                
                # 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                
                # 8. 거래 사례 비교법 (PTA)
                if "거래 사례 비교법 (PTA)" in valuation_methods:
                    st.markdown("#### 💼 거래 사례 비교법 (PTA)")
                    
                    # 과거 거래 사례 데이터 (예시)
                    precedent_transactions = [
                        {'per': industry_averages['PER'] * 1.2, 'pbr': industry_averages['PBR'] * 1.2, 'psr': industry_averages['PSR'] * 1.2, 'ev_ebitda': industry_averages['EV/EBITDA'] * 1.2},
                        {'per': industry_averages['PER'] * 1.3, 'pbr': industry_averages['PBR'] * 1.3, 'psr': industry_averages['PSR'] * 1.3, 'ev_ebitda': industry_averages['EV/EBITDA'] * 1.3},
                        {'per': industry_averages['PER'] * 1.1, 'pbr': industry_averages['PBR'] * 1.1, 'psr': industry_averages['PSR'] * 1.1, 'ev_ebitda': industry_averages['EV/EBITDA'] * 1.1}
                    ]
                    
                    pta_result = calculate_precedent_transaction_analysis(target_company, precedent_transactions)
                    if 'error' not in pta_result:
                        st.success(f"PER 기반 가치 (프리미엄 포함): {pta_result['per_value']:,.0f}원")
                        st.success(f"PBR 기반 가치 (프리미엄 포함): {pta_result['pbr_value']:,.0f}원")
                        st.success(f"PSR 기반 가치 (프리미엄 포함): {pta_result['psr_value']:,.0f}원")
                        st.success(f"EV/EBITDA 기반 가치 (프리미엄 포함): {pta_result['ev_ebitda_value']:,.0f}원")
                        st.write(f"**설명:** {pta_result['description']}")
                        valuation_results.append(pta_result)
                    else:
                        st.error(pta_result['error'])
                
                # 최종 평가 결과를 세션 상태에 저장
                st.session_state['valuation_results'] = valuation_results
                st.session_state['valuation_calculated'] = True
                st.success("✅ 평가 결과가 세션에 저장되었습니다.")
                
                # 평가 결과 요약
                if valuation_results:
                    st.markdown("---")
                    st.markdown("### 📊 평가 결과 요약")
                    
                    summary = create_valuation_summary(valuation_results)
                    if 'error' not in summary:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("평균 가치", f"{summary['average_value']:,.0f}원")
                        with col2:
                            st.metric("최소 가치", f"{summary['min_value']:,.0f}원")
                        with col3:
                            st.metric("최대 가치", f"{summary['max_value']:,.0f}원")
                        
                        st.info(f"**신뢰도:** {summary['confidence_level']:.1f}%")
                        st.info(f"**투자 권고:** {summary['recommendation']}")
                        
                        # 사용된 방법들
                        st.write("**사용된 평가 방법:**")
                        for method in summary['methods_used']:
                            st.write(f"• {method}")
                        
                        # 차트 생성
                        chart = create_valuation_chart(valuation_results)
                        if chart:
                            st.plotly_chart(chart, use_container_width=True, key="valuation_summary_chart")                        
                        # 세션에 저장
                        st.session_state['valuation_results'] = {
                            'company': company_name,
                            'results': valuation_results,
                            'summary': summary,
                            'timestamp': pd.Timestamp.now()
                        }
                    else:
                        st.error(summary['error'])
                else:
                    st.warning("평가 결과가 없습니다. 평가 방법을 선택하고 실행해주세요.")
        
        # 이전 평가 결과 표시
        if 'valuation_results' in st.session_state and st.session_state.get('valuation_calculated', False):
            st.markdown("---")
            st.markdown("### 📋 이전 평가 결과")
            results = st.session_state['valuation_results']
            
            if isinstance(results, dict) and 'company' in results:
                st.write(f"**기업:** {results['company']}")
                st.write(f"**평가 시간:** {results['timestamp']}")
                
                if 'summary' in results:
                    summary = results['summary']
                    st.write(f"**평균 가치:** {summary['average_value']:,.0f}원")
                    st.write(f"**신뢰도:** {summary['confidence_level']:.1f}%")
                    st.write(f"**투자 권고:** {summary['recommendation']}")
            else:
                st.info("이전에 계산된 평가 결과가 있습니다.")
            
            # 초기화 버튼
            if st.button("🔄 평가 결과 초기화", key="reset_valuation"):
                # 세션 상태 초기화
                if 'valuation_results' in st.session_state:
                    del st.session_state['valuation_results']
                if 'valuation_calculated' in st.session_state:
                    del st.session_state['valuation_calculated']
                if 'valuation_methods' in st.session_state:
                    del st.session_state['valuation_methods']
                st.success("✅ 평가 결과가 초기화되었습니다.")
                st.rerun()
        
        # 추가 분석 옵션
        st.markdown("---")
        st.markdown("### 🔧 추가 분석 옵션")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("📈 시나리오 분석", help="다양한 시나리오 하에서의 기업 가치 분석", key="scenario_analysis_btn_valuation"):
                st.info("시나리오 분석 기능은 추후 개발 예정입니다.")
        
        with col2:
            if st.button("🎯 투자 전략 생성", help="AI 기반 개인화된 투자 전략 생성", key="investment_strategy_btn_valuation"):
                st.info("투자 전략 생성 기능은 추후 개발 예정입니다.")

def get_corp_code_from_name(company_name, api_key):
    # 1. corpCode.zip 다운로드
    url = f'https://opendart.fss.or.kr/api/corpCode.xml?crtfc_key={api_key}'
    zip_path = 'corpCode.zip'
    xml_path = 'CORPCODE.xml'
    if not os.path.exists(xml_path):
        r = requests.get(url)
        with open(zip_path, 'wb') as f:
            f.write(r.content)
        # 2. 압축 해제
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall()
    # 3. XML 파싱
    tree = ET.parse(xml_path)
    root = tree.getroot()
    for child in root.findall('list'):
        name = child.find('corp_name').text
        code = child.find('corp_code').text
        if company_name.strip() == name.strip():
            return code
    return None

def get_financial_statements(corp_code, year, api_key):
    url = (
        f'https://opendart.fss.or.kr/api/fnlttSinglAcnt.json'
        f'?crtfc_key={api_key}&corp_code={corp_code}&bsns_year={year}&reprt_code=11011'
    )
    response = requests.get(url)
    return response.json()

def search_corp_codes_partial(company_name, api_key):
    # corpCode.xml 다운로드 및 파싱 (기존과 동일)
    url = f'https://opendart.fss.or.kr/api/corpCode.xml?crtfc_key={api_key}'
    zip_path = 'corpCode.zip'
    xml_path = 'CORPCODE.xml'
    if not os.path.exists(xml_path):
        r = requests.get(url)
        with open(zip_path, 'wb') as f:
            f.write(r.content)
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall()
    tree = ET.parse(xml_path)
    root = tree.getroot()
    results = []
    for child in root.findall('list'):
        name = child.find('corp_name').text
        code = child.find('corp_code').text
        if company_name.strip() in name.strip():
            results.append({'corp_name': name, 'corp_code': code})
    return results

def get_audit_report(corp_code, year, api_key):
    # 감사보고서(감사인의 감사보고서) 조회
    # reprt_code: 11011(사업보고서), 11012(반기보고서), 11013(분기보고서)
    url = (
        f'https://opendart.fss.or.kr/api/testrpt.json'
        f'?crtfc_key={api_key}&corp_code={corp_code}&bsns_year={year}&reprt_code=11011'
    )
    response = requests.get(url)
    return response.json()



# 시나리오 분석 및 투자전략 생성 함수들
def create_scenario_analysis(company_info, financial_data, dart_data=None):
    """다양한 시나리오 분석 생성"""
    try:
        # 기본 시나리오 설정
        scenarios = {
            'optimistic': {
                'growth_rate': 0.15,
                'margin_improvement': 0.05,
                'market_expansion': 0.20,
                'description': '낙관적 시나리오: 높은 성장률과 마진 개선'
            },
            'base': {
                'growth_rate': 0.08,
                'margin_improvement': 0.02,
                'market_expansion': 0.10,
                'description': '기본 시나리오: 현재 추세 유지'
            },
            'pessimistic': {
                'growth_rate': 0.02,
                'margin_improvement': -0.02,
                'market_expansion': 0.05,
                'description': '비관적 시나리오: 성장 둔화와 마진 압박'
            },
            'recession': {
                'growth_rate': -0.05,
                'margin_improvement': -0.05,
                'market_expansion': -0.10,
                'description': '경기침체 시나리오: 매출 감소와 마진 압박'
            }
        }
        
        # 재무 데이터 추출
        revenue = financial_data.get('매출액', 1000)
        net_income = financial_data.get('당기순이익', 100)
        debt = financial_data.get('부채총계', 500)
        equity = financial_data.get('자본총계', 1000)
        
        scenario_results = {}
        
        for scenario_name, params in scenarios.items():
            # 시나리오별 재무 예측
            future_revenue = revenue * (1 + params['growth_rate']) ** 3
            future_margin = (net_income / revenue) + params['margin_improvement']
            future_net_income = future_revenue * future_margin
            
            # 재무비율 계산
            future_roe = future_net_income / equity if equity > 0 else 0
            future_debt_ratio = debt / (debt + equity) if (debt + equity) > 0 else 0
            
            scenario_results[scenario_name] = {
                'description': params['description'],
                'revenue_3y': future_revenue,
                'net_income_3y': future_net_income,
                'roe_3y': future_roe,
                'debt_ratio_3y': future_debt_ratio,
                'growth_rate': params['growth_rate'],
                'margin_change': params['margin_improvement']
            }
        
        return scenario_results
        
    except Exception as e:
        return {'error': f'시나리오 분석 오류: {str(e)}'}

def generate_investment_strategy(company_info, financial_data, scenario_results, dart_data=None):
    """투자전략 생성"""
    try:
        # 기본 정보 추출
        company_name = company_info.get('기업명', '')
        industry = company_info.get('업종', '')
        market_cap = financial_data.get('시가총액', 0)
        pe_ratio = financial_data.get('PER', 0)
        pb_ratio = financial_data.get('PBR', 0)
        
        # 시나리오별 투자 권고
        strategies = {}
        
        for scenario_name, results in scenario_results.items():
            if scenario_name == 'error':
                continue
                
            # 시나리오별 투자 전략 결정
            if scenario_name == 'optimistic':
                if pe_ratio < 15 and pb_ratio < 2:
                    recommendation = '매수'
                    reasoning = '낙관적 시나리오에서 저평가 상태로 매수 기회'
                else:
                    recommendation = '보유'
                    reasoning = '낙관적 시나리오이지만 현재 가격이 적정 수준'
                    
            elif scenario_name == 'base':
                if pe_ratio < 12 and pb_ratio < 1.5:
                    recommendation = '매수'
                    reasoning = '기본 시나리오에서 저평가 상태로 매수 기회'
                elif pe_ratio > 25 or pb_ratio > 3:
                    recommendation = '매도'
                    reasoning = '기본 시나리오에서 고평가 상태로 매도 고려'
                else:
                    recommendation = '보유'
                    reasoning = '기본 시나리오에서 적정 가격 수준'
                    
            elif scenario_name == 'pessimistic':
                if pe_ratio > 20 or pb_ratio > 2.5:
                    recommendation = '매도'
                    reasoning = '비관적 시나리오에서 고평가 상태로 매도 권고'
                else:
                    recommendation = '보유'
                    reasoning = '비관적 시나리오이지만 현재 가격이 합리적'
                    
            else:  # recession
                recommendation = '매도'
                reasoning = '경기침체 시나리오에서 리스크 관리 차원의 매도 권고'
            
            strategies[scenario_name] = {
                'recommendation': recommendation,
                'reasoning': reasoning,
                'target_price': calculate_target_price(results, pe_ratio, pb_ratio),
                'risk_level': get_risk_level(scenario_name),
                'time_horizon': get_time_horizon(scenario_name)
            }
        
        return strategies
        
    except Exception as e:
        return {'error': f'투자전략 생성 오류: {str(e)}'}

def calculate_target_price(scenario_results, current_pe, current_pb):
    """시나리오별 목표가 계산"""
    try:
        # 기본 목표가 계산 (PER, PBR 기반)
        base_price = 0
        
        if current_pe > 0:
            # PER 기반 목표가
            target_pe = min(current_pe * 0.8, 15)  # 보수적 접근
            base_price = scenario_results['net_income_3y'] * target_pe
            
        if current_pb > 0:
            # PBR 기반 목표가
            target_pb = min(current_pb * 0.8, 2.0)  # 보수적 접근
            pb_price = scenario_results.get('equity_3y', 1000) * target_pb
            
            if base_price > 0:
                base_price = (base_price + pb_price) / 2
            else:
                base_price = pb_price
        
        return max(base_price, 0)
        
    except Exception as e:
        return 0

def get_risk_level(scenario_name):
    """시나리오별 리스크 레벨"""
    risk_levels = {
        'optimistic': '중간',
        'base': '낮음',
        'pessimistic': '높음',
        'recession': '매우 높음'
    }
    return risk_levels.get(scenario_name, '중간')

def get_time_horizon(scenario_name):
    """시나리오별 투자 기간"""
    time_horizons = {
        'optimistic': '1-2년',
        'base': '2-3년',
        'pessimistic': '단기 (6개월-1년)',
        'recession': '단기 (3-6개월)'
    }
    return time_horizons.get(scenario_name, '1-2년')

def create_scenario_charts(scenario_results):
    """시나리오 분석 차트 생성"""
    try:
        import plotly.graph_objects as go
        from plotly.subplots import make_subplots
        
        # 데이터 준비
        scenarios = list(scenario_results.keys())
        revenues = [scenario_results[s]['revenue_3y'] for s in scenarios if s != 'error']
        net_incomes = [scenario_results[s]['net_income_3y'] for s in scenarios if s != 'error']
        roes = [scenario_results[s]['roe_3y'] for s in scenarios if s != 'error']
        
        # 서브플롯 생성
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('3년 후 매출 예측', '3년 후 순이익 예측', '3년 후 ROE 예측', '시나리오 비교'),
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}]]
        )
        
        # 매출 예측 차트
        fig.add_trace(
            go.Bar(x=scenarios, y=revenues, name='매출액', marker_color='blue'),
            row=1, col=1
        )
        
        # 순이익 예측 차트
        fig.add_trace(
            go.Bar(x=scenarios, y=net_incomes, name='순이익', marker_color='green'),
            row=1, col=2
        )
        
        # ROE 예측 차트
        fig.add_trace(
            go.Bar(x=scenarios, y=roes, name='ROE', marker_color='red'),
            row=2, col=1
        )
        
        # 시나리오 비교 차트 (복합)
        fig.add_trace(
            go.Scatter(x=scenarios, y=revenues, name='매출액', mode='lines+markers'),
            row=2, col=2
        )
        fig.add_trace(
            go.Scatter(x=scenarios, y=net_incomes, name='순이익', mode='lines+markers'),
            row=2, col=2
        )
        
        fig.update_layout(
            title='시나리오별 재무 예측',
            height=600,
            showlegend=True
        )
        
        return fig
        
    except Exception as e:
        return None

def analyze_market_conditions(company_info, industry):
    """시장 상황 분석"""
    try:
        # 업종별 시장 상황 분석
        market_conditions = {
            '반도체': {
                'current_trend': '회복세',
                'growth_drivers': ['AI 수요 증가', '자동차 반도체 수요'],
                'risks': ['미중 무역갈등', '반도체 공급과잉'],
                'outlook': '긍정적'
            },
            '자동차': {
                'current_trend': '안정적',
                'growth_drivers': ['전기차 수요 증가', '자율주행 기술'],
                'risks': ['원자재 가격 상승', '반도체 부족'],
                'outlook': '중립적'
            },
            '금융': {
                'current_trend': '안정적',
                'growth_drivers': ['금리 인상', '디지털 금융'],
                'risks': ['부동산 시장 침체', '신용 리스크'],
                'outlook': '중립적'
            },
            '바이오': {
                'current_trend': '성장세',
                'growth_drivers': ['신약 개발', '바이오시밀러'],
                'risks': ['임상시험 실패', '규제 리스크'],
                'outlook': '긍정적'
            }
        }
        
        # 기본값
        default_condition = {
            'current_trend': '중립적',
            'growth_drivers': ['기술 혁신', '시장 확대'],
            'risks': ['경기 침체', '경쟁 심화'],
            'outlook': '중립적'
        }
        
        return market_conditions.get(industry, default_condition)
        
    except Exception as e:
        return {'error': f'시장 상황 분석 오류: {str(e)}'}

def generate_risk_management_strategy(company_info, financial_data, scenario_results):
    """리스크 관리 전략 생성"""
    try:
        # 리스크 요소 분석
        risks = []
        
        # 재무 리스크
        debt_ratio = financial_data.get('부채비율', 0)
        if debt_ratio > 200:
            risks.append('높은 부채비율')
        elif debt_ratio > 100:
            risks.append('중간 부채비율')
            
        # 수익성 리스크
        roe = financial_data.get('ROE', 0)
        if roe < 5:
            risks.append('낮은 수익성')
        elif roe < 10:
            risks.append('보통 수익성')
            
        # 성장성 리스크
        growth_rate = financial_data.get('매출성장률', 0)
        if growth_rate < 0:
            risks.append('매출 감소')
        elif growth_rate < 5:
            risks.append('성장 둔화')
            
        # 시장 리스크
        market_cap = financial_data.get('시가총액', 0)
        if market_cap < 1000:  # 10억원
            risks.append('소형주 리스크')
            
        # 리스크 관리 전략
        strategies = {
            '높은 부채비율': '부채 구조 개선 모니터링, 현금흐름 관리 강화',
            '낮은 수익성': '수익성 개선 계획 수립, 비용 구조 최적화',
            '매출 감소': '사업 다각화, 신규 시장 진출 검토',
            '소형주 리스크': '유동성 관리, 분산 투자 고려',
            '성장 둔화': '신사업 발굴, R&D 투자 확대'
        }
        
        risk_management = {
            'identified_risks': risks,
            'management_strategies': {risk: strategies.get(risk, '일반적인 리스크 관리') for risk in risks},
            'monitoring_points': [
                '분기별 재무제표 모니터링',
                '업종 동향 및 경쟁사 분석',
                '거시경제 지표 추적',
                '정부 정책 변화 감시'
            ]
        }
        
        return risk_management
        
    except Exception as e:
        return {'error': f'리스크 관리 전략 생성 오류: {str(e)}'}


# 가치 평가 탭
with valuation_tab:
    st.markdown("#### 🎯 기업 가치 평가 시스템")
    st.info("다양한 가치 평가 방법을 통해 기업의 내재가치를 분석합니다.")
    st.info("💡 **상장/비상장 기업 모두 지원:** 상장기업은 실시간 재무데이터를, 비상장기업은 기본값과 사용자 입력을 활용합니다.")
    
    # 기업 선택 확인
    corp = st.session_state.get('selected_corp')
    if not corp:
        st.warning("먼저 기업을 검색/선택하세요.")
    else:
        company_name = corp['corp_input']
        corp_type = corp['corp_type']
        
        st.success(f"분석 대상: [{corp_type}] {company_name}")
        
        # 가치 평가 방법 선택
        valuation_methods = st.multiselect(
            "가치 평가 방법 선택",
            ["DCF 모델", "PER 기반 평가", "EV/EBITDA 평가", "무형자산 가치 평가", "AI 멀티에이전트 분석", "산업별 비교 분석"],
            default=["DCF 모델", "PER 기반 평가"]
        )
        
        if st.button("🎯 가치 평가 시작", type="primary"):
            with st.spinner("기업 가치 평가를 수행하고 있습니다..."):
                
                # 기업 정보 및 재무 데이터 수집
                company_info = {}
                financial_data = {}
                market_data = {}
                
                # Perplexity 정보가 있으면 사용
                if 'perplexity_info' in corp:
                    company_info = corp['perplexity_info']
                else:
                    # 기본 기업 정보 생성
                    company_info = {
                        'name': company_name,
                        'industry': '기타',
                        'description': f'{company_name} 기업 정보',
                        'currency': 'KRW'
                    }
                
                # 재무 데이터 수집
                if corp_type == "상장기업":
                    financial_data = get_naver_main_fundamentals(company_name)
                else:
                    # 비상장 기업의 경우 기본값 설정
                    financial_data = {
                        'revenue': 1000,  # 기본값 (억원)
                        'operating_profit': 100,
                        'net_income': 80,
                        'current_fcf': 60,
                        'growth_rate': 0.05,
                        'discount_rate': 0.10,
                        'terminal_growth_rate': 0.03,
                        'r_and_d_cost': 20,
                        'net_debt': 200
                    }
                
                # 시장 데이터 설정
                market_data = {
                    'patents_count': 5,
                    'trademarks_count': 3,
                    'technology_impact': 0.7,
                    'market_size': 5000,
                    'market_share': 0.1,
                    'per_values': [10, 15, 20],
                    'evebitda_values': [8, 10, 12]
                }
                
                valuation_results = {}
                
                # 1. DCF 모델 평가
                if "DCF 모델" in valuation_methods:
                    st.markdown("### 💰 DCF 모델 기반 가치 평가")
                    
                    if financial_data and 'error' not in financial_data:
                        # DCF 계산
                        dcf_result = calculate_dcf(
                            current_fcf=financial_data.get('current_fcf', 100),
                            growth_rate=financial_data.get('growth_rate', 0.05),
                            discount_rate=financial_data.get('discount_rate', 0.10),
                            terminal_growth_rate=financial_data.get('terminal_growth_rate', 0.03)
                        )
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**DCF 평가 결과:**")
                            st.write(f"• 기업가치: {dcf_result['company_value']:,.0f}억원")
                            st.write(f"• 예측 기간 FCF 합계: {sum(dcf_result['present_values']):,.0f}억원")
                            st.write(f"• 잔여가치: {dcf_result['terminal_value_pv']:,.0f}억원")
                        
                        with col2:
                            st.write("**입력 변수:**")
                            st.write(f"• 현재 FCF: {financial_data.get('current_fcf', 100):,.0f}억원")
                            st.write(f"• 성장률: {financial_data.get('growth_rate', 0.05)*100:.1f}%")
                            st.write(f"• 할인율: {financial_data.get('discount_rate', 0.10)*100:.1f}%")
                            st.write(f"• 영구성장률: {financial_data.get('terminal_growth_rate', 0.03)*100:.1f}%")
                        
                        valuation_results['DCF'] = dcf_result
                    else:
                        st.error("재무 데이터를 가져올 수 없어 DCF 평가를 수행할 수 없습니다.")
                
                # 2. PER 기반 평가
                if "PER 기반 평가" in valuation_methods:
                    st.markdown("### 📊 PER 기반 가치 평가")
                    
                    if financial_data and 'error' not in financial_data:
                        net_income = financial_data.get('net_income', 100)
                        per_values = [10, 15, 20, 25]
                        
                        per_results = calculate_per_valuation(net_income, per_values)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**PER 기반 평가 결과:**")
                            for per, value in per_results.items():
                                st.write(f"• PER {per}배: {value:,.0f}억원")
                        
                        with col2:
                            st.write("**평가 기준:**")
                            st.write(f"• 당기순이익: {net_income:,.0f}억원")
                            st.write("• PER 배수: 10배(저평가) ~ 25배(고평가)")
                        
                        valuation_results['PER'] = per_results
                    else:
                        st.error("재무 데이터를 가져올 수 없어 PER 평가를 수행할 수 없습니다.")
                
                # 3. EV/EBITDA 평가
                if "EV/EBITDA 평가" in valuation_methods:
                    st.markdown("### 🏭 EV/EBITDA 기반 가치 평가")
                    
                    if financial_data and 'error' not in financial_data:
                        # EBITDA 계산 (영업이익 + 감가상각비)
                        operating_profit = financial_data.get('operating_profit', 100)
                        depreciation = financial_data.get('depreciation', 20)
                        ebitda = operating_profit + depreciation
                        net_debt = financial_data.get('net_debt', 200)
                        
                        evebitda_multiples = [8, 10, 12, 15]
                        evebitda_results = calculate_ev_ebitda_valuation(ebitda, evebitda_multiples, net_debt)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**EV/EBITDA 평가 결과:**")
                            for multiple, result in evebitda_results.items():
                                st.write(f"• EV/EBITDA {multiple}배:")
                                st.write(f"  - 기업가치: {result['enterprise_value']:,.0f}억원")
                                st.write(f"  - 주주가치: {result['equity_value']:,.0f}억원")
                        
                        with col2:
                            st.write("**평가 기준:**")
                            st.write(f"• EBITDA: {ebitda:,.0f}억원")
                            st.write(f"• 순차입금: {net_debt:,.0f}억원")
                            st.write("• EV/EBITDA 배수: 8배(저평가) ~ 15배(고평가)")
                        
                        valuation_results['EV/EBITDA'] = evebitda_results
                    else:
                        st.error("재무 데이터를 가져올 수 없어 EV/EBITDA 평가를 수행할 수 없습니다.")
                
                # 4. 무형자산 가치 평가
                if "무형자산 가치 평가" in valuation_methods:
                    st.markdown("### 🧠 무형자산 가치 평가")
                    
                    intangible_result = estimate_intangible_asset_value(
                        r_and_d_cost=market_data['r_and_d_cost'],
                        patents_count=market_data['patents_count'],
                        trademarks_count=market_data['trademarks_count'],
                        technology_impact=market_data['technology_impact'],
                        market_size=market_data['market_size'],
                        market_share=market_data['market_share']
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**무형자산 가치 평가 결과:**")
                        st.write(f"• 원가법 기반: {intangible_result['cost_based_value']:,.0f}억원")
                        st.write(f"• 지적재산권 기반: {intangible_result['ip_value']:,.0f}억원")
                        st.write(f"• 시장 기반: {intangible_result['market_based_value']:,.0f}억원")
                        st.write(f"• **가중 평균: {intangible_result['weighted_value']:,.0f}억원**")
                    
                    with col2:
                        st.write("**평가 기준:**")
                        st.write(f"• R&D 투자: {market_data['r_and_d_cost']:,.0f}억원")
                        st.write(f"• 특허 수: {market_data['patents_count']}개")
                        st.write(f"• 상표권 수: {market_data['trademarks_count']}개")
                        st.write(f"• 기술 영향력: {market_data['technology_impact']*100:.0f}%")
                    
                    valuation_results['무형자산'] = intangible_result
                
                # 5. AI 멀티에이전트 분석
                if "AI 멀티에이전트 분석" in valuation_methods:
                    st.markdown("### 🤖 AI 멀티에이전트 가치 분석")
                    
                    # 에이전트 선택
                    active_agents = {
                        'financial_agent': st.checkbox("재무 전문가", value=True),
                        'market_agent': st.checkbox("시장 분석가", value=True),
                        'tech_agent': st.checkbox("기술 전문가", value=True),
                        'risk_agent': st.checkbox("리스크 관리자", value=True),
                        'strategy_agent': st.checkbox("전략 전문가", value=True),
                        'integration_agent': st.checkbox("통합 분석가", value=True)
                    }
                    
                    if st.button("🤖 AI 분석 실행", key="run_ai_analysis"):
                        with st.spinner("AI 멀티에이전트 분석을 수행하고 있습니다..."):
                            # OpenAI 클라이언트 초기화
                            openai = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                            
                            analysis_results = analyze_with_valuation_agents(
                                company_info, financial_data, market_data, active_agents
                            )
                            
                            if analysis_results:
                                st.success("✅ AI 멀티에이전트 분석 완료!")
                                
                                # 각 에이전트별 분석 결과 표시
                                for agent_type, result in analysis_results.items():
                                    if agent_type != 'integration_agent':
                                        with st.expander(f"🤖 {agent_type.replace('_', ' ').title()} 분석"):
                                            display_mermaid_chart(result['analysis'])
                                
                                # 통합 분석 결과
                                with st.expander("🎯 통합 분석 결과", expanded=True):
                                    integration_result = analysis_results.get('integration_agent', {})
                                    if integration_result:
                                        display_mermaid_chart(integration_result['analysis'])
                                
                                valuation_results['AI_멀티에이전트'] = analysis_results
                            else:
                                st.error("AI 분석 중 오류가 발생했습니다.")
                
                # 6. 산업별 비교 분석
                if "산업별 비교 분석" in valuation_methods:
                    st.markdown("### 🏭 산업별 비교 분석")
                    
                    industry = company_info.get('industry', '기타')
                    if financial_data and 'error' not in financial_data:
                        ebitda = financial_data.get('operating_profit', 100) + financial_data.get('depreciation', 20)
                        net_debt = financial_data.get('net_debt', 200)
                        current_multiple = 12  # 예시
                        growth_rate = financial_data.get('growth_rate', 0.05)
                        
                        industry_analysis = analyze_evebitda_valuation(
                            industry, ebitda, net_debt, current_multiple, growth_rate
                        )
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**산업별 분석 결과:**")
                            st.write(f"• 산업 중간값: {industry_analysis['industry_median']:.1f}배")
                            st.write(f"• 산업 범위: {industry_analysis['industry_range'][0]:.1f}~{industry_analysis['industry_range'][1]:.1f}배")
                            st.write(f"• 조정된 중간값: {industry_analysis['adjusted_median']:.1f}배")
                            st.write(f"• 평가: **{industry_analysis['assessment']}**")
                        
                        with col2:
                            st.write("**기업가치 범위:**")
                            st.write(f"• 최저: {industry_analysis['equity_values']['low']:,.0f}억원")
                            st.write(f"• 중간: {industry_analysis['equity_values']['median']:,.0f}억원")
                            st.write(f"• 최고: {industry_analysis['equity_values']['high']:,.0f}억원")
                        
                        st.write("**산업 설명:**")
                        st.write(industry_analysis['description'])
                        
                        valuation_results['산업별_비교'] = industry_analysis
                    else:
                        st.error("재무 데이터를 가져올 수 없어 산업별 비교 분석을 수행할 수 없습니다.")
                
                # 종합 평가 결과
                if valuation_results:
                    st.markdown("### 📊 종합 가치 평가 결과")
                    
                    # 평가 결과 요약
                    summary_data = []
                    for method, result in valuation_results.items():
                        if method == 'DCF':
                            summary_data.append({
                                '평가방법': method,
                                '가치': result['company_value'],
                                '단위': '억원'
                            })
                        elif method == 'PER':
                            # PER 중간값 사용
                            per_values = list(result.values())
                            summary_data.append({
                                '평가방법': method,
                                '가치': sum(per_values) / len(per_values),
                                '단위': '억원'
                            })
                        elif method == 'EV/EBITDA':
                            # EV/EBITDA 중간값 사용
                            equity_values = [r['equity_value'] for r in result.values()]
                            summary_data.append({
                                '평가방법': method,
                                '가치': sum(equity_values) / len(equity_values),
                                '단위': '억원'
                            })
                        elif method == '무형자산':
                            summary_data.append({
                                '평가방법': method,
                                '가치': result['weighted_value'],
                                '단위': '억원'
                            })
                    
                    if summary_data:
                        # 요약 차트 생성
                        import plotly.express as px
                        
                        df_summary = pd.DataFrame(summary_data)
                        fig = px.bar(df_summary, x='평가방법', y='가치', 
                                   title='가치 평가 방법별 비교',
                                   text=df_summary['가치'].apply(lambda x: f'{x:,.0f}억원'))
                        fig.update_traces(textposition='outside')
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # 평균 가치 계산
                        avg_value = df_summary['가치'].mean()
                        st.info(f"**평균 기업가치: {avg_value:,.0f}억원**")
                        
                        # 투자 권고
                        st.markdown("### 💡 투자 권고")
                        if avg_value > 1000:
                            st.success("**매수 권고** - 기업가치가 높게 평가됨")
                        elif avg_value > 500:
                            st.info("**보유 권고** - 적정 수준의 기업가치")
                        else:
                            st.warning("**매도 고려** - 상대적으로 낮은 기업가치")
                    
                    # 결과 저장 옵션
                    if st.button("💾 평가 결과 저장", key="save_valuation2"):
                        try:
                            success, analysis_id = save_valuation_analysis(
                                company_info, financial_data, market_data, 
                                valuation_results.get('AI_멀티에이전트', {}), valuation_results
                            )
                            if success:
                                # 세션 상태에 저장 성공 상태 저장
                                st.session_state['valuation_saved'] = True
                                st.session_state['valuation_analysis_id'] = analysis_id
                                st.session_state['valuation_save_timestamp'] = pd.Timestamp.now()
                                st.session_state['valuation_results'] = valuation_results
                                st.session_state['valuation_company_info'] = company_info
                                st.session_state['valuation_financial_data'] = financial_data
                                st.session_state['valuation_market_data'] = market_data
                                st.success(f"✅ 평가 결과가 저장되었습니다. (분석 ID: {analysis_id})")
                                st.rerun()  # 페이지 새로고침으로 상태 업데이트
                            else:
                                st.error("저장 중 오류가 발생했습니다.")
                        except Exception as e:
                            st.error(f"저장 중 오류: {str(e)}")
                    
                    # 저장 성공 상태 표시
                    if st.session_state.get('valuation_saved', False):
                        st.info(f"💾 이전에 저장된 분석 ID: {st.session_state.get('valuation_analysis_id', 'N/A')}")
                        if 'valuation_save_timestamp' in st.session_state:
                            st.caption(f"저장 시간: {st.session_state['valuation_save_timestamp']}")
                
                else:
                    st.warning("선택된 평가 방법이 없습니다.")
                
                # 5. AI 멀티에이전트 분석
                if "AI 멀티에이전트 분석" in valuation_methods:
                    st.markdown("### 🤖 AI 멀티에이전트 가치 분석")
                    
                    # 에이전트 선택
                    active_agents = {
                        'financial_agent': st.checkbox("재무 전문가", value=True),
                        'market_agent': st.checkbox("시장 분석가", value=True),
                        'tech_agent': st.checkbox("기술 전문가", value=True),
                        'risk_agent': st.checkbox("리스크 관리자", value=True),
                        'strategy_agent': st.checkbox("전략 전문가", value=True),
                        'integration_agent': st.checkbox("통합 분석가", value=True)
                    }
                    
                    if st.button("🤖 AI 분석 실행", key="run_ai_analysis"):
                        with st.spinner("AI 멀티에이전트 분석을 수행하고 있습니다..."):
                            # OpenAI 클라이언트 초기화
                            openai = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                            
                            analysis_results = analyze_with_valuation_agents(
                                company_info, financial_data, market_data, active_agents
                            )
                            
                            if analysis_results:
                                st.success("✅ AI 멀티에이전트 분석 완료!")
                                
                                # 각 에이전트별 분석 결과 표시
                                for agent_type, result in analysis_results.items():
                                    if agent_type != 'integration_agent':
                                        with st.expander(f"🤖 {agent_type.replace('_', ' ').title()} 분석"):
                                            display_mermaid_chart(result['analysis'])
                                
                                # 통합 분석 결과
                                with st.expander("🎯 통합 분석 결과", expanded=True):
                                    integration_result = analysis_results.get('integration_agent', {})
                                    if integration_result:
                                        display_mermaid_chart(integration_result['analysis'])
                                
                                valuation_results['AI_멀티에이전트'] = analysis_results
                            else:
                                st.error("AI 분석 중 오류가 발생했습니다.")
                
                # 6. 산업별 비교 분석
                if "산업별 비교 분석" in valuation_methods:
                    st.markdown("### 🏭 산업별 비교 분석")
                    
                    industry = company_info.get('industry', '기타')
                    if financial_data and 'error' not in financial_data:
                        ebitda = financial_data.get('operating_profit', 100) + financial_data.get('depreciation', 20)
                        net_debt = financial_data.get('net_debt', 200)
                        current_multiple = 12  # 예시
                        growth_rate = financial_data.get('growth_rate', 0.05)
                        
                        industry_analysis = analyze_evebitda_valuation(
                            industry, ebitda, net_debt, current_multiple, growth_rate
                        )
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**산업별 분석 결과:**")
                            st.write(f"• 산업 중간값: {industry_analysis['industry_median']:.1f}배")
                            st.write(f"• 산업 범위: {industry_analysis['industry_range'][0]:.1f}~{industry_analysis['industry_range'][1]:.1f}배")
                            st.write(f"• 조정된 중간값: {industry_analysis['adjusted_median']:.1f}배")
                            st.write(f"• 평가: **{industry_analysis['assessment']}**")
                        
                        with col2:
                            st.write("**기업가치 범위:**")
                            st.write(f"• 최저: {industry_analysis['equity_values']['low']:,.0f}억원")
                            st.write(f"• 중간: {industry_analysis['equity_values']['median']:,.0f}억원")
                            st.write(f"• 최고: {industry_analysis['equity_values']['high']:,.0f}억원")
                        
                        st.write("**산업 설명:**")
                        st.write(industry_analysis['description'])
                        
                        valuation_results['산업별_비교'] = industry_analysis
                    else:
                        st.error("재무 데이터를 가져올 수 없어 산업별 비교 분석을 수행할 수 없습니다.")
                
                # 종합 평가 결과
                if valuation_results:
                    st.markdown("### 📊 종합 가치 평가 결과")
                    
                    # 평가 결과 요약
                    summary_data = []
                    for method, result in valuation_results.items():
                        if method == 'DCF':
                            summary_data.append({
                                '평가방법': method,
                                '가치': result['company_value'],
                                '단위': '억원'
                            })
                        elif method == 'PER':
                            # PER 중간값 사용
                            per_values = list(result.values())
                            summary_data.append({
                                '평가방법': method,
                                '가치': sum(per_values) / len(per_values),
                                '단위': '억원'
                            })
                        elif method == 'EV/EBITDA':
                            # EV/EBITDA 중간값 사용
                            equity_values = [r['equity_value'] for r in result.values()]
                            summary_data.append({
                                '평가방법': method,
                                '가치': sum(equity_values) / len(equity_values),
                                '단위': '억원'
                            })
                        elif method == '무형자산':
                            summary_data.append({
                                '평가방법': method,
                                '가치': result['weighted_value'],
                                '단위': '억원'
                            })
                    
                    if summary_data:
                        # 요약 차트 생성
                        import plotly.express as px
                        
                        df_summary = pd.DataFrame(summary_data)
                        fig = px.bar(df_summary, x='평가방법', y='가치', 
                                   title='가치 평가 방법별 비교',
                                   text=df_summary['가치'].apply(lambda x: f'{x:,.0f}억원'))
                        fig.update_traces(textposition='outside')
                        st.plotly_chart(fig, use_container_width=True, key="valuation_summary_chart2")                        
                        # 평균 가치 계산
                        avg_value = df_summary['가치'].mean()
                        st.info(f"**평균 기업가치: {avg_value:,.0f}억원**")
                        
                        # 투자 권고
                        st.markdown("### 💡 투자 권고")
                        if avg_value > 1000:
                            st.success("**매수 권고** - 기업가치가 높게 평가됨")
                        elif avg_value > 500:
                            st.info("**보유 권고** - 적정 수준의 기업가치")
                        else:
                            st.warning("**매도 고려** - 상대적으로 낮은 기업가치")
                    
                    # 결과 저장 옵션
                    if st.button("💾 평가 결과 저장", key="save_valuation1"):
                        try:
                            success, analysis_id = save_valuation_analysis(
                                company_info, financial_data, market_data, 
                                valuation_results.get('AI_멀티에이전트', {}), valuation_results
                            )
                            if success:
                                # 세션 상태에 저장 성공 상태 저장
                                st.session_state['valuation_saved'] = True
                                st.session_state['valuation_analysis_id'] = analysis_id
                                st.session_state['valuation_save_timestamp'] = pd.Timestamp.now()
                                st.success(f"✅ 평가 결과가 저장되었습니다. (분석 ID: {analysis_id})")
                            else:
                                st.error("저장 중 오류가 발생했습니다.")
                        except Exception as e:
                            st.error(f"저장 중 오류: {str(e)}")
                    
                    # 저장 성공 상태 표시
                    if st.session_state.get('valuation_saved', False):
                        st.info(f"💾 이전에 저장된 분석 ID: {st.session_state.get('valuation_analysis_id', 'N/A')}")
                        if 'valuation_save_timestamp' in st.session_state:
                            st.caption(f"저장 시간: {st.session_state['valuation_save_timestamp']}")
                
                else:
                    st.warning("선택된 평가 방법이 없습니다.")