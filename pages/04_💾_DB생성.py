import streamlit as st
import mysql.connector
import os
from dotenv import load_dotenv
import pandas as pd
load_dotenv()

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="DB ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú ÏãúÏä§ÌÖú",
    page_icon="üíæ",
    layout="wide"
)

# Ïù∏Ï¶ù Í∏∞Îä• (Í∞ÑÎã®Ìïú ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥¥Ìò∏)
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    password = st.text_input("Í¥ÄÎ¶¨Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî", type="password")
    if password == os.getenv('ADMIN_PASSWORD', 'admin123'):  # ÌôòÍ≤Ω Î≥ÄÏàòÏóêÏÑú ÎπÑÎ∞ÄÎ≤àÌò∏ Í∞ÄÏ†∏Ïò§Í∏∞
        st.session_state.authenticated = True
        st.rerun()
    else:
        if password:  # ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûÖÎ†•Îêú Í≤ΩÏö∞ÏóêÎßå Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
            st.error("Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§")
        st.stop()

# MySQL Database configuration
db_config = {
    'user': os.getenv('SQL_USER'),
    'password': os.getenv('SQL_PASSWORD'),
    'host': os.getenv('SQL_HOST'),
    'database': os.getenv('SQL_DATABASE_NEWBIZ'),
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_general_ci'
}

def get_existing_tables():
    """Í∏∞Ï°¥ ÌÖåÏù¥Î∏î Î™©Î°ù Ï°∞Ìöå"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SHOW TABLES")
        tables = [table[0] for table in cursor.fetchall()]
        cursor.close()
        conn.close()
        return tables
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return []

def get_table_schema(table_name):
    """ÌÖåÏù¥Î∏î Ïä§ÌÇ§Îßà Ï°∞Ìöå"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute(f"DESCRIBE {table_name}")
        columns = cursor.fetchall()
        cursor.close()
        conn.close()
        return columns
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return []

def create_or_modify_table(table_name, columns, unique_keys):
    """ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÎòêÎäî ÏàòÏ†ï"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
        cursor.execute(f"SHOW TABLES LIKE '{table_name}'")
        table_exists = cursor.fetchone() is not None

        if table_exists:
            # Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÏàòÏ†ï
            for col_name, col_type, _ in columns:
                if col_name != 'id':
                    try:
                        # ÏπºÎüº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
                        cursor.execute(f"SHOW COLUMNS FROM {table_name} LIKE '{col_name}'")
                        column_exists = cursor.fetchone() is not None

                        if column_exists:
                            # Í∏∞Ï°¥ ÏπºÎüº ÏàòÏ†ï
                            cursor.execute(f"ALTER TABLE {table_name} MODIFY COLUMN {col_name} {col_type}")
                            st.info(f"ÏπºÎüº '{col_name}'Ïù¥(Í∞Ä) ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.")
                        else:
                            # ÏÉà ÏπºÎüº Ï∂îÍ∞Ä
                            cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {col_name} {col_type}")
                            st.info(f"ÏÉà ÏπºÎüº '{col_name}'Ïù¥(Í∞Ä) Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.")
                    except mysql.connector.Error as err:
                        st.error(f"ÏπºÎüº {col_name} Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {err}")
                        continue

            # Unique Key Ï≤òÎ¶¨
            if unique_keys:
                try:
                    # Í∏∞Ï°¥ unique key Ï†úÍ±∞ (PRIMARY Ï†úÏô∏)
                    cursor.execute(f"SHOW INDEX FROM {table_name}")
                    existing_indexes = cursor.fetchall()
                    for index in existing_indexes:
                        if index[2] != 'PRIMARY':
                            cursor.execute(f"DROP INDEX {index[2]} ON {table_name}")
                    
                    # ÏÉàÎ°úÏö¥ unique key Ï∂îÍ∞Ä
                    unique_columns = ", ".join(unique_keys)
                    cursor.execute(f"ALTER TABLE {table_name} ADD UNIQUE KEY unique_record ({unique_columns})")
                    st.info(f"Unique KeyÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§: {unique_columns}")
                except mysql.connector.Error as err:
                    st.error(f"Unique Key ÏÑ§Ï†ï Ï§ë Ïò§Î•ò Î∞úÏÉù: {err}")

        else:
            # ÏÉà ÌÖåÏù¥Î∏î ÏÉùÏÑ±
            create_query = f"""
            CREATE TABLE {table_name} (
                id INT AUTO_INCREMENT PRIMARY KEY,
                {', '.join([f"{col[0]} {col[1]}" for col in columns if col[0] != 'id'])}
            """
            if unique_keys:
                unique_columns = ", ".join(unique_keys)
                create_query += f", UNIQUE KEY unique_record ({unique_columns})"
            create_query += ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci"
            
            cursor.execute(create_query)
            st.success("ÏÉà ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.")

        conn.commit()
        cursor.close()
        conn.close()
        return True

    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return False

def delete_table(table_name):
    """ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # ÏÇ≠Ï†ú Ï†Ñ ÌôïÏù∏
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        
        if count > 0:
            st.warning(f"Ïù¥ ÌÖåÏù¥Î∏îÏóêÎäî {count}Í∞úÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§. Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
            if not st.button("Ïòà, ÏÇ≠Ï†úÌï©ÎãàÎã§"):
                return False
                
        cursor.execute(f"DROP TABLE {table_name}")
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return False

def get_table_data(table_name, search_term=None):
    """ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        
        if search_term:
            # ÌÖåÏù¥Î∏îÏùò Î™®Îì† Ïª¨Îüº Í∞ÄÏ†∏Ïò§Í∏∞
            cursor.execute(f"SHOW COLUMNS FROM {table_name}")
            columns = [column['Field'] for column in cursor.fetchall()]
            
            # Í∞Å Ïª¨ÎüºÏóê ÎåÄÌï¥ LIKE Í≤ÄÏÉâ Ï°∞Í±¥ ÏÉùÏÑ±
            search_conditions = " OR ".join([f"{col} LIKE '%{search_term}%'" for col in columns])
            query = f"SELECT * FROM {table_name} WHERE {search_conditions}"
        else:
            query = f"SELECT * FROM {table_name}"
            
        cursor.execute(query)
        data = cursor.fetchall()
        cursor.close()
        conn.close()
        return data
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return []

def create_vote_tables():
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vote_questions (
                question_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                multiple_choice BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                status ENUM('active', 'closed') DEFAULT 'active',
                created_by VARCHAR(50)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vote_options (
                option_id INT AUTO_INCREMENT PRIMARY KEY,
                question_id INT,
                option_text TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES vote_questions(question_id)
                ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vote_responses (
                response_id INT AUTO_INCREMENT PRIMARY KEY,
                question_id INT,
                option_id INT,
                voter_name VARCHAR(50),
                reasoning TEXT,
                voted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES vote_questions(question_id)
                ON DELETE CASCADE,
                FOREIGN KEY (option_id) REFERENCES vote_options(option_id)
                ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vote_llm_responses (
                response_id INT AUTO_INCREMENT PRIMARY KEY,
                question_id INT,
                option_id INT,
                llm_model VARCHAR(50),
                reasoning TEXT,
                weight INT DEFAULT 1,
                voted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES vote_questions(question_id)
                ON DELETE CASCADE,
                FOREIGN KEY (option_id) REFERENCES vote_options(option_id)
                ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê weight Ïª¨Îüº Ï∂îÍ∞Ä ÏãúÎèÑ
        try:
            cursor.execute("""
                ALTER TABLE vote_llm_responses
                ADD COLUMN weight INT DEFAULT 1
            """)
        except mysql.connector.Error as err:
            if err.errno == 1060:  # Duplicate column error
                pass  # Ïù¥ÎØ∏ Ïª¨ÎüºÏù¥ Ï°¥Ïû¨ÌïòÎ©¥ Î¨¥Ïãú
            else:
                raise err

        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê reasoning Ïª¨Îüº Ï∂îÍ∞Ä ÏãúÎèÑ
        try:
            cursor.execute("""
                ALTER TABLE vote_responses
                ADD COLUMN reasoning TEXT
            """)
        except mysql.connector.Error as err:
            if err.errno == 1060:  # Duplicate column error
                pass
            else:
                raise err

        conn.commit()
        st.success("Ìà¨Ìëú ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±/ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!")

    except mysql.connector.Error as err:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {err}")
    finally:
        cursor.close()
        conn.close()

def create_dot_collector_tables():
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # ÌöåÏùò/ÌÜ†ÌîΩ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_meetings (
                meeting_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                status ENUM('active', 'closed') DEFAULT 'active',
                created_by VARCHAR(50),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                closed_at DATETIME
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        # ÏÇ¨Ïö©Ïûê Ïã†Î¢∞ÎèÑ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_user_credibility (
                user_id INT AUTO_INCREMENT PRIMARY KEY,
                user_name VARCHAR(50) NOT NULL UNIQUE,
                credibility_score FLOAT DEFAULT 1.0,
                total_dots_given INT DEFAULT 0,
                total_dots_received INT DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        # ÏùòÍ≤¨/ÏïÑÏù¥ÎîîÏñ¥ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_ideas (
                idea_id INT AUTO_INCREMENT PRIMARY KEY,
                meeting_id INT,
                user_id INT,
                idea_text TEXT NOT NULL,
                category ENUM('suggestion', 'concern', 'question', 'other'),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (meeting_id) REFERENCES dot_meetings(meeting_id),
                FOREIGN KEY (user_id) REFERENCES dot_user_credibility(user_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        # ÌèâÍ∞Ä(dots) ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_ratings (
                rating_id INT AUTO_INCREMENT PRIMARY KEY,
                idea_id INT,
                rater_id INT,
                rating_type ENUM('agreement', 'feasibility', 'impact') NOT NULL,
                rating_value INT NOT NULL,  # 1-5 scale
                comment TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (idea_id) REFERENCES dot_ideas(idea_id),
                FOREIGN KEY (rater_id) REFERENCES dot_user_credibility(user_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        conn.commit()
        st.success("Dot Collector ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")

    except mysql.connector.Error as err:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {err}")
    finally:
        cursor.close()
        conn.close()

def create_dot_expertise_tables():
    """Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ÏÑ± Í¥ÄÎ¶¨Î•º ÏúÑÌïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Î∂ÑÏïº ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_expertise_areas (
                area_id INT PRIMARY KEY,
                area_code VARCHAR(20) NOT NULL UNIQUE,
                area_name VARCHAR(50) NOT NULL,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)
        
        # ÏÇ¨Ïö©ÏûêÎ≥Ñ Î∂ÑÏïº Ï†ÑÎ¨∏ÏÑ± ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_user_expertise (
                user_id INT,
                area_id INT,
                expertise_score FLOAT DEFAULT 1.0,
                total_ideas INT DEFAULT 0,
                total_ratings INT DEFAULT 0,
                successful_ratings INT DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, area_id),
                FOREIGN KEY (user_id) REFERENCES dot_user_credibility(user_id),
                FOREIGN KEY (area_id) REFERENCES dot_expertise_areas(area_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)
        
        # ÌöåÏùò-Î∂ÑÏïº Ïó∞Í≤∞ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dot_meeting_areas (
                meeting_id INT,
                area_id INT,
                is_primary BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (meeting_id, area_id),
                FOREIGN KEY (meeting_id) REFERENCES dot_meetings(meeting_id),
                FOREIGN KEY (area_id) REFERENCES dot_expertise_areas(area_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)
        
        # meetings ÌÖåÏù¥Î∏îÏóê area_id Ïª¨Îüº Ï∂îÍ∞Ä (ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨)
        try:
            # Ïª¨Îüº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
            cursor.execute("""
                SELECT COUNT(*) 
                FROM information_schema.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = 'dot_meetings' 
                AND COLUMN_NAME = 'primary_area_id'
            """)
            column_exists = cursor.fetchone()[0] > 0
            
            if not column_exists:
                # Ïª¨Îüº Ï∂îÍ∞Ä
                cursor.execute("""
                    ALTER TABLE dot_meetings
                    ADD COLUMN primary_area_id INT,
                    ADD FOREIGN KEY (primary_area_id) 
                    REFERENCES dot_expertise_areas(area_id)
                """)
        except mysql.connector.Error as err:
            st.warning(f"meetings ÌÖåÏù¥Î∏î ÏàòÏ†ï Ï§ë Ïò§Î•ò (Î¨¥Ïãú Í∞ÄÎä•): {err}")
        
        conn.commit()
        return True, "Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ÏÑ± Í¥ÄÎ¶¨ ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!"
    except mysql.connector.Error as err:
        return False, f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {err}"
    finally:
        cursor.close()
        conn.close()

def create_business_strategy_tables():
    """ÏÇ¨ÏóÖ Ï†ÑÎûµ Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # ÏÇ¨ÏóÖ Ï†ÑÎûµ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS business_strategies (
                strategy_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                industry VARCHAR(100),
                target_market VARCHAR(200),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                content TEXT,
                analysis_result TEXT,
                status ENUM('draft', 'completed', 'analyzed') DEFAULT 'draft'
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        # Ï†ÑÎûµ ÌèâÍ∞Ä ÌûàÏä§ÌÜ†Î¶¨ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS strategy_evaluations (
                evaluation_id INT AUTO_INCREMENT PRIMARY KEY,
                strategy_id INT,
                evaluation_type VARCHAR(50),
                score DECIMAL(3,1),
                feedback TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (strategy_id) REFERENCES business_strategies(strategy_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """)

        conn.commit()
        st.success("ÏÇ¨ÏóÖ Ï†ÑÎûµ ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")

    except mysql.connector.Error as err:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {err}")
    finally:
        cursor.close()
        conn.close()

def create_decision_tree_tables():
    """ÎπÑÏ¶àÎãàÏä§ ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_trees (
                tree_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                category VARCHAR(50),
                discount_rate DECIMAL(5,2),  -- Ìï†Ïù∏Ïú®
                analysis_period INT,         -- Î∂ÑÏÑùÍ∏∞Í∞Ñ(ÎÖÑ)
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÏùòÏÇ¨Í≤∞Ï†ï ÎÖ∏Îìú ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_nodes (
                node_id INT AUTO_INCREMENT PRIMARY KEY,
                tree_id INT NOT NULL,
                parent_id INT,
                node_type ENUM('decision', 'chance', 'outcome') NOT NULL,
                question TEXT NOT NULL,
                description TEXT,
                market_size DECIMAL(15,2),      -- ÏãúÏû• Í∑úÎ™®
                market_growth DECIMAL(5,2),      -- ÏãúÏû• ÏÑ±Ïû•Î•†
                competition_level INT,           -- Í≤ΩÏüÅ Í∞ïÎèÑ (1-5)
                risk_level INT,                  -- ÏúÑÌóòÎèÑ (1-5)
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (tree_id) REFERENCES decision_trees(tree_id),
                FOREIGN KEY (parent_id) REFERENCES decision_nodes(node_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÏÑ†ÌÉùÏßÄ/ÏãúÎÇòÎ¶¨Ïò§ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_options (
                option_id INT AUTO_INCREMENT PRIMARY KEY,
                node_id INT NOT NULL,
                option_text TEXT NOT NULL,
                initial_investment DECIMAL(15,2),  -- Ï¥àÍ∏∞ Ìà¨ÏûêÎπÑÏö©
                operating_cost DECIMAL(15,2),      -- Ïó∞Í∞Ñ Ïö¥ÏòÅÎπÑÏö©
                expected_revenue DECIMAL(15,2),    -- Ïó∞Í∞Ñ ÏòàÏÉÅ Îß§Ï∂ú
                market_share DECIMAL(5,2),         -- ÏòàÏÉÅ ÏãúÏû• Ï†êÏú†Ïú®
                probability DECIMAL(5,2),          -- Î∞úÏÉù ÌôïÎ•†
                npv DECIMAL(15,2),                -- ÏàúÌòÑÏû¨Í∞ÄÏπò
                roi DECIMAL(5,2),                 -- Ìà¨ÏûêÏàòÏùµÎ•†
                payback_period DECIMAL(5,2),      -- ÌöåÏàòÍ∏∞Í∞Ñ
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (node_id) REFERENCES decision_nodes(node_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ ÎπÑÏ¶àÎãàÏä§ ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def drop_decision_tree_tables():
    """ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥ÏúºÎ°ú Ïù∏Ìï¥ Ïó≠ÏàúÏúºÎ°ú ÏÇ≠Ï†ú
        cursor.execute("DROP TABLE IF EXISTS decision_options")
        cursor.execute("DROP TABLE IF EXISTS decision_nodes")
        cursor.execute("DROP TABLE IF EXISTS decision_trees")

        conn.commit()
        st.success("‚úÖ ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏îÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!")

    except mysql.connector.Error as err:
        st.error(f"ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {err}")
    finally:
        cursor.close()
        conn.close()

def create_strategy_framework_tables():
    """Ï†ÑÎûµ ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ÅÏö©ÏùÑ ÏúÑÌïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Ï†ÑÎûµ ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ÅÏö© ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS strategy_framework_applications (
                application_id INT AUTO_INCREMENT PRIMARY KEY,
                original_strategy TEXT NOT NULL,
                framework_id INT NOT NULL,
                modified_strategy TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by INT,
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)
        
        # Í≤ΩÏòÅ Ïù¥Î°† ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS management_theories (
                theory_id INT AUTO_INCREMENT PRIMARY KEY,
                category VARCHAR(100) NOT NULL,
                name VARCHAR(200) NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)
        
        # Í≤ΩÏòÅ Ïù¥Î°† Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
        cursor.execute("TRUNCATE TABLE management_theories")
        
        # Í≤ΩÏòÅ Ïù¥Î°† Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•
        theories_data = [
            # 1. Í≤ΩÏòÅ Ï†ÑÎûµ (Strategic Management)
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "SWOT Î∂ÑÏÑù", "Í∏∞ÏóÖÏùò ÎÇ¥Î∂Ä Í∞ïÏ†ê/ÏïΩÏ†êÍ≥º Ïô∏Î∂Ä Í∏∞Ìöå/ÏúÑÌòëÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ï†ÑÎûµÏùÑ ÏàòÎ¶ΩÌïòÎäî ÌîÑÎ†àÏûÑÏõåÌÅ¨"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "PESTEL Î∂ÑÏÑù", "Í±∞ÏãúÌôòÍ≤Ω Î∂ÑÏÑùÏùÑ ÏúÑÌïú Ï†ïÏπò, Í≤ΩÏ†ú, ÏÇ¨Ìöå, Í∏∞Ïà†, ÌôòÍ≤Ω, Î≤ïÎ•†Ï†Å ÏöîÏÜå Î∂ÑÏÑù"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "Ìè¨ÌÑ∞Ïùò 5Í∞ÄÏßÄ Ìûò Î∂ÑÏÑù", "ÏÇ∞ÏóÖÏùò Í≤ΩÏüÅ Íµ¨Ï°∞Î•º Î∂ÑÏÑùÌïòÎäî ÌîÑÎ†àÏûÑÏõåÌÅ¨"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "Î∏îÎ£®Ïò§ÏÖò Ï†ÑÎûµ", "Í≤ΩÏüÅÏù¥ ÏóÜÎäî ÏÉàÎ°úÏö¥ ÏãúÏû• Í≥µÍ∞ÑÏùÑ Ï∞ΩÏ∂úÌïòÎäî Ï†ÑÎûµ"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "Í≤ΩÏüÅ Ïö∞ÏúÑ", "ÏßÄÏÜç Í∞ÄÎä•Ìïú Í≤ΩÏüÅ Ïö∞ÏúÑÎ•º ÌôïÎ≥¥ÌïòÍ∏∞ ÏúÑÌïú Ï†ÑÎûµ"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "VRIO ÌîÑÎ†àÏûÑÏõåÌÅ¨", "ÏûêÏõêÏùò Í∞ÄÏπò, Ìù¨ÏÜåÏÑ±, Î™®Î∞© Í∞ÄÎä•ÏÑ±, Ï°∞ÏßÅÏùÑ Î∂ÑÏÑùÌïòÎäî ÌîÑÎ†àÏûÑÏõåÌÅ¨"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "Î∞∏Î•ò Ï≤¥Ïù∏ Î∂ÑÏÑù", "Í∏∞ÏóÖÏùò Í∞ÄÏπò Ï∞ΩÏ∂ú ÌôúÎèôÏùÑ Î∂ÑÏÑùÌïòÎäî ÌîÑÎ†àÏûÑÏõåÌÅ¨"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "Ï†ÑÎûµÏ†Å Í∑∏Î£π Î∂ÑÏÑù", "ÏÇ∞ÏóÖ ÎÇ¥ Ïú†ÏÇ¨Ìïú Ï†ÑÎûµÏùÑ Í∞ÄÏßÑ Í∏∞ÏóÖÎì§ÏùÑ Í∑∏Î£πÌôîÌïòÏó¨ Î∂ÑÏÑù"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "ÌïµÏã¨ Ïó≠Îüâ Ïù¥Î°†", "Í∏∞ÏóÖÏùò ÌïµÏã¨ Í≤ΩÏüÅÎ†•ÏùÑ ÏãùÎ≥ÑÌïòÍ≥† Í∞úÎ∞úÌïòÎäî Ïù¥Î°†"),
            ("Í≤ΩÏòÅ Ï†ÑÎûµ", "ÏãúÏû• ÏßÄÏúÑ Ïù¥Î°†", "ÏãúÏû•ÏóêÏÑúÏùò Ìè¨ÏßÄÏÖîÎãù Ï†ÑÎûµÏùÑ ÏàòÎ¶ΩÌïòÎäî Ïù¥Î°†"),
            
            # 2. Î¶¨ÎçîÏã≠ (Leadership)
            ("Î¶¨ÎçîÏã≠", "ÏÉÅÌô©Ï†Å Î¶¨ÎçîÏã≠ Ïù¥Î°†", "ÏÉÅÌô©Ïóê Îî∞Îùº Ï†ÅÏ†àÌïú Î¶¨ÎçîÏã≠ Ïä§ÌÉÄÏùºÏùÑ Ï†ÅÏö©ÌïòÎäî Ïù¥Î°†"),
            ("Î¶¨ÎçîÏã≠", "Î≥ÄÌòÅÏ†Å Î¶¨ÎçîÏã≠", "ÎπÑÏ†ÑÍ≥º Ïπ¥Î¶¨Ïä§ÎßàÎ°ú Ï°∞ÏßÅÏõêÎì§Ïùò Î≥ÄÌôîÎ•º Ïù¥ÎÅÑÎäî Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "Í±∞ÎûòÏ†Å Î¶¨ÎçîÏã≠", "Î≥¥ÏÉÅÍ≥º Ï≤òÎ≤åÏùÑ ÌÜµÌïú ÏÑ±Í≥º Í¥ÄÎ¶¨ Ï§ëÏã¨Ïùò Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "Ïπ¥Î¶¨Ïä§Îßà Î¶¨ÎçîÏã≠", "Í∞úÏù∏Ïùò ÌäπÎ≥ÑÌïú ÏòÅÌñ•Î†•ÏùÑ ÌÜµÌïú Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "ÏÑúÎ≤àÌä∏ Î¶¨ÎçîÏã≠", "Íµ¨ÏÑ±ÏõêÏùÑ ÏÑ¨Í∏∞Í≥† ÏßÄÏõêÌïòÎäî Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "Í∂åÎ†•Í≥º ÏòÅÌñ•Î†• Ïù¥Î°†", "Ï°∞ÏßÅ ÎÇ¥ Í∂åÎ†• Íµ¨Ï°∞ÏôÄ ÏòÅÌñ•Î†• ÌñâÏÇ¨ Î∞©Ïãù"),
            ("Î¶¨ÎçîÏã≠", "Î¶¨ÎçîÏã≠ Í∑∏Î¶¨Îìú Ïù¥Î°†", "Í≥ºÏóÖÍ≥º Í¥ÄÍ≥Ñ Ï§ëÏã¨Ïùò Î¶¨ÎçîÏã≠ Ïä§ÌÉÄÏùº Îß§Ìä∏Î¶≠Ïä§"),
            ("Î¶¨ÎçîÏã≠", "Í∞êÏÑ± Î¶¨ÎçîÏã≠", "Í∞êÏÑ± ÏßÄÎä•ÏùÑ ÌôúÏö©Ìïú Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "Ïú†Î™© Î¶¨ÎçîÏã≠", "Ïú†Ïó∞ÌïòÍ≥† Ï†ÅÏùëÏ†ÅÏù∏ Î¶¨ÎçîÏã≠"),
            ("Î¶¨ÎçîÏã≠", "Ïú§Î¶¨Ï†Å Î¶¨ÎçîÏã≠", "ÎèÑÎçïÏÑ±Í≥º Ïú§Î¶¨Î•º Ï§ëÏãúÌïòÎäî Î¶¨ÎçîÏã≠"),
            
            # 3. Ï°∞ÏßÅ Í¥ÄÎ¶¨ (Organizational Management)
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Ï°∞ÏßÅ ÌñâÎèô Ïù¥Î°†", "Ï°∞ÏßÅ ÎÇ¥ Í∞úÏù∏Í≥º Í∑∏Î£πÏùò ÌñâÎèôÏùÑ Ïù¥Ìï¥ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Îß•Í∑∏Î¶¨Í±∞Ïùò XY Ïù¥Î°†", "Ïù∏Í∞ÑÏùò Î≥∏ÏÑ±Ïóê ÎåÄÌïú Îëê Í∞ÄÏßÄ ÏÉÅÎ∞òÎêú Í¥ÄÏ†êÏùÑ ÌÜµÌïú Í¥ÄÎ¶¨ Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Ï°∞ÏßÅ Î¨∏Ìôî Ïù¥Î°†", "Ï°∞ÏßÅÏùò Í∞ÄÏπò, Ïã†ÎÖê, ÌñâÎèô ÏñëÏãùÏùÑ Ïù¥Ìï¥ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "ÌôÄÏùò Î¨∏Ìôî Ï∞®Ïõê Ïù¥Î°†", "Î¨∏ÌôîÏ†Å Ï∞®Ïù¥Í∞Ä Ï°∞ÏßÅÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ Î∂ÑÏÑùÌïòÎäî Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Î¶¨Îçî-Íµ¨ÏÑ±Ïõê ÍµêÌôò Ïù¥Î°†", "Î¶¨ÎçîÏôÄ Íµ¨ÏÑ±Ïõê Í∞ÑÏùò Í¥ÄÍ≥Ñ ÌíàÏßàÏóê Í¥ÄÌïú Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "ÌïôÏäµ Ï°∞ÏßÅ", "ÏßÄÏÜçÏ†ÅÏù∏ ÌïôÏäµÍ≥º ÌòÅÏã†ÏùÑ Ï∂îÍµ¨ÌïòÎäî Ï°∞ÏßÅ Î™®Îç∏"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "ÏïÑÏßÄÎ¶¨Ïä§Ïùò ÏÑ±Ïàô-ÎØ∏ÏÑ±Ïàô Ïù¥Î°†", "Í∞úÏù∏Ïùò ÏÑ±Ïû•Í≥º Ï°∞ÏßÅ Î∞úÏ†ÑÏùò Í¥ÄÍ≥ÑÎ•º ÏÑ§Î™ÖÌïòÎäî Ïù¥Î°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Ï°∞ÏßÅ ÎÇ¥ Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïù¥Î°†", "Ï°∞ÏßÅ ÎÇ¥ Ìö®Í≥ºÏ†ÅÏù∏ ÏùòÏÇ¨ÏÜåÌÜµ Î∞©Î≤ïÎ°†"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "ÏßÅÎ¨¥ ÏÑ§Í≥Ñ Ïù¥Î°†", "Ìö®Ïú®Ï†ÅÏù∏ ÏßÅÎ¨¥ Íµ¨Ï°∞ÌôîÏôÄ ÏÑ§Í≥Ñ Î∞©Î≤ï"),
            ("Ï°∞ÏßÅ Í¥ÄÎ¶¨", "Í≤ΩÏòÅÌòÅÏã† Ïù¥Î°†", "Ï°∞ÏßÅÏùò ÌòÅÏã†Ï†Å Î≥ÄÌôî Í¥ÄÎ¶¨ Î∞©Î≤ïÎ°†"),
            
            # 4. ÎßàÏºÄÌåÖ (Marketing)
            ("ÎßàÏºÄÌåÖ", "4P ÎßàÏºÄÌåÖ ÎØπÏä§", "Ï†úÌíà, Í∞ÄÍ≤©, Ïú†ÌÜµ, Ï¥âÏßÑÏùò ÌÜµÌï©Ï†Å ÎßàÏºÄÌåÖ Ï†ÑÎûµ"),
            ("ÎßàÏºÄÌåÖ", "STP Ï†ÑÎûµ", "ÏãúÏû• ÏÑ∏Î∂ÑÌôî, ÌÉÄÍ≤üÌåÖ, Ìè¨ÏßÄÏÖîÎãùÏùò Ï†ÑÎûµÏ†Å Ï†ëÍ∑º"),
            ("ÎßàÏºÄÌåÖ", "Í≥†Í∞ù Ïó¨Ï†ï ÏßÄÎèÑ", "Í≥†Í∞ù Í≤ΩÌóòÏùò Ï†ÑÏ≤¥ Í≥ºÏ†ïÏùÑ ÏãúÍ∞ÅÌôîÌïòÍ≥† Î∂ÑÏÑùÌïòÎäî ÎèÑÍµ¨"),
            ("ÎßàÏºÄÌåÖ", "Î∏åÎûúÎìú ÏûêÏÇ∞ Ïù¥Î°†", "Î∏åÎûúÎìúÏùò Í∞ÄÏπòÏôÄ ÏòÅÌñ•Î†•ÏùÑ Ï∏°Ï†ïÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Ïù¥Î°†"),
            ("ÎßàÏºÄÌåÖ", "ÌçºÎØ∏ÏÖò ÎßàÏºÄÌåÖ", "Í≥†Í∞ùÏùò ÎèôÏùòÎ•º Í∏∞Î∞òÏúºÎ°ú ÌïòÎäî ÎßàÏºÄÌåÖ Ï†ëÍ∑ºÎ≤ï"),
            ("ÎßàÏºÄÌåÖ", "Í¥ÄÍ≥Ñ ÎßàÏºÄÌåÖ", "Í≥†Í∞ùÍ≥ºÏùò Ïû•Í∏∞Ï†Å Í¥ÄÍ≥Ñ Íµ¨Ï∂ïÏùÑ Ï§ëÏãúÌïòÎäî ÎßàÏºÄÌåÖ"),
            ("ÎßàÏºÄÌåÖ", "Ï†úÌíà ÏàòÎ™Ö Ï£ºÍ∏∞ Ïù¥Î°†", "Ï†úÌíàÏùò ÏãúÏû• ÏßÑÏûÖÎ∂ÄÌÑ∞ Ïá†Ìá¥ÍπåÏßÄÏùò Îã®Í≥ÑÎ≥Ñ Ï†ÑÎûµ"),
            ("ÎßàÏºÄÌåÖ", "ÏΩòÌÖêÏ∏† ÎßàÏºÄÌåÖ Ï†ÑÎûµ", "Í∞ÄÏπò ÏûàÎäî ÏΩòÌÖêÏ∏†Î•º ÌÜµÌïú Í≥†Í∞ù ÌôïÎ≥¥ Ï†ÑÎûµ"),
            ("ÎßàÏºÄÌåÖ", "Ï∂©ÏÑ±ÎèÑ ÌîÑÎ°úÍ∑∏Îû® Ïù¥Î°†", "Í≥†Í∞ù Ï∂©ÏÑ±ÎèÑ Ìñ•ÏÉÅÏùÑ ÏúÑÌïú ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Í≥Ñ"),
            ("ÎßàÏºÄÌåÖ", "Íµ¨Ï†Ñ ÎßàÏºÄÌåÖ", "Í≥†Í∞ù Í∞Ñ ÏûêÎ∞úÏ†Å Ï†ïÎ≥¥ Ï†ÑÌååÎ•º ÌôúÏö©Ìïú ÎßàÏºÄÌåÖ"),
            
            # 5. Ïö¥ÏòÅ Í¥ÄÎ¶¨ (Operations Management)
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "Î¶∞ ÏÉùÏÇ∞ Î∞©Ïãù", "ÎÇ≠ÎπÑÎ•º Ï†úÍ±∞ÌïòÍ≥† Í∞ÄÏπòÎ•º ÏµúÏ†ÅÌôîÌïòÎäî ÏÉùÏÇ∞ Î∞©Ïãù"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ÏãùÏä§ ÏãúÍ∑∏Îßà", "ÌíàÏßà Ìñ•ÏÉÅÍ≥º Î≥ÄÎèôÏÑ± Í∞êÏÜåÎ•º ÏúÑÌïú Ï≤¥Í≥ÑÏ†Å Ï†ëÍ∑º"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "Ïπ∏Î∞ò ÏãúÏä§ÌÖú", "ÏûëÏóÖ ÌùêÎ¶ÑÏùÑ ÏãúÍ∞ÅÌôîÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî ÏãúÏä§ÌÖú"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ÌíàÏßà Í¥ÄÎ¶¨ Ïù¥Î°†", "Ï†ÑÏÇ¨Ï†Å ÌíàÏßà Í¥ÄÎ¶¨Î•º ÏúÑÌïú Ï¢ÖÌï©Ï†Å Ï†ëÍ∑º"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "Ï†úÏïΩ Ïù¥Î°†", "ÏãúÏä§ÌÖúÏùò Ï†úÏïΩÏöîÏÜåÎ•º Í¥ÄÎ¶¨ÌïòÏó¨ ÏÑ±Í≥ºÎ•º Í∞úÏÑ†ÌïòÎäî Ïù¥Î°†"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ÏßÄÏÜç Í∞ÄÎä•ÏÑ± Ïö¥ÏòÅ", "ÌôòÍ≤ΩÍ≥º ÏÇ¨ÌöåÎ•º Í≥†Î†§Ìïú ÏßÄÏÜç Í∞ÄÎä•Ìïú Ïö¥ÏòÅ Î∞©Ïãù"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "Ï†ÅÏãúÏÉùÏÇ∞", "Ïû¨Í≥†Î•º ÏµúÏÜåÌôîÌïòÍ≥† ÏÉùÏÇ∞ Ìö®Ïú®ÏùÑ ÎÜíÏù¥Îäî ÏãúÏä§ÌÖú"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "Í≥µÍ∏âÎßù Í¥ÄÎ¶¨", "Í≥µÍ∏âÎßù Ï†ÑÏ≤¥Ïùò Ìö®Ïú®ÏÑ±ÏùÑ ÏµúÏ†ÅÌôîÌïòÎäî Í¥ÄÎ¶¨ Î∞©Ïãù"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ERP ÏãúÏä§ÌÖú", "Í∏∞ÏóÖ ÏûêÏõêÏùÑ ÌÜµÌï©Ï†ÅÏúºÎ°ú Í¥ÄÎ¶¨ÌïòÎäî ÏãúÏä§ÌÖú"),
            ("Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ÏÑúÎπÑÏä§ Ïö¥ÏòÅ Í¥ÄÎ¶¨", "ÏÑúÎπÑÏä§ Ï†úÍ≥µ ÌîÑÎ°úÏÑ∏Ïä§Ïùò Ìö®Ïú®Ï†Å Í¥ÄÎ¶¨"),
            
            # 6. ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ± (Innovation & Creativity)
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "Í∞úÎ∞©Ìòï ÌòÅÏã†", "Ïô∏Î∂Ä ÏûêÏõêÏùÑ ÌôúÏö©Ìïú ÌòÅÏã† Ï†ÑÎûµ"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÌååÍ¥¥Ï†Å ÌòÅÏã†", "Í∏∞Ï°¥ ÏãúÏû•ÏùÑ Í∑ºÎ≥∏Ï†ÅÏúºÎ°ú Î≥ÄÌôîÏãúÌÇ§Îäî ÌòÅÏã†"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÌòÅÏã† ÌôïÏÇ∞ Ïù¥Î°†", "ÌòÅÏã†Ïù¥ ÏÇ¨ÌöåÏóê ÌçºÏ†∏ÎÇòÍ∞ÄÎäî Í≥ºÏ†ïÏùÑ ÏÑ§Î™ÖÌïòÎäî Ïù¥Î°†"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÏÑ§Í≥Ñ ÏÇ¨Í≥†", "ÏÇ¨Ïö©Ïûê Ï§ëÏã¨Ïùò Î¨∏Ï†ú Ìï¥Í≤∞ Î∞©Î≤ïÎ°†"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "Í∏∞Ïà† ÏàòÎ™Ö Ï£ºÍ∏∞ Ïù¥Î°†", "Í∏∞Ïà†Ïùò Î∞úÏ†ÑÍ≥º Ïá†Ìá¥ Í≥ºÏ†ïÏùÑ ÏÑ§Î™ÖÌïòÎäî Ïù¥Î°†"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÏÇºÏ§ë ÎÇòÏÑ† Î™®Îç∏", "ÏÇ∞ÌïôÏó∞ ÌòëÎ†•ÏùÑ ÌÜµÌïú ÌòÅÏã† Ï∞ΩÏ∂ú Î™®Îç∏"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÌÅ¥Î†àÏù¥Ìäº ÌÅ¨Î¶¨Ïä§ÌÖêÏä®Ïùò ÌòÅÏã† Ïù¥Î°†", "ÏßÄÏÜçÏ†Å/ÌååÍ¥¥Ï†Å ÌòÅÏã†Ïùò ÌäπÏÑ±Í≥º ÏòÅÌñ•"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "Ï∞ΩÏùòÏÑ±Ïùò 5Îã®Í≥Ñ Ïù¥Î°†", "Ï∞ΩÏùòÏ†Å Î¨∏Ï†ú Ìï¥Í≤∞Ïùò Îã®Í≥ÑÎ≥Ñ Ï†ëÍ∑º"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "Ïù¥ÎÖ∏Î≤†Ïù¥ÏÖò ÌÇ∑Ï∫£ Î™®Îç∏", "ÌòÅÏã†Ïùò Îã®Í≥ÑÏ†Å Ïã§Ìñâ Î∞©Î≤ïÎ°†"),
            ("ÌòÅÏã†Í≥º Ï∞ΩÏùòÏÑ±", "ÌòÅÏã† ÏÉùÌÉúÍ≥Ñ Ïù¥Î°†", "ÌòÅÏã† Ï£ºÏ≤¥Îì§ Í∞ÑÏùò ÏÉÅÌò∏ÏûëÏö©Í≥º Î∞úÏ†Ñ Í≥ºÏ†ï"),
            
            # 7. Ïû¨Î¨¥ Í¥ÄÎ¶¨ (Financial Management)
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "EVA", "Í∏∞ÏóÖÏùò Ïã§ÏßàÏ†ÅÏù∏ Í≤ΩÏ†úÏ†Å Î∂ÄÍ∞ÄÍ∞ÄÏπò Ï∏°Ï†ï"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "ÏûêÎ≥∏ ÎπÑÏö© Ïù¥Î°†", "ÏûêÎ≥∏ Ï°∞Îã¨ ÎπÑÏö©Ïùò ÏµúÏ†ÅÌôî Î∞©Ïïà"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "ÏûêÎ≥∏ Íµ¨Ï°∞ Ïù¥Î°†", "Î∂ÄÏ±ÑÏôÄ ÏûêÍ∏∞ÏûêÎ≥∏Ïùò ÏµúÏ†Å ÎπÑÏú® Í≤∞Ï†ï"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "ÌòÑÍ∏à ÌùêÎ¶Ñ Î∂ÑÏÑù", "Í∏∞ÏóÖÏùò ÌòÑÍ∏à Ïú†ÏûÖÍ≥º Ïú†Ï∂ú Í¥ÄÎ¶¨"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "Í∏∞ÏóÖÍ∞ÄÏπò ÌèâÍ∞Ä", "Í∏∞ÏóÖÏùò Ïã§Ïßà Í∞ÄÏπò ÏÇ∞Ï†ï Î∞©Î≤ï"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "Ìö®Ïú®Ï†Å ÏãúÏû• Í∞ÄÏÑ§", "ÏãúÏû• Í∞ÄÍ≤©Ïùò Ï†ïÎ≥¥ Î∞òÏòÅ Ìö®Ïú®ÏÑ±"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "Ìà¨Ïûê Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ïù¥Î°†", "ÏúÑÌóòÍ≥º ÏàòÏùµÏùò ÏµúÏ†Å Í∑†Ìòï Îã¨ÏÑ±"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "Ïû¨Î¨¥ÎπÑÏú® Î∂ÑÏÑù", "Í∏∞ÏóÖÏùò Ïû¨Î¨¥ ÏÉÅÌÉúÏôÄ ÏÑ±Í≥º ÌèâÍ∞Ä"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "ÏúÑÌóò Í¥ÄÎ¶¨ Ïù¥Î°†", "Ïû¨Î¨¥Ï†Å ÏúÑÌóòÏùò ÏãùÎ≥ÑÍ≥º Í¥ÄÎ¶¨"),
            ("Ïû¨Î¨¥ Í¥ÄÎ¶¨", "M&A Ï†ÑÎûµ", "Í∏∞ÏóÖ Ïù∏ÏàòÌï©Î≥ëÏùò Ï†ÑÎûµÏ†Å Ï†ëÍ∑º"),
            
            # 8. Ïù∏ÏÇ¨ Í¥ÄÎ¶¨ (Human Resources Management)
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÏßÅÎ¨¥ ÎßåÏ°± Ïù¥Î°†", "ÏßÅÏõêÏùò ÏßÅÎ¨¥ ÎßåÏ°±ÎèÑ Ìñ•ÏÉÅ Î∞©Ïïà"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "Ïù∏Ïû¨ Í¥ÄÎ¶¨", "ÌïµÏã¨ Ïù∏Ïû¨Ïùò ÌôïÎ≥¥ÏôÄ Ïú°ÏÑ± Ï†ÑÎûµ"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÎèôÍ∏∞ Î∂ÄÏó¨ Ïù¥Î°†", "ÏßÅÏõêÏùò ÎèôÍ∏∞ Î∂ÄÏó¨ Î©îÏª§ÎãàÏ¶ò"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "Í≥µÏ†ïÏÑ± Ïù¥Î°†", "Ï°∞ÏßÅ ÎÇ¥ Í≥µÏ†ïÏÑ± Ïù∏ÏãùÍ≥º ÏòÅÌñ•"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "Î™©Ìëú ÏÑ§Ï†ï Ïù¥Î°†", "Ìö®Í≥ºÏ†ÅÏù∏ Î™©Ìëú ÏÑ§Ï†ïÍ≥º ÏÑ±Í≥º Í¥ÄÎ¶¨"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÏÇ¨ÌöåÏ†Å ÍµêÌôò Ïù¥Î°†", "Ï°∞ÏßÅÍ≥º Íµ¨ÏÑ±Ïõê Í∞ÑÏùò ÏÉÅÌò∏ Ìò∏ÌòúÏ†Å Í¥ÄÍ≥Ñ"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÏßÅÎ¨¥ Î∂ÑÏÑù Ïù¥Î°†", "ÏßÅÎ¨¥Ïùò Ï≤¥Í≥ÑÏ†Å Î∂ÑÏÑùÍ≥º ÏÑ§Í≥Ñ"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÏÑ±Í≥º ÌèâÍ∞Ä Ïù¥Î°†", "Í≥µÏ†ïÌïòÍ≥† Ìö®Í≥ºÏ†ÅÏù∏ ÏÑ±Í≥º ÌèâÍ∞Ä Î∞©Î≤ï"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "ÌåÄ Îã§Ïù¥ÎÇ¥ÎØπÏä§", "ÌåÄÏùò ÌòïÏÑ±Í≥º Î∞úÏ†Ñ Í≥ºÏ†ï"),
            ("Ïù∏ÏÇ¨ Í¥ÄÎ¶¨", "Ïù∏Ïû¨ Ïú†ÏßÄ Ï†ÑÎûµ", "ÌïµÏã¨ Ïù∏Ïû¨Ïùò Ïù¥ÌÉà Î∞©ÏßÄ Ï†ÑÎûµ"),
            
            # 9. Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú (Management Information Systems)
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "Ï†ïÎ≥¥ ÏãúÏä§ÌÖú Ï†ÑÎûµ", "IT ÏûêÏõêÏùò Ï†ÑÎûµÏ†Å ÌôúÏö© Î∞©Ïïà"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù", "ÎåÄÍ∑úÎ™® Îç∞Ïù¥ÌÑ∞Ïùò Î∂ÑÏÑùÍ≥º ÌôúÏö©"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "ÎîîÏßÄÌÑ∏ Ï†ÑÌôò Ï†ÑÎûµ", "ÎîîÏßÄÌÑ∏ Í∏∞Ïà†ÏùÑ ÌÜµÌïú ÎπÑÏ¶àÎãàÏä§ ÌòÅÏã†"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "ÌÅ¥ÎùºÏö∞Îìú Ïª¥Ìì®ÌåÖ", "ÌÅ¥ÎùºÏö∞Îìú Í∏∞Î∞òÏùò IT Ïù∏ÌîÑÎùº Íµ¨Ï∂ï"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "ERP ÏãúÏä§ÌÖú Ïù¥Î°†", "Ï†ÑÏÇ¨Ï†Å ÏûêÏõê Í¥ÄÎ¶¨ ÏãúÏä§ÌÖúÏùò Íµ¨Ï∂ïÍ≥º Ïö¥ÏòÅ"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "Îç∞Ïù¥ÌÑ∞ Í±∞Î≤ÑÎÑåÏä§", "Îç∞Ïù¥ÌÑ∞Ïùò ÌíàÏßàÍ≥º Î≥¥Ïïà Í¥ÄÎ¶¨"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "IoT Í≤ΩÏòÅ Ïù¥Î°†", "ÏÇ¨Î¨ºÏù∏ÌÑ∞ÎÑ∑Ïùò ÎπÑÏ¶àÎãàÏä§ ÌôúÏö©"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "Î∏îÎ°ùÏ≤¥Ïù∏ ÏùëÏö©", "Î∏îÎ°ùÏ≤¥Ïù∏ Í∏∞Ïà†Ïùò ÎπÑÏ¶àÎãàÏä§ Ï†ÅÏö©"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "ÏÇ¨Ïù¥Î≤Ñ Î≥¥Ïïà Í¥ÄÎ¶¨", "Ï†ïÎ≥¥ Î≥¥Ïïà ÏúÑÌóòÏùò Í¥ÄÎ¶¨"),
            ("Í≤ΩÏòÅ Ï†ïÎ≥¥ ÏãúÏä§ÌÖú", "AI Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ï ÏãúÏä§ÌÖú", "Ïù∏Í≥µÏßÄÎä•ÏùÑ ÌôúÏö©Ìïú ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê"),
            
            # 10. Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "Î≥ÄÌôî Í¥ÄÎ¶¨ Ïù¥Î°†", "Ï°∞ÏßÅ Î≥ÄÌôîÏùò Ìö®Í≥ºÏ†Å Í¥ÄÎ¶¨"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "Í≥µÏú† Í∞ÄÏπò Ï∞ΩÏ∂ú", "ÏÇ¨ÌöåÏ†Å Í∞ÄÏπòÏôÄ Í≤ΩÏ†úÏ†Å Í∞ÄÏπòÏùò ÎèôÏãú Ï∂îÍµ¨"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "ÏÇ¨ÌöåÏ†Å Ï±ÖÏûÑ Í≤ΩÏòÅ", "Í∏∞ÏóÖÏùò ÏÇ¨ÌöåÏ†Å Ï±ÖÏûÑÍ≥º ÏßÄÏÜçÍ∞ÄÎä•ÏÑ±"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "ÏßÄÏÜç Í∞ÄÎä•ÏÑ± Î™®Îç∏", "Í≤ΩÏ†ú, ÏÇ¨Ìöå, ÌôòÍ≤ΩÏùò Í∑†ÌòïÏ†Å Î∞úÏ†Ñ"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "ÏïÑÏßÄÎÖ∏Î™®ÌÜ† Ïù¥Î°†", "ÌíàÏßàÍ≥º Í∞ÄÏπòÏùò ÏµúÏ†Å Í∑†ÌòïÏ†ê ÎèÑÏ∂ú"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "ÎπÑÏ¶àÎãàÏä§ Ïú§Î¶¨ Ïù¥Î°†", "Ïú§Î¶¨Ï†Å ÏùòÏÇ¨Í≤∞Ï†ïÍ≥º Í≤ΩÏòÅ"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "Ïπ¥Ïù¥Ï†† Ïù¥Î°†", "ÏßÄÏÜçÏ†ÅÏù∏ Í∞úÏÑ†Í≥º ÌòÅÏã†"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "Í∑†ÌòïÏÑ±Í≥ºÌëú", "Îã§Ï∞®ÏõêÏ†Å ÏÑ±Í≥º Ï∏°Ï†ïÍ≥º Í¥ÄÎ¶¨"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "ÌôÄÎùºÌÅ¨ÎùºÏãú", "ÏûêÏú®Ï†ÅÏù¥Í≥† Î∂ÑÏÇ∞Îêú Ï°∞ÏßÅ Íµ¨Ï°∞"),
            ("Í∏∞ÌÉÄ Í≤ΩÏòÅ Ïù¥Î°†", "Ïä§ÌÖåÏù¥ÌÅ¨ÌôÄÎçî Ïù¥Î°†", "Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûê Ï§ëÏã¨Ïùò Í≤ΩÏòÅ Ï†ëÍ∑º")
        ]
        
        cursor.executemany("""
            INSERT INTO management_theories (category, name, description)
            VALUES (%s, %s, %s)
        """, theories_data)
        
        conn.commit()
        st.success("‚úÖ Ï†ÑÎûµ ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÍ≥† 100Í∞úÏùò Í≤ΩÏòÅ Ïù¥Î°†Ïù¥ ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_business_model_canvas_tables():
    """Business Model Canvas ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Business Model Canvas Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS business_model_canvas (
                canvas_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                version INT DEFAULT 1,
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Canvas Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS canvas_components (
                component_id INT AUTO_INCREMENT PRIMARY KEY,
                canvas_id INT NOT NULL,
                component_type ENUM(
                    'key_partners',
                    'key_activities',
                    'key_resources',
                    'value_propositions',
                    'customer_relationships',
                    'channels',
                    'customer_segments',
                    'cost_structure',
                    'revenue_streams'
                ) NOT NULL,
                content TEXT NOT NULL,
                priority INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (canvas_id) REFERENCES business_model_canvas(canvas_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Canvas Î∂ÑÏÑù Î∞è ÏΩîÎ©òÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS canvas_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                canvas_id INT NOT NULL,
                analysis_type ENUM('strength', 'weakness', 'opportunity', 'threat', 'comment') NOT NULL,
                content TEXT NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (canvas_id) REFERENCES business_model_canvas(canvas_id) ON DELETE CASCADE,
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Business Model Canvas ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_swot_analysis_tables():
    """SWOT Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # SWOT Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS swot_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                version INT DEFAULT 1,
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # SWOT Ìï≠Î™© ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS swot_items (
                item_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                category ENUM('strength', 'weakness', 'opportunity', 'threat') NOT NULL,
                content TEXT NOT NULL,
                priority INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES swot_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ SWOT Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_marketing_mix_tables():
    """4P/7P Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # 4P/7P Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS marketing_mix_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                analysis_type ENUM('4P', '7P') NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # 4P/7P Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS marketing_mix_components (
                component_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                component_type ENUM(
                    'product',
                    'price',
                    'place',
                    'promotion',
                    'people',
                    'process',
                    'physical_evidence'
                ) NOT NULL,
                content TEXT NOT NULL,
                priority INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES marketing_mix_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ 4P/7P Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_pestel_analysis_tables():
    """PEST/PESTEL Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # PESTEL Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS pestel_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                analysis_type ENUM('PEST', 'PESTEL') NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # PESTEL Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS pestel_components (
                component_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                component_type ENUM(
                    'political',
                    'economic',
                    'social',
                    'technological',
                    'environmental',
                    'legal'
                ) NOT NULL,
                content TEXT NOT NULL,
                impact_level ENUM('high', 'medium', 'low') DEFAULT 'medium',
                trend ENUM('increasing', 'stable', 'decreasing') DEFAULT 'stable',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES pestel_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ PEST/PESTEL Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_five_forces_tables():
    """Porter's 5 Forces Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # 5 Forces Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS five_forces_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # 5 Forces Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS five_forces_components (
                component_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                component_type ENUM(
                    'rivalry',
                    'new_entrants',
                    'substitutes',
                    'buyer_power',
                    'supplier_power'
                ) NOT NULL,
                content TEXT NOT NULL,
                threat_level ENUM('very_low', 'low', 'medium', 'high', 'very_high') DEFAULT 'medium',
                key_factors TEXT,
                recommendations TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES five_forces_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Porter's 5 Forces Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_value_chain_tables():
    """Value Chain Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Value Chain Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS value_chain_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Value Chain Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS value_chain_components (
                component_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                activity_type ENUM(
                    'inbound_logistics',
                    'operations',
                    'outbound_logistics',
                    'marketing_sales',
                    'service',
                    'firm_infrastructure',
                    'hr_management',
                    'technology_development',
                    'procurement'
                ) NOT NULL,
                activity_category ENUM('primary', 'support') NOT NULL,
                content TEXT NOT NULL,
                strength_level ENUM('very_weak', 'weak', 'moderate', 'strong', 'very_strong') DEFAULT 'moderate',
                improvement_points TEXT,
                cost_impact DECIMAL(5,2),
                value_impact DECIMAL(5,2),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES value_chain_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Value Chain Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_gap_analysis_tables():
    """GAP Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # GAP Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS gap_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # GAP Î∂ÑÏÑù Ìï≠Î™© ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS gap_analysis_items (
                item_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                category VARCHAR(100) NOT NULL,
                current_state TEXT NOT NULL,
                desired_state TEXT NOT NULL,
                gap_description TEXT NOT NULL,
                priority ENUM('low', 'medium', 'high') DEFAULT 'medium',
                action_plan TEXT,
                timeline VARCHAR(100),
                resources_needed TEXT,
                metrics TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES gap_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ GAP Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_blue_ocean_tables():
    """Blue Ocean Ï†ÑÎûµ Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Blue Ocean Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS blue_ocean_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                industry VARCHAR(100) NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # 4 Actions Framework ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS blue_ocean_actions (
                action_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                action_type ENUM('eliminate', 'reduce', 'raise', 'create') NOT NULL,
                factor VARCHAR(200) NOT NULL,
                description TEXT,
                impact_level INT DEFAULT 3,
                priority INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES blue_ocean_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Strategy Canvas ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS blue_ocean_canvas (
                canvas_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                competing_factor VARCHAR(200) NOT NULL,
                industry_score INT NOT NULL,
                company_score INT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES blue_ocean_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Blue Ocean Ï†ÑÎûµ Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_innovators_dilemma_tables():
    """Innovator's Dilemma Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Innovator's Dilemma Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS innovators_dilemma_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                industry VARCHAR(100) NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÌòÑÏû¨ Í∏∞Ïà†/Ï†úÌíà ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS innovators_current_tech (
                tech_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                tech_name VARCHAR(200) NOT NULL,
                description TEXT,
                market_position ENUM('low', 'mid', 'high') NOT NULL,
                performance_level INT NOT NULL,
                customer_demand INT NOT NULL,
                market_size DECIMAL(10,2),
                profit_margin DECIMAL(5,2),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES innovators_dilemma_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÌååÍ¥¥Ï†Å ÌòÅÏã† ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS innovators_disruptive_tech (
                tech_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                tech_name VARCHAR(200) NOT NULL,
                description TEXT,
                innovation_type ENUM('low_end', 'new_market') NOT NULL,
                current_performance INT NOT NULL,
                expected_growth_rate DECIMAL(5,2),
                potential_market_size DECIMAL(10,2),
                development_status ENUM('research', 'development', 'testing', 'market_entry') NOT NULL,
                risk_level ENUM('low', 'medium', 'high') NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES innovators_dilemma_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÎåÄÏùë Ï†ÑÎûµ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS innovators_strategies (
                strategy_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                strategy_type ENUM('defend', 'adapt', 'disrupt') NOT NULL,
                description TEXT NOT NULL,
                implementation_plan TEXT,
                required_resources TEXT,
                timeline VARCHAR(100),
                success_metrics TEXT,
                priority INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES innovators_dilemma_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Innovator's Dilemma Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_portfolio_analysis_tables():
    """Portfolio Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Portfolio Î∂ÑÏÑù Î©îÏù∏ ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS portfolio_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                analysis_type ENUM('bcg', 'ge_mckinsey', 'ansoff') NOT NULL,
                created_by INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                status ENUM('draft', 'completed', 'archived') DEFAULT 'draft',
                FOREIGN KEY (created_by) REFERENCES dot_user_credibility(user_id)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Portfolio Ìï≠Î™© ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS portfolio_items (
                item_id INT AUTO_INCREMENT PRIMARY KEY,
                analysis_id INT NOT NULL,
                item_name VARCHAR(200) NOT NULL,
                description TEXT,
                market_growth DECIMAL(5,2),
                market_share DECIMAL(5,2),
                market_attractiveness INT,
                business_strength INT,
                market_penetration DECIMAL(5,2),
                market_development DECIMAL(5,2),
                product_development DECIMAL(5,2),
                diversification DECIMAL(5,2),
                current_revenue DECIMAL(10,2),
                potential_revenue DECIMAL(10,2),
                investment_required DECIMAL(10,2),
                risk_level ENUM('low', 'medium', 'high') DEFAULT 'medium',
                priority INT DEFAULT 0,
                recommendations TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (analysis_id) REFERENCES portfolio_analysis(analysis_id) ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ Portfolio Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_toc_analysis_tables():
    """TOC Î∂ÑÏÑùÏùÑ ÏúÑÌïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS toc_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                area VARCHAR(50) NOT NULL,
                current_state JSON NOT NULL,
                constraints JSON NOT NULL,
                solutions JSON NOT NULL,
                implementation_plan JSON NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ TOC Î∂ÑÏÑù ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_decision_making_tables():
    """ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # Ïô∏Îûò ÌÇ§ Ï≤¥ÌÅ¨ ÎπÑÌôúÏÑ±Ìôî
        cursor.execute("SET FOREIGN_KEY_CHECKS = 0")
        
        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú
        cursor.execute("DROP TABLE IF EXISTS decision_reference_files")
        cursor.execute("DROP TABLE IF EXISTS decision_ai_analysis")
        cursor.execute("DROP TABLE IF EXISTS decision_options")
        cursor.execute("DROP TABLE IF EXISTS decision_cases")
        
        # ÏùòÏÇ¨Í≤∞Ï†ï ÏïàÍ±¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_cases (
                case_id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                decision_maker VARCHAR(100),
                status ENUM('pending', 'approved', 'rejected', 'deferred') DEFAULT 'pending',
                final_option_id INT NULL,
                final_comment TEXT,
                created_by VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                decided_at TIMESTAMP NULL
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # ÏùòÏÇ¨Í≤∞Ï†ï ÏòµÏÖò ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_options (
                option_id INT AUTO_INCREMENT PRIMARY KEY,
                case_id INT NOT NULL,
                option_name VARCHAR(100) NOT NULL,
                advantages TEXT,
                disadvantages TEXT,
                estimated_duration VARCHAR(100),
                priority INT,
                additional_info TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (case_id) REFERENCES decision_cases(case_id)
                ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # AI Î∂ÑÏÑù Í≤∞Í≥º ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_ai_analysis (
                analysis_id INT AUTO_INCREMENT PRIMARY KEY,
                case_id INT NOT NULL,
                model_name VARCHAR(50),
                analysis_content TEXT,
                recommendation TEXT,
                risk_assessment TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (case_id) REFERENCES decision_cases(case_id)
                ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Ïô∏Îûò ÌÇ§ Ï∞∏Ï°∞ ÏÑ§Ï†ï
        cursor.execute("""
            ALTER TABLE decision_cases
            ADD FOREIGN KEY (final_option_id) 
            REFERENCES decision_options(option_id)
            ON DELETE SET NULL
        """)

        # Ï∞∏Í≥† ÏûêÎ£å ÌååÏùº ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS decision_reference_files (
                file_id INT AUTO_INCREMENT PRIMARY KEY,
                case_id INT NOT NULL,
                filename VARCHAR(255) NOT NULL,
                file_content TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (case_id) REFERENCES decision_cases(case_id)
                ON DELETE CASCADE
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        # Ïô∏Îûò ÌÇ§ Ï≤¥ÌÅ¨ Îã§Ïãú ÌôúÏÑ±Ìôî
        cursor.execute("SET FOREIGN_KEY_CHECKS = 1")
        
        conn.commit()
        st.success("‚úÖ ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def create_mcp_server_tables():
    """MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        # MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï ÌÖåÏù¥Î∏î
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS mcp_server_configs (
                config_id INT AUTO_INCREMENT PRIMARY KEY,
                server_name VARCHAR(100) NOT NULL,
                server_type VARCHAR(50) NOT NULL,
                server_url VARCHAR(255),
                config_json TEXT NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                UNIQUE KEY unique_server_name (server_name)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        conn.commit()
        st.success("‚úÖ MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
    except Exception as e:
        st.error(f"ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def main():
    st.title("DB ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú ÏãúÏä§ÌÖú")

    # ÏûëÏóÖ ÏÑ†ÌÉù
    operation = st.radio(
        "ÏàòÌñâÌï† ÏûëÏóÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
        ["ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï", "ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú", "ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ", "Ìà¨Ìëú ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "Dot Collector ÌÖåÏù¥Î∏î ÏÉùÏÑ±",
         "Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ÏÑ± ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "ÏÇ¨ÏóÖ Ï†ÑÎûµ ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú",
         "Ï†ÑÎûµ ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "Business Model Canvas ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "SWOT Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "4P/7P Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±",
         "PESTEL Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "5 Forces Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "Value Chain Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "GAP Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "Blue Ocean Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±",
         "Innovator's Dilemma Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "Portfolio Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "TOC Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î ÏÉùÏÑ±", "MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï ÌÖåÏù¥Î∏î ÏÉùÏÑ±"]
    )

    # Í∏∞Ï°¥ ÌÖåÏù¥Î∏î Î™©Î°ù ÌëúÏãú
    existing_tables = get_existing_tables()
    st.write("### Í∏∞Ï°¥ ÌÖåÏù¥Î∏î Î™©Î°ù")
    st.write(existing_tables)

    if operation == "ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ":
        if existing_tables:
            # ÌÖåÏù¥Î∏î ÏÑ†ÌÉù
            selected_table = st.selectbox("Í≤ÄÏÉâÌï† ÌÖåÏù¥Î∏îÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", existing_tables)
            
            # Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•
            search_term = st.text_input("Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Î™®Îì† ÌïÑÎìúÏóêÏÑú Í≤ÄÏÉâÎê©ÎãàÎã§)")
            
            # ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌëúÏãú
            st.write("### ÌÖåÏù¥Î∏î Íµ¨Ï°∞")
            schema = get_table_schema(selected_table)
            schema_df = pd.DataFrame(schema, columns=['Field', 'Type', 'Null', 'Key', 'Default', 'Extra'])
            st.dataframe(schema_df)
            
            # Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ Î∞è ÌëúÏãú
            data = get_table_data(selected_table, search_term)
            if data:
                st.write("### Í≤ÄÏÉâ Í≤∞Í≥º")
                df = pd.DataFrame(data)
                
                # Í≤ÄÏÉâ Í≤∞Í≥º Ïàò ÌëúÏãú
                st.success(f"Í≤ÄÏÉâ Í≤∞Í≥º: {len(df)}Í±¥Ïù¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.")
                
                # Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑÏúºÎ°ú Í≤∞Í≥º ÌëúÏãú
                st.dataframe(df, height=400)
                
                # Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ
                with st.expander("Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ Î≥¥Í∏∞"):
                    for column in df.columns:
                        if df[column].dtype in ['object', 'string']:
                            st.write(f"### {column} Î≥Ñ Îç∞Ïù¥ÌÑ∞ Ïàò")
                            st.write(df[column].value_counts())
            else:
                st.warning("Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÍ±∞ÎÇò ÌÖåÏù¥Î∏îÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.")
        else:
            st.warning("Í≤ÄÏÉâÌï† ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏäµÎãàÎã§.")

    elif operation == "ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú":
        if existing_tables:
            table_to_delete = st.selectbox("ÏÇ≠Ï†úÌï† ÌÖåÏù¥Î∏îÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", existing_tables)
            if st.button("ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú", type="secondary"):
                if delete_table(table_to_delete):
                    st.success(f"ÌÖåÏù¥Î∏î {table_to_delete}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!")
                    st.rerun()
        else:
            st.warning("ÏÇ≠Ï†úÌï† ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏäµÎãàÎã§.")

    elif operation == "Ìà¨Ìëú ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        create_vote_tables()

    elif operation == "Dot Collector ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        create_dot_collector_tables()

    elif operation == "Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ÏÑ± ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±"):
            success, message = create_dot_expertise_tables()
            if success:
                st.success(message)
            else:
                st.error(message)

    elif operation == "ÏÇ¨ÏóÖ Ï†ÑÎûµ ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±"):
            create_business_strategy_tables()

    elif operation == "ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±"):
            create_decision_tree_tables()

    elif operation == "ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨ ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú":  # ÏÉàÎ°úÏö¥ ÏòµÏÖò Ï≤òÎ¶¨
        if st.button("ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú", type="secondary"):
            drop_decision_tree_tables()

    elif operation == "Ï†ÑÎûµ ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_strategy_framework_tables()

    elif operation == "Business Model Canvas ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_business_model_canvas_tables()

    elif operation == "SWOT Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_swot_analysis_tables()

    elif operation == "4P/7P Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_marketing_mix_tables()

    elif operation == "PESTEL Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_pestel_analysis_tables()

    elif operation == "5 Forces Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_five_forces_tables()

    elif operation == "Value Chain Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_value_chain_tables()

    elif operation == "GAP Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_gap_analysis_tables()

    elif operation == "Blue Ocean Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_blue_ocean_tables()

    elif operation == "Innovator's Dilemma Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_innovators_dilemma_tables()

    elif operation == "Portfolio Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_portfolio_analysis_tables()

    elif operation == "TOC Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ±":  # TOC Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï≤òÎ¶¨
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±"):
            create_toc_analysis_tables()

    elif operation == "ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•"):
            create_decision_making_tables()

    elif operation == "MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï ÌÖåÏù¥Î∏î ÏÉùÏÑ±":
        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±"):
            create_mcp_server_tables()

    else:  # ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï
        # ÌÖåÏù¥Î∏î Ïù¥Î¶Ñ ÏûÖÎ†•
        table_name = st.text_input("ÌÖåÏù¥Î∏î Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî")

        if table_name:
            # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏù∏ Í≤ΩÏö∞ Ïä§ÌÇ§Îßà ÌëúÏãú
            if table_name in existing_tables:
                st.write("### ÌòÑÏû¨ ÌÖåÏù¥Î∏î Íµ¨Ï°∞")
                current_schema = get_table_schema(table_name)
                st.table(current_schema)
                st.info("Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÏàòÏ†ï Ïãú ÏûÖÎ†•Ìïú ÏπºÎüºÎßå ÏàòÏ†ïÎêòÎ©∞, ÎÇòÎ®∏ÏßÄ ÏπºÎüºÏùÄ Ïú†ÏßÄÎê©ÎãàÎã§.")

        # ÏπºÎüº Ï†ïÎ≥¥ ÏûÖÎ†•
        st.write("### ÏπºÎüº Ï†ïÎ≥¥ ÏûÖÎ†•")
        num_columns = st.number_input("ÏàòÏ†ï/ÏÉùÏÑ±Ìï† ÏπºÎüº ÏàòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî", min_value=1, value=1)
        
        columns = []
        for i in range(int(num_columns)):
            col1, col2, col3 = st.columns(3)
            with col1:
                col_name = st.text_input(f"ÏπºÎüº {i+1} Ïù¥Î¶Ñ", key=f"name_{i}")
            with col2:
                col_type = st.selectbox(f"ÏπºÎüº {i+1} ÌÉÄÏûÖ", 
                                      ["VARCHAR(255)", "TEXT", "DATETIME", "INT", "FLOAT", "BOOLEAN"],
                                      key=f"type_{i}")
            with col3:
                is_unique = st.checkbox(f"Unique KeyÏóê Ìè¨Ìï®", key=f"unique_{i}")
            
            if col_name and col_type:
                columns.append((col_name, col_type, is_unique))

        # Unique Key ÏÑ§Ï†ï
        unique_keys = [col[0] for col in columns if col[2]]

        if st.button("ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï"):
            if table_name and columns:
                if create_or_modify_table(table_name, columns, unique_keys):
                    st.success(f"ÌÖåÏù¥Î∏î {table_name}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±/ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!")
                    st.write("### ÏµúÏ¢Ö ÌÖåÏù¥Î∏î Íµ¨Ï°∞")
                    final_schema = get_table_schema(table_name)
                    st.table(final_schema)
                else:
                    st.error("ÌÖåÏù¥Î∏î ÏÉùÏÑ±/ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
            else:
                st.warning("ÌÖåÏù¥Î∏î Ïù¥Î¶ÑÍ≥º ÏµúÏÜå ÌïòÎÇòÏùò ÏπºÎüºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")

if __name__ == "__main__":
    main() 