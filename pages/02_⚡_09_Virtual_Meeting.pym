import streamlit as st
from openai import OpenAI
import time
import threading
from datetime import datetime, timedelta
import json
import os
from typing import List, Dict, Any
import uuid
from dotenv import load_dotenv
import pandas as pd
from io import StringIO
import PyPDF2
import docx
import tempfile
from dataclasses import dataclass
import asyncio
import queue
import random

load_dotenv()

# 페이지 설정
st.set_page_config(
    page_title="Virtual Meeting - AI 가상 회의",
    page_icon="🎭",
    layout="wide"
)

@dataclass
class Persona:
    id: str
    name: str
    role: str
    prompt: str
    personality: str
    expertise: str
    speaking_style: str
    is_moderator: bool = False

@dataclass
class Message:
    timestamp: datetime
    persona_id: str
    persona_name: str
    content: str
    is_human_input: bool = False

class VirtualMeeting:
    def __init__(self):
        self.personas: List[Persona] = []
        self.messages: List[Message] = []
        self.meeting_topic = ""
        self.meeting_duration = 30  # 분
        self.start_time = None
        self.is_active = False
        self.uploaded_files_content = ""
        self.current_speaker_index = 0
        self.conversation_round = 0
        self.max_rounds = 10
        
    def add_persona(self, persona: Persona):
        if len(self.personas) < 10:
            self.personas.append(persona)
            return True
        return False
    
    def remove_persona(self, persona_id: str):
        self.personas = [p for p in self.personas if p.id != persona_id]
    
    def get_moderator(self) -> Persona:
        for persona in self.personas:
            if persona.is_moderator:
                return persona
        return None
    
    def add_message(self, persona_id: str, content: str, is_human_input: bool = False):
        persona = next((p for p in self.personas if p.id == persona_id), None)
        if persona:
            message = Message(
                timestamp=datetime.now(),
                persona_id=persona_id,
                persona_name=persona.name,
                content=content,
                is_human_input=is_human_input
            )
            self.messages.append(message)
            return message
        return None

def initialize_session_state():
    """세션 상태 초기화"""
    if 'virtual_meeting' not in st.session_state:
        st.session_state.virtual_meeting = VirtualMeeting()
        
        # 기본 사회자 페르소나 생성
        moderator = Persona(
            id="moderator_001",
            name="사회자 김진행",
            role="회의 사회자",
            prompt="""당신은 전문적인 회의 사회자입니다. 
            회의의 흐름을 원활하게 이끌고, 참가자들의 의견을 적절히 조율하며, 
            주제에서 벗어나지 않도록 안내하는 역할을 합니다.
            간결하고 명확하게 말하며, 모든 참가자가 발언할 기회를 갖도록 합니다.""",
            personality="차분하고 공정하며 전문적",
            expertise="회의 진행, 토론 조율, 의견 정리",
            speaking_style="정중하고 명확하며 간결한 말투",
            is_moderator=True
        )
        st.session_state.virtual_meeting.add_persona(moderator)
    
    if 'meeting_log' not in st.session_state:
        st.session_state.meeting_log = []
    
    if 'human_input_queue' not in st.session_state:
        st.session_state.human_input_queue = queue.Queue()
    
    if 'conversation_active' not in st.session_state:
        st.session_state.conversation_active = False

def extract_text_from_file(uploaded_file) -> str:
    """업로드된 파일에서 텍스트 추출"""
    try:
        file_type = uploaded_file.type
        content = ""
        
        if file_type == "text/plain":
            content = str(uploaded_file.read(), "utf-8")
        elif file_type == "application/pdf":
            pdf_reader = PyPDF2.PdfReader(uploaded_file)
            for page in pdf_reader.pages:
                content += page.extract_text()
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = docx.Document(uploaded_file)
            for paragraph in doc.paragraphs:
                content += paragraph.text + "\n"
        elif file_type == "text/csv":
            df = pd.read_csv(uploaded_file)
            content = df.to_string()
        else:
            content = "지원하지 않는 파일 형식입니다."
            
        return content
    except Exception as e:
        return f"파일 읽기 오류: {str(e)}"

def generate_ai_response(persona: Persona, conversation_history: str, meeting_topic: str, file_content: str) -> str:
    """AI 응답 생성"""
    try:
        # OpenAI API 키 검증
        openai_key = os.getenv('OPENAI_API_KEY')
        if not openai_key or openai_key.strip() == '' or openai_key == 'NA':
            raise ValueError("OpenAI API 키가 올바르지 않습니다. .env 파일에서 OPENAI_API_KEY를 확인해주세요.")
        
        client = OpenAI(api_key=openai_key)
        
        system_prompt = f"""
        {persona.prompt}
        
        당신의 정보:
        - 이름: {persona.name}
        - 역할: {persona.role}
        - 성격: {persona.personality}
        - 전문 분야: {persona.expertise}
        - 말하는 스타일: {persona.speaking_style}
        
        회의 주제: {meeting_topic}
        
        참고 자료: {file_content[:2000] if file_content else "없음"}
        
        지금까지의 대화 흐름을 파악하고, 당신의 역할과 전문성에 맞는 의견을 제시하세요.
        응답은 1-2문장으로 자연스럽고 간결하게 작성해주세요.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"대화 내용:\n{conversation_history}\n\n위 내용을 바탕으로 응답해주세요."}
            ],
            max_tokens=200,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"[AI 응답 생성 오류: {str(e)}]"

def format_conversation_history(messages: List[Message], last_n: int = 10) -> str:
    """대화 히스토리 포맷팅"""
    recent_messages = messages[-last_n:] if len(messages) > last_n else messages
    history = ""
    for msg in recent_messages:
        history += f"{msg.persona_name}: {msg.content}\n"
    return history

def display_message(message: Message):
    """메시지 표시"""
    with st.chat_message(
        "assistant" if not message.is_human_input else "human",
        avatar="🎭" if not message.is_human_input else "👤"
    ):
        st.write(f"**{message.persona_name}** ({message.timestamp.strftime('%H:%M:%S')})")
        st.write(message.content)

def simulate_typing_delay():
    """타이핑 시뮬레이션 지연"""
    delay = random.uniform(2, 5)  # 2-5초 랜덤 지연
    time.sleep(delay)

def run_conversation_round(meeting: VirtualMeeting, placeholder):
    """한 라운드의 대화 실행"""
    if not meeting.is_active or meeting.conversation_round >= meeting.max_rounds:
        return False
    
    # 사회자가 아닌 페르소나들이 순서대로 발언
    non_moderator_personas = [p for p in meeting.personas if not p.is_moderator]
    
    if not non_moderator_personas:
        return False
    
    # 현재 발언자 선택
    current_persona = non_moderator_personas[meeting.current_speaker_index % len(non_moderator_personas)]
    
    # 대화 히스토리 생성
    conversation_history = format_conversation_history(meeting.messages)
    
    # AI 응답 생성
    response = generate_ai_response(
        current_persona,
        conversation_history,
        meeting.meeting_topic,
        meeting.uploaded_files_content
    )
    
    # 메시지 추가
    message = meeting.add_message(current_persona.id, response)
    
    # 메시지 표시
    with placeholder.container():
        for msg in meeting.messages:
            display_message(msg)
    
    # 다음 발언자로 이동
    meeting.current_speaker_index += 1
    
    # 모든 참가자가 발언했으면 라운드 증가
    if meeting.current_speaker_index % len(non_moderator_personas) == 0:
        meeting.conversation_round += 1
    
    return True

def main():
    st.title("🎭 Virtual Meeting - AI 가상 회의")
    
    # 세션 상태 초기화
    initialize_session_state()
    meeting = st.session_state.virtual_meeting
    
    # 사이드바 - 회의 설정
    with st.sidebar:
        st.header("🎯 회의 설정")
        
        # 회의 주제
        meeting.meeting_topic = st.text_area(
            "회의 주제",
            value=meeting.meeting_topic,
            help="토론할 주제를 입력하세요"
        )
        
        # 회의 시간 설정
        meeting.meeting_duration = st.slider(
            "회의 시간 (분)",
            min_value=5,
            max_value=120,
            value=meeting.meeting_duration
        )
        
        # 최대 라운드 설정
        meeting.max_rounds = st.slider(
            "최대 대화 라운드",
            min_value=3,
            max_value=20,
            value=meeting.max_rounds
        )
        
        st.divider()
        
        # 파일 업로드
        st.header("📁 참고 자료 업로드")
        uploaded_files = st.file_uploader(
            "파일을 업로드하세요",
            type=['txt', 'pdf', 'docx', 'csv'],
            accept_multiple_files=True,
            help="페르소나들이 참고할 자료를 업로드하세요"
        )
        
        if uploaded_files:
            if st.button("파일 처리"):
                with st.spinner("파일을 처리 중입니다..."):
                    combined_content = ""
                    for file in uploaded_files:
                        content = extract_text_from_file(file)
                        combined_content += f"\n--- {file.name} ---\n{content}\n"
                    
                    meeting.uploaded_files_content = combined_content
                    st.success(f"{len(uploaded_files)}개 파일이 처리되었습니다!")
        
        st.divider()
        
        # 회의 제어
        st.header("🎮 회의 제어")
        
        if not meeting.is_active:
            if st.button("🚀 회의 시작", type="primary"):
                if meeting.meeting_topic and len(meeting.personas) > 1:
                    meeting.is_active = True
                    meeting.start_time = datetime.now()
                    meeting.conversation_round = 0
                    meeting.current_speaker_index = 0
                    st.success("회의가 시작되었습니다!")
                    st.rerun()
                else:
                    st.error("회의 주제와 최소 2명의 페르소나가 필요합니다.")
        else:
            col1, col2 = st.columns(2)
            with col1:
                if st.button("⏸️ 회의 중단"):
                    meeting.is_active = False
                    st.success("회의가 중단되었습니다.")
                    st.rerun()
            with col2:
                if st.button("🔄 회의 재시작"):
                    meeting.is_active = True
                    st.success("회의가 재시작되었습니다.")
                    st.rerun()
    
    # 메인 영역
    tab1, tab2, tab3, tab4 = st.tabs(["👥 페르소나 관리", "💬 실시간 회의", "📊 회의 현황", "📝 회의록"])
    
    with tab1:
        st.header("👥 페르소나 관리")
        
        # 새 페르소나 추가
        with st.expander("➕ 새 페르소나 추가", expanded=False):
            with st.form("add_persona"):
                name = st.text_input("이름")
                role = st.text_input("역할")
                expertise = st.text_input("전문 분야")
                personality = st.text_area("성격/특성")
                speaking_style = st.text_input("말하는 스타일")
                prompt = st.text_area(
                    "커스텀 프롬프트",
                    help="이 페르소나의 행동을 정의하는 프롬프트를 입력하세요"
                )
                
                if st.form_submit_button("페르소나 추가"):
                    if name and role and prompt:
                        new_persona = Persona(
                            id=str(uuid.uuid4()),
                            name=name,
                            role=role,
                            prompt=prompt,
                            personality=personality,
                            expertise=expertise,
                            speaking_style=speaking_style
                        )
                        
                        if meeting.add_persona(new_persona):
                            st.success(f"{name} 페르소나가 추가되었습니다!")
                            st.rerun()
                        else:
                            st.error("최대 10개의 페르소나만 추가할 수 있습니다.")
                    else:
                        st.error("이름, 역할, 프롬프트는 필수 항목입니다.")
        
        # 기존 페르소나 목록
        st.subheader("현재 페르소나 목록")
        for i, persona in enumerate(meeting.personas):
            with st.expander(f"{'🎯' if persona.is_moderator else '🎭'} {persona.name} ({persona.role})"):
                st.write(f"**전문 분야:** {persona.expertise}")
                st.write(f"**성격:** {persona.personality}")
                st.write(f"**말하는 스타일:** {persona.speaking_style}")
                st.write(f"**프롬프트:** {persona.prompt}")
                
                if not persona.is_moderator:
                    if st.button(f"🗑️ 삭제", key=f"delete_{persona.id}"):
                        meeting.remove_persona(persona.id)
                        st.success(f"{persona.name} 페르소나가 삭제되었습니다.")
                        st.rerun()
    
    with tab2:
        st.header("💬 실시간 회의")
        
        if not meeting.is_active:
            st.info("회의를 시작하려면 사이드바에서 '회의 시작' 버튼을 클릭하세요.")
        else:
            # 회의 진행 상황
            col1, col2, col3 = st.columns(3)
            with col1:
                elapsed_time = datetime.now() - meeting.start_time
                st.metric("경과 시간", f"{elapsed_time.seconds // 60}분")
            with col2:
                st.metric("현재 라운드", f"{meeting.conversation_round + 1}/{meeting.max_rounds}")
            with col3:
                st.metric("총 메시지", len(meeting.messages))
            
            # 사회자 개입
            st.subheader("🎯 사회자 개입")
            moderator = meeting.get_moderator()
            if moderator:
                human_input = st.text_area(
                    f"{moderator.name}로서 발언",
                    key="moderator_input",
                    help="사회자 역할로 회의 방향을 제시하거나 의견을 추가하세요"
                )
                
                if st.button("💬 발언하기"):
                    if human_input:
                        meeting.add_message(moderator.id, human_input, is_human_input=True)
                        st.success("발언이 추가되었습니다!")
                        st.rerun()
            
            # 대화 진행
            st.subheader("🗣️ 대화 진행")
            
            # 대화 표시 영역
            conversation_placeholder = st.empty()
            
            # 자동 대화 진행
            if st.button("➡️ 다음 발언"):
                with st.spinner("AI가 응답을 생성 중입니다..."):
                    success = run_conversation_round(meeting, conversation_placeholder)
                    if success:
                        st.rerun()
                    else:
                        st.info("회의가 종료되었거나 더 이상 진행할 수 없습니다.")
            
            # 자동 진행 모드
            auto_mode = st.checkbox("🔄 자동 진행 모드", help="체크하면 자동으로 대화가 진행됩니다")
            
            if auto_mode and meeting.is_active:
                # 자동 진행 로직은 별도 구현 필요 (복잡성으로 인해 수동 진행으로 대체)
                st.info("자동 진행 모드는 '다음 발언' 버튼을 반복적으로 클릭해주세요.")
            
            # 대화 내용 표시
            with conversation_placeholder.container():
                for message in meeting.messages:
                    display_message(message)
    
    with tab3:
        st.header("📊 회의 현황")
        
        if meeting.messages:
            # 발언 통계
            speaker_stats = {}
            for message in meeting.messages:
                if message.persona_name in speaker_stats:
                    speaker_stats[message.persona_name] += 1
                else:
                    speaker_stats[message.persona_name] = 1
            
            # 발언 횟수 차트
            if speaker_stats:
                st.subheader("👤 발언자별 통계")
                df_stats = pd.DataFrame(list(speaker_stats.items()), columns=['발언자', '발언 횟수'])
                st.bar_chart(df_stats.set_index('발언자'))
            
            # 최근 활동
            st.subheader("🕐 최근 활동")
            recent_messages = meeting.messages[-5:] if len(meeting.messages) > 5 else meeting.messages
            for message in reversed(recent_messages):
                st.write(f"**{message.timestamp.strftime('%H:%M:%S')}** - {message.persona_name}: {message.content[:100]}...")
        else:
            st.info("아직 회의 메시지가 없습니다.")
    
    with tab4:
        st.header("📝 회의록")
        
        if meeting.messages:
            # 회의록 다운로드
            meeting_log = ""
            meeting_log += f"# 회의록\n\n"
            meeting_log += f"**주제:** {meeting.meeting_topic}\n"
            meeting_log += f"**시작 시간:** {meeting.start_time.strftime('%Y-%m-%d %H:%M:%S') if meeting.start_time else 'N/A'}\n"
            meeting_log += f"**참여자:** {', '.join([p.name for p in meeting.personas])}\n\n"
            meeting_log += "## 대화 내용\n\n"
            
            for message in meeting.messages:
                meeting_log += f"**{message.persona_name}** ({message.timestamp.strftime('%H:%M:%S')})\n"
                meeting_log += f"{message.content}\n\n"
            
            st.download_button(
                label="📥 회의록 다운로드",
                data=meeting_log,
                file_name=f"meeting_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                mime="text/markdown"
            )
            
            # 회의록 미리보기
            st.subheader("👀 회의록 미리보기")
            st.markdown(meeting_log)
        else:
            st.info("회의록이 비어있습니다.")

if __name__ == "__main__":
    main() 